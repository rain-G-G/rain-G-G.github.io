<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>service保活</title>
      <link href="2021/09/08/service%E4%BF%9D%E6%B4%BB/"/>
      <url>2021/09/08/service%E4%BF%9D%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="一、保活方案："><a href="#一、保活方案：" class="headerlink" title="一、保活方案："></a>一、保活方案：</h5><ul><li>一、进程提权</li><li>二、双进程守护</li><li>三、JobService 应用退出后重启service</li><li>四、注册特殊广播 保证service在开机后自启动</li><li>五、WakeLock的使用 息屏后不被释放资源杀死</li><li>六、加入电量白名单，跳过电量优化</li><li>七、在多任务列表源码里隐藏该app界面或清理时过滤该包名</li><li>八、一些小操作方法</li></ul><h6 id="一、进程提权"><a href="#一、进程提权" class="headerlink" title="一、进程提权"></a>一、进程提权</h6><blockquote><p>在Android的lowmemroykiller(进程回收)机制中，adj值越小的进程越不容易被杀死，相对普通进程来说能让adj去到0显然是最完美的，Android给了Service这样一个功能：startForeground(); <a href="https://www.cnblogs.com/tiger-wang-ms/p/6491429.html" target="_blank" rel="noopener">进程adj的概念</a>。系统lowmemeorykiller机制下对于进程的级别的以变量的形式定义在framework/base/core/java/com/android/server/am/ProcessList.java类中</p></blockquote><h6 id="二、双进程守护（先放着-没理解Aidl在此处的作用）"><a href="#二、双进程守护（先放着-没理解Aidl在此处的作用）" class="headerlink" title="二、双进程守护（先放着 没理解Aidl在此处的作用）"></a>二、双进程守护（先放着 没理解Aidl在此处的作用）</h6><blockquote><p>通过Aidl文件，主服务启动的时候绑定守护服务，断开的时候启动守护服务 重启主服务、重新绑定</p></blockquote><p>1、新建ProcessConnection.aidl实现跨进程通信：</p><p>2、创建主服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessConnection.Stub() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        startForeground(<span class="number">1</span>,<span class="keyword">new</span> Notification());<span class="comment">//该创建前台的服务方法有问题</span></span><br><span class="line">        <span class="comment">//绑定建立连接</span></span><br><span class="line">        bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//连接上</span></span><br><span class="line">            Log.d(<span class="string">"test"</span>,<span class="string">"StepService:建立链接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//断开连接</span></span><br><span class="line">            startService(<span class="keyword">new</span> Intent(StepService.<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//重新绑定</span></span><br><span class="line">            bindService(<span class="keyword">new</span> Intent(StepService.<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、守护服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessConnection.Stub() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        startForeground(<span class="number">1</span>,<span class="keyword">new</span> Notification());<span class="comment">//该创建前台的服务方法有问题</span></span><br><span class="line">        <span class="comment">//绑定建立连接</span></span><br><span class="line">        bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//连接上</span></span><br><span class="line">            Log.d(<span class="string">"test"</span>,<span class="string">"GuardService:建立连接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//断开连接</span></span><br><span class="line">            startService(<span class="keyword">new</span> Intent(GuardService.<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//重新绑定</span></span><br><span class="line">            bindService(<span class="keyword">new</span> Intent(GuardService.<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回参数含义：</p><ul><li>START_STICKY：在Service被关闭后,重新开启Service</li><li>START_NOT_STICKY：服务被异常杀掉后，系统将会被设置为started状态，系统不会重启该服务，直到startService(Intent intent)方法再次被调用。</li><li>START_REDELIVER_INTENT：重传Intent，使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务,并将Intent的值传入。</li><li>START_STICKY_COMPATIBILITY：START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</li></ul><h6 id="三、使用JobService来实现应用退出后重启Service"><a href="#三、使用JobService来实现应用退出后重启Service" class="headerlink" title="三、使用JobService来实现应用退出后重启Service"></a>三、使用JobService来实现应用退出后重启Service</h6><blockquote><p>JobService也是一个service，和普通的service不同的是，JobService是一个任务回调类，通过JobScheduler设置任务给系统，系统来调用JobService中的方法，具体处理什么任务需要我们自己在JobService中的回调方法中实现。那么关于任务的管理和进程的维护、调度当然是由系统来统一管理。<br>Google从Android SDK 21之后添加了JobScheduler来执行一些满足特定条件但不紧急的后台任务，我们可以利用JobScheduler来执行这些特殊的后台任务时来减少电量的消耗。</p></blockquote><p>1、使用JobService来实现APP进程防杀， 首先声明权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">    android:name=<span class="string">".MyJobDaemonService"</span></span><br><span class="line">    android:enabled=<span class="string">"true"</span></span><br><span class="line">    android:exported=<span class="string">"true"</span></span><br><span class="line">    android:permission=<span class="string">"android.permission.BIND_JOB_SERVICE"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2、自定义一个Service类，继承自JobService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobDaemonService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kJobId = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"jobService启动"</span>);</span><br><span class="line">        scheduleJob(getJobInfo());</span><br><span class="line">        <span class="keyword">return</span> START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"执行了onStartJob方法"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isLocalServiceWork = isServiceWork(<span class="keyword">this</span>, <span class="string">"com.marswin89.marsdaemon.demo.Service1"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isRemoteServiceWork = isServiceWork(<span class="keyword">this</span>, <span class="string">"com.marswin89.marsdaemon.demo.Service2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!isLocalServiceWork||</span><br><span class="line">                !isRemoteServiceWork)&#123;</span><br><span class="line">            <span class="keyword">this</span>.startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Service1<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//this.startService(new Intent(this,Service2.class));</span></span><br><span class="line">            <span class="comment">//Toast.makeText(this, "进程启动", Toast.LENGTH_SHORT).show();</span></span><br><span class="line">            Log.i(<span class="string">"onStartJob"</span>, <span class="string">"启动service1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"执行了onStopJob方法"</span>);</span><br><span class="line">        scheduleJob(getJobInfo());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将任务作业发送到作业调度中去</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleJob</span><span class="params">(JobInfo t)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"调度job"</span>);</span><br><span class="line">        JobScheduler tm =</span><br><span class="line">                (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line">        tm.schedule(t);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobInfo <span class="title">getJobInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JobInfo.Builder builder = <span class="keyword">new</span> JobInfo.Builder(kJobId++, <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MyJobDaemonService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_NONE);</span><br><span class="line">        builder.setPersisted(<span class="keyword">true</span>);</span><br><span class="line">        builder.setRequiresCharging(<span class="keyword">false</span>);</span><br><span class="line">        builder.setRequiresDeviceIdle(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//间隔1000毫秒</span></span><br><span class="line">        builder.setPeriodic(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 判断服务是否正在运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isServiceWork</span><span class="params">(Context mContext, String serviceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isWork = <span class="keyword">false</span>;</span><br><span class="line">        ActivityManager myAM = (ActivityManager) mContext</span><br><span class="line">                .getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;ActivityManager.RunningServiceInfo&gt; myList = myAM.getRunningServices(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> (myList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.size(); i++) &#123;</span><br><span class="line">            String mName = myList.get(i).service.getClassName().toString();</span><br><span class="line">            <span class="keyword">if</span> (mName.equals(serviceName)) &#123;</span><br><span class="line">                isWork = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isWork;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="四、注册特殊广播："><a href="#四、注册特殊广播：" class="headerlink" title="四、注册特殊广播："></a>四、注册特殊广播：</h6><p>1.1、注册开机广播</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">".modle.mReceiver"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>1.2、开机后启动服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line">        Intent mIntent = <span class="keyword">new</span> Intent(context,StepService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        context.startService(mIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.1 android.intent.action.USER_PRESENT事件</p><blockquote><p>在做解锁监听程序时，一开始采用监听屏幕SCREEN_ON和SCREEN_OFF这两个action。</p><p>但奇怪的是，这两个action只能通过代码动态的形式注册，才能被监听到，使用AndroidManifest.xml 完全监听不到。</p><p>百度后发现这是PowerManager那边在发这个广播的时候做了限制，限制只能有register到代码中的receiver才能接收。</p><p>后来就找各种能静态注册AndroidManifest.xml同时能反映用户解锁行为的广播.于是找到android.intent.action.USER_PRESENT.</p><p>每个用户隔一段时间重新开始使用手机时，首先按电源键点亮屏幕，紧接着解锁。android.intent.action.USER_PRESENT就是解锁时发出的intent.</p></blockquote><h6 id="五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解"><a href="#五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解" class="headerlink" title="五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解"></a>五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解</h6><p>1、添加权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2、需求：要在后台跑一个Service执行轮询，屏幕熄灭或锁屏后，仍然需要保持Service一直处于轮询状态。<br> 应用程序中如果要在待机前保存数据状态的话，要保证此过程中不会进入待机。可以在 onResume() 或者 onStart() 中申请 wakelock 锁，即调用getLock()方法。在 onPause() 或者 onDistroy() 中处理应用待机后再释放掉 wakelock 锁，此时调用releaseLock()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 同步方法   得到休眠锁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(mWakeLock==<span class="keyword">null</span>)&#123;</span><br><span class="line">           PowerManager mgr=(PowerManager)context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">           mWakeLock=mgr.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,StepService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">           mWakeLock.setReferenceCounted(<span class="keyword">true</span>);</span><br><span class="line">           Calendar c=Calendar.getInstance();</span><br><span class="line">           c.setTimeInMillis((System.currentTimeMillis()));</span><br><span class="line">           <span class="keyword">int</span> hour =c.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">           <span class="keyword">if</span>(hour&gt;=<span class="number">23</span>||hour&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">               mWakeLock.acquire(<span class="number">5000</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               mWakeLock.acquire(<span class="number">300000</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       Log.v(TAG,<span class="string">"get lock"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mWakeLock != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mWakeLock.isHeld()) &#123;</span><br><span class="line">                mWakeLock.release();</span><br><span class="line">                Log.v(TAG,<span class="string">"release lock"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mWakeLock = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="六、加入电量白名单，跳过电量优化"><a href="#六、加入电量白名单，跳过电量优化" class="headerlink" title="六、加入电量白名单，跳过电量优化"></a>六、加入电量白名单，跳过电量优化</h6><blockquote><p>在Android6.0之后，开始引入了电池优化机制，监控APP的耗电量，这样长时间后台运行的service会被监测出来，基于电池优化的策略，很可能会被系统自动杀掉。为了跳过这样的限制，Android是提供电池优化白名单的，通过powerManager.isIgnoringBatteryOptimizations(getPackageName())来判断是否已经加入白名单，没有则通过以下代码来弹窗提示用户自主选择</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h6 id="七、在多任务列表源码里隐藏该app界面或清理时过滤该包名"><a href="#七、在多任务列表源码里隐藏该app界面或清理时过滤该包名" class="headerlink" title="七、在多任务列表源码里隐藏该app界面或清理时过滤该包名"></a>七、在多任务列表源码里隐藏该app界面或清理时过滤该包名</h6><p>等分析过多任务后，再来完善。</p><h6 id="八、一些小操作方法"><a href="#八、一些小操作方法" class="headerlink" title="八、一些小操作方法"></a>八、一些小操作方法</h6><p>1、在service的onStartCommand方法里返回 STATR_STICK，比如上面的双进程守护</p><p>2、覆写Service的onDestroy方法</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用代码执行shell命令</title>
      <link href="2021/09/08/%E7%94%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/"/>
      <url>2021/09/08/%E7%94%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd = <span class="string">"pm install -r -d --user "</span> + <span class="number">0</span> + <span class="string">" -i "</span> + mContext.getPackageName() + <span class="string">" "</span> + apkFilePath;</span><br><span class="line">String command = <span class="string">"am broadcast -a ADB_INPUT_TEXT --es msg wx蛇魔你好!@#$"</span>;</span><br></pre></td></tr></table></figure><p>貌似简单的指令还行，如果是su命令的话就不行，还需积累。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleKeyBroadCmd</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cmd == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Process process = runtime.exec(cmd);<span class="comment">//"su"</span></span><br><span class="line">        InputStream errorInput = process.getErrorStream();</span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String error = <span class="string">""</span>;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result += line;</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(errorInput));</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            error += line;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.equals(<span class="string">"Success"</span>)) &#123;<span class="comment">//之前执行的是pm install安装操作，结果会返回Success</span></span><br><span class="line">            Log.v(TAG, <span class="string">" install: Success"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">" install: error"</span> + error + <span class="string">";result="</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Log.v(TAG, <span class="string">"install: error"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视频基础知识点</title>
      <link href="2021/09/08/%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021/09/08/%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h6 id="一、像素："><a href="#一、像素：" class="headerlink" title="一、像素："></a>一、像素：</h6><blockquote><p>通常说的像素，一般指图像含有多少个像素点。</p><p>720P: 实际像素是1280x720，相乘结果921600， 即有921600个像素点，也就是常说的100万像素</p><p>1080P：实际像素是1920x1080，相乘结果2073600，即有2073600个像素点，也就是常说的200万像素</p></blockquote><h6 id="二、图像占用空间大小计算"><a href="#二、图像占用空间大小计算" class="headerlink" title="二、图像占用空间大小计算"></a>二、图像占用空间大小计算</h6><blockquote><p>公式：图像像素数 * 图像位深 / 8 = 占用字节。一个像素点占用8位</p><p>比如一张图片像素为：1024x1024，位深32位，则图像大小为： <strong>1024*1024*32/8=4MB</strong></p></blockquote><h6 id="三、分辨率"><a href="#三、分辨率" class="headerlink" title="三、分辨率"></a>三、分辨率</h6><blockquote><p>分辨率是指设备输出分辨率或叫屏幕 分辨率，即屏幕上横竖有多少个容器点，每个容器点用于容纳一个像素。说人话就是：屏幕的像素点总和。</p></blockquote><h6 id="四、密度"><a href="#四、密度" class="headerlink" title="四、密度"></a>四、密度</h6><blockquote><p>每英寸包含多少个像素点，单位PPI(pixel per inch). <a href="https://blog.csdn.net/qq_34732729/article/details/104837650?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-10.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-10.control" target="_blank" rel="noopener">图片地址</a></p><p><img src="D:%5Cblog%5Csource%5Cimage%5Cppi.png" alt=""></p><p>根据公式，就可以计算出，这个5.8寸的手机的PPI是多少。PPI超过300就可以算是视网膜屏了，肉眼已经分辨不出像素点来。</p></blockquote><h6 id="五、码流（data-rate）："><a href="#五、码流（data-rate）：" class="headerlink" title="五、码流（data rate）："></a>五、码流（data rate）：</h6><blockquote><p>视频码率就是数据传输时单位时间传送的数据位数，一般我们用的单位是kbps即千位每秒。通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件。</p><p>但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真，围绕这个核心衍生出来的cbr（固定码率）与vbr（可变码率），都是在这方面做的文章，不过事情总不是绝对的，举例来看，对于一个音频，其码率越高，被压缩的比例越小，音质损失越小，与<a href="https://baike.baidu.com/item/音源/3442285" target="_blank" rel="noopener">音源</a>的音质越接近。</p></blockquote><h6 id="六、帧率："><a href="#六、帧率：" class="headerlink" title="六、帧率："></a>六、帧率：</h6><blockquote><p>帧速率（画面的实时性、流畅性），指每秒钟刷新的图片的帧数。也可以理解为图形处理器每秒钟能够刷新几次。对视频内容而言，帧速率指每秒所显示的静止帧格数。要生成平滑连贯的动画效果，帧速率一般不小于8；而电影的帧速率为24fps。捕捉动态视频内容时，此数字愈高愈好。</p></blockquote><h6 id="七、视频文件大小的计算"><a href="#七、视频文件大小的计算" class="headerlink" title="七、视频文件大小的计算"></a>七、视频文件大小的计算</h6><blockquote><p>视频文件大小计算公式：(音频码率+视频码率) x 时长 / 8</p><p>1Mbps=1024Kbps=1024/8KBps=128KB/s</p><p>音频码率：128（kbps）<br>视频码率：1824 （kbps）<br>总时长：4<em>60+13 （秒）<br>得出：((1824+128)/1024)</em>(4*60+13)/8 = 60.28515625 M<br>计算得出的值，与视频文件本身的大小59M，基本上对得上。</p></blockquote><h6 id="八、清晰度"><a href="#八、清晰度" class="headerlink" title="八、清晰度"></a>八、清晰度</h6><blockquote><p>压缩比 = 帧率*分辨率 / 码率</p><p>把每秒显示的图片进行压缩后的数据量。影响体积，与体积成正比：码率越大，体积越大，码率越小，体积越小。（体积=码率X时间） 帧率<strong>X</strong>分辨率<strong>=</strong>压缩前的每秒数据量（单位是字节。） 压缩比<strong>=</strong>压缩前的每秒数据量<strong>/</strong>码率 （对于同一视频源并采用同一种视频编码算法，压缩比越高，画面质量越差）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AIDL基本用法</title>
      <link href="2021/08/26/AIDL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2021/08/26/AIDL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="第一步：是创建-aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持："><a href="#第一步：是创建-aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持：" class="headerlink" title="第一步：是创建.aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持："></a>第一步：是创建.aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AidlTest</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第二步：编译完成后，我们就要实现-aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest-Stub类："><a href="#第二步：编译完成后，我们就要实现-aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest-Stub类：" class="headerlink" title="第二步：编译完成后，我们就要实现.aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest.Stub类："></a>第二步：编译完成后，我们就要实现.aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest.Stub类：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlTestStub</span> <span class="keyword">extends</span> <span class="title">AidlTest</span>.<span class="title">Stub</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程："><a href="#第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程：" class="headerlink" title="第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程："></a>第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlTestNative</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> AidlTestStub mStub;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"> </span><br><span class="line">        mStub = <span class="keyword">new</span> AidlTestStub();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mStub.getName(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mStub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后给service进行注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">".AidlTestNative"</span></span><br><span class="line">            android:enabled=<span class="string">"true"</span></span><br><span class="line">            android:process=<span class="string">":marsservice"</span>/&gt;</span><br></pre></td></tr></table></figure><h6 id="第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService"><a href="#第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService" class="headerlink" title="第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService()"></a>第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, AidlTestNative<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>然后获取进程的连接状态和其他进程的IBinder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">    Log.e(getLocalClassName(), <span class="string">"service connected"</span>);</span><br><span class="line">    mAidlManager = AidlTest.Stub.asInterface(service);</span><br><span class="line">    mBound = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mAidlManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String namex = mAidlManager.getName(<span class="string">"x"</span>);</span><br><span class="line">            Log.i(<span class="string">"TAG"</span>,namex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">        Log.e(getLocalClassName(), <span class="string">"service disconnected"</span>);</span><br><span class="line">        mBound = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IxxxxService.Stub.asInterface(IBinder obj) ：<br>这个函数是干啥用呢？ 首先当bindService之后，客户端会得到一个Binder引用，是Binder 哟，不是IxxxxService.Proxy实例，那这样的话，我们第一个想法是利用Binder引用作为参数实例化出一个 IxxxxService.Proxy。<br>Ok, 但如果服务端和客户端都是在同一个进程呢，还需要利用IPC吗？这样就不需要了，直接将IxxxxService当做普通的对象调用就成了。<br>Google 的同志们他们利用IxxxxService.Stub.asInterface函数对这两种不同的情况进行了统一，也就是不管你是在同一进程还是不同进 程，那么在拿到Binder引用后，调用IxxxxService.Stub.asInterface(IBinder obj) 即可得到一个IxxxxService 实例，然后你只管调用IxxxxService里的函数就成了。</p></blockquote><h6 id="先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！"><a href="#先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！" class="headerlink" title="先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！"></a>先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CallBack用法</title>
      <link href="2021/08/25/CallBack%E7%94%A8%E6%B3%95/"/>
      <url>2021/08/25/CallBack%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="1-如何定义一个回调："><a href="#1-如何定义一个回调：" class="headerlink" title="1. 如何定义一个回调："></a>1. 如何定义一个回调：</h6><blockquote><p>a. 定义接口 : 在类中定义一个Interface, 并在接口中定义一个抽象方法;</p><p>b. 接口对象 : 在类中定义一个该接口的成员变量;</p><p>c. 设置对象 : 在类中定义一个公共的方法, 可以设置这个接口的对象, 调用该方法给接口对象成员变量赋值;</p><p>d. 调用方法 : 在合适的位置调用接口对象中的方法;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义回调接口的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Callback mCallback;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 声明回调接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置回调接口对象成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 调用回调接口对象中的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mCallback.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Employee employee;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 为Employee设置回调函数, 在这里定义具体的回调方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">employee.setCallback(<span class="keyword">new</span> Employee.Callback() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"work"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Settings10主界面加载(一)</title>
      <link href="2021/08/09/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%B8%80)/"/>
      <url>2021/08/09/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h6 id="主界面加载："><a href="#主界面加载：" class="headerlink" title="主界面加载："></a>主界面加载：</h6><p>从清单文件AndroidManifest.xml中入手：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity-alias android:name=<span class="string">"Settings"</span></span><br><span class="line">    android:label=<span class="string">"@string/settings_label_launcher"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTask"</span></span><br><span class="line">    android:targetActivity=<span class="string">".homepage.SettingsHomepageActivity"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">    &lt;meta-data android:name=<span class="string">"android.app.shortcuts"</span> android:resource=<span class="string">"@xml/shortcuts"</span>/&gt;</span><br><span class="line">&lt;/activity-alias&gt;</span><br></pre></td></tr></table></figure><p>从Settings.java来看，除了大量的静态类继承SettingsActivity, 就无其他有效信息了。但看其xml定义可以发现targetActivity属性, 实质应是SettingsHomepageActivity.java。</p><p>先看其xml配置:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">".homepage.SettingsHomepageActivity"</span></span><br><span class="line">    android:label=<span class="string">"@string/settings_label_launcher"</span></span><br><span class="line">    android:theme=<span class="string">"@style/Theme.Settings.Home"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTask"</span>&gt;</span><br><span class="line">    &lt;intent-filter android:priority=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.settings.SETTINGS"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">    &lt;meta-data android:name=<span class="string">"com.android.settings.PRIMARY_PROFILE_CONTROLLED"</span></span><br><span class="line">    android:value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><p>SettingsHomepageActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.settings_homepage_container);</span><br><span class="line">    <span class="keyword">final</span> View root = findViewById(R.id.settings_homepage_container);</span><br><span class="line">    root.setSystemUiVisibility(</span><br><span class="line">            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br><span class="line"></span><br><span class="line">    setHomepageContainerPaddingTop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Toolbar toolbar = findViewById(R.id.search_action_bar);</span><br><span class="line">    FeatureFactory.getFactory(<span class="keyword">this</span>).getSearchFeatureProvider()</span><br><span class="line">            .initSearchToolbar(<span class="keyword">this</span> <span class="comment">/* activity */</span>, toolbar, SettingsEnums.SETTINGS_HOMEPAGE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ImageView avatarView = findViewById(R.id.account_avatar);</span><br><span class="line">    <span class="keyword">final</span> AvatarViewMixin avatarViewMixin = <span class="keyword">new</span> AvatarViewMixin(<span class="keyword">this</span>, avatarView);</span><br><span class="line">    getLifecycle().addObserver(avatarViewMixin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!getSystemService(ActivityManager<span class="class">.<span class="keyword">class</span>).<span class="title">isLowRamDevice</span>()) </span>&#123;</span><br><span class="line">        <span class="comment">// Only allow contextual feature on high ram devices.</span></span><br><span class="line">        showFragment(<span class="keyword">new</span> ContextualCardsFragment(), R.id.contextual_cards_content);</span><br><span class="line">    &#125;</span><br><span class="line">    showFragment(<span class="keyword">new</span> TopLevelSettings(), R.id.main_content);</span><br><span class="line">    ((FrameLayout) findViewById(R.id.main_content))</span><br><span class="line">            .getLayoutTransition().enableTransitionType(LayoutTransition.CHANGING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主界面的layout为settings_homepage_container.xml:</p><p>主要包含三部分：一个顶部快捷搜索栏，一个是小卡片式的小组件(id.contextual_cards_content)，下来Id为main_content的FrameLayout就是用来显示主设置内容的，即Settings的一级菜单项界面。由于本篇主要记录主界面加载流程，所以主要看main_content。<br>回到onCreate()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showFragment(<span class="keyword">new</span> TopLevelSettings(), R.id.main_content);</span><br></pre></td></tr></table></figure><p>启动TopLevelSettings的fragment，此fragments主要继承于DashboardFragment.java，先来看TopLevelSettings的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TopLevelSettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">    <span class="comment">// Disable the search icon because this page uses a full search view in actionbar.</span></span><br><span class="line">    args.putBoolean(NEED_SEARCH_ICON_IN_ACTION_BAR, <span class="keyword">false</span>);</span><br><span class="line">    setArguments(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到构造方法中仅设置了个标志位，再根据framgments生命周期先来看onAttach()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    use(SupportPreferenceController<span class="class">.<span class="keyword">class</span>).<span class="title">setActivity</span>(<span class="title">getActivity</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用父类DashboardFragment.java的onAttach()方法，此方法主要是完成mPreferenceControllers的加载。</p><p>onCreate()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">// Set ComparisonCallback so we get better animation when list changes.</span></span><br><span class="line">    getPreferenceManager().setPreferenceComparisonCallback(</span><br><span class="line">    <span class="keyword">new</span> PreferenceManager.SimplePreferenceComparisonCallback());</span><br><span class="line">    <span class="keyword">if</span> (icicle != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Upon rotation configuration change we need to update preference states before any</span></span><br><span class="line">    <span class="comment">// editing dialog is recreated (that would happen before onResume is called).</span></span><br><span class="line">    updatePreferenceStates();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次进入时，icicle为null，具体应该看引用的父类的onCreate()方法，由于此篇主要说主界面加载，故暂不展开。根据log定位发现，其后调用DashboardFragment.java的onCreatePreferences()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreatePreferences</span><span class="params">(Bundle savedInstanceState, String rootKey)</span> </span>&#123;</span><br><span class="line">    refreshAllPreferences(getLogTag());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用refreshAllPreferences()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Refresh all preference items, including both static prefs from xml, and dynamic items from</span></span><br><span class="line"><span class="comment">* DashboardCategory.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshAllPreferences</span><span class="params">(<span class="keyword">final</span> String TAG)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">    <span class="comment">// First remove old preferences.</span></span><br><span class="line">    <span class="keyword">if</span> (screen != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Intentionally do not cache PreferenceScreen because it will be recreated later.</span></span><br><span class="line">    screen.removeAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add resource based tiles.</span></span><br><span class="line">    displayResourceTiles();</span><br><span class="line"></span><br><span class="line">    refreshDashboardTiles(TAG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Activity activity = getActivity();</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"All preferences added, reporting fully drawn"</span>);</span><br><span class="line">    activity.reportFullyDrawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updatePreferenceVisibility(mPreferenceControllers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到此方法主要是用来加载显示的preference items，主要分为两部分, <strong>一个是静态xml定义的prefs(调用displayResourceTiles()方法), 另一部分是从DashboardCategory动态加载(调用refreshDashboardTiles(TAG)方法</strong>，其中TAG为 “TopLevelSettings”)。</p><h6 id="displayResourceTiles"><a href="#displayResourceTiles" class="headerlink" title="displayResourceTiles()"></a>displayResourceTiles()</h6><p>此方法主要是从xml资源文件中加载显示prefs：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Displays resource based tiles.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">displayResourceTiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> resId = getPreferenceScreenResId();</span><br><span class="line">    <span class="keyword">if</span> (resId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addPreferencesFromResource(resId);</span><br><span class="line">    <span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">    screen.setOnExpandButtonClickListener(<span class="keyword">this</span>);</span><br><span class="line">    mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">    controller -&gt; controller.displayPreference(screen));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用getPreferenceScreenResId()方法获取所要加载的xml的ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPreferenceScreenResId</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>调用子类TopLevelSettings.java的getPreferenceScreenResId()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected int getPreferenceScreenResId() &#123;</span><br><span class="line">    return R.xml.top_level_settings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Settings主界面加载的xml文件是top_level_settings，其内主要配置的是一些Preference菜单项如网络和互联网、已连接的设备、应用和通知、电池等等。以网络和互联网菜单项为例，xml配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Preference</span><br><span class="line">    android:key=<span class="string">"top_level_network"</span></span><br><span class="line">    android:title=<span class="string">"@string/network_dashboard_title"</span></span><br><span class="line">    android:summary=<span class="string">"@string/summary_placeholder"</span></span><br><span class="line">    android:icon=<span class="string">"@drawable/ic_homepage_network"</span></span><br><span class="line">    android:order=<span class="string">"-120"</span></span><br><span class="line">    android:fragment=<span class="string">"com.android.settings.network.NetworkDashboardFragment"</span></span><br><span class="line">settings:controller=<span class="string">"com.android.settings.network.TopLevelNetworkEntryPreferenceController"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>key定义此preference的唯一性ID；</li><li>title定义标题，此字串显示网络和互联网；</li><li>summary，此显示WLAN、移动网络、流量使用和热点；</li><li>icon，定义图标；</li><li>order，加载显示优先级，order为负时，绝对值越高，界面显示越靠前；order为正时，值越高，显示越靠后；</li><li>fragment，定义点击此preference所跳转的fragment界面；</li><li>controller，控制管理类。</li></ul><p>再回到displayResourceTiles()中，继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addPreferencesFromResource(resId);</span><br></pre></td></tr></table></figure><p>此主要是调用androidX Preference的addPreferencesFromResource()方法，由于androidX无源码不详细展开。此方法主要是将preferenceScreen下所有Preference添加到ArrayList中，然后再根据此集合构建生成PreferenceGroupAdapter，最后将此adapter设置到listview中，完成数据绑定，从而完成界面加载。继续看displayResourceTiles()余下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">screen.setOnExpandButtonClickListener(<span class="keyword">this</span>);</span><br><span class="line">mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">controller -&gt; controller.displayPreference(screen));</span><br></pre></td></tr></table></figure><p>先来看mPreferenceControllers是什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class, List&lt;AbstractPreferenceController&gt;&gt; mPreferenceControllers = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addPreferenceController</span><span class="params">(AbstractPreferenceController controller)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPreferenceControllers.get(controller.getClass()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mPreferenceControllers.put(controller.getClass(), <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    mPreferenceControllers.get(controller.getClass()).add(controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主要是在addPreferenceController()方法里面去完成赋值的。而调用此方法主要是在onAttach()中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Load preference controllers from code</span></span><br><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllersFromCode =</span><br><span class="line">createPreferenceControllers(context);</span><br><span class="line"><span class="comment">// Load preference controllers from xml definition</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllersFromXml = PreferenceControllerListHelper</span><br><span class="line">.getPreferenceControllersFromXml(context, getPreferenceScreenResId());</span><br><span class="line"><span class="comment">// Filter xml-based controllers in case a similar controller is created from code already.</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; uniqueControllerFromXml =</span><br><span class="line">PreferenceControllerListHelper.filterControllers(</span><br><span class="line">controllersFromXml, controllersFromCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add unique controllers to list.</span></span><br><span class="line"><span class="keyword">if</span> (controllersFromCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">controllers.addAll(controllersFromCode);</span><br><span class="line">&#125;</span><br><span class="line">controllers.addAll(uniqueControllerFromXml);</span><br><span class="line"></span><br><span class="line"><span class="comment">// And wire up with lifecycle.</span></span><br><span class="line"><span class="keyword">final</span> Lifecycle lifecycle = getSettingsLifecycle();</span><br><span class="line">uniqueControllerFromXml</span><br><span class="line">.stream()</span><br><span class="line">.filter(controller -&gt; controller <span class="keyword">instanceof</span> LifecycleObserver)</span><br><span class="line">.forEach(</span><br><span class="line">controller -&gt; lifecycle.addObserver((LifecycleObserver) controller));</span><br><span class="line"></span><br><span class="line">mPlaceholderPreferenceController =</span><br><span class="line"><span class="keyword">new</span> DashboardTilePlaceholderPreferenceController(context);</span><br><span class="line">controllers.add(mPlaceholderPreferenceController);</span><br><span class="line"><span class="keyword">for</span> (AbstractPreferenceController controller : controllers) &#123;</span><br><span class="line">addPreferenceController(controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、定义集合controllers；<br>2、从代码中加载preference controllers，调用createPreferenceControllers()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Get a list of &#123;<span class="doctag">@link</span> AbstractPreferenceController&#125; for this fragment.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;AbstractPreferenceController&gt; <span class="title">createPreferenceControllers</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法，具体实现是在其子类中，上面分析可知应是子类TopLevelSettings.java实现，由于TopLevelSettings未实现此方法，故此返回null。<br> 3、从xml定义中加载preference controllers，调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllersFromXml = PreferenceControllerListHelper</span><br><span class="line">.getPreferenceControllersFromXml(context, getPreferenceScreenResId());</span><br></pre></td></tr></table></figure><p>此时getPreferenceScreenResId()根据上面分析, 加载的xml应是top_level_settings.xml, 调用getPreferenceControllersFromXml()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiates a list of controller based on xml definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;BasePreferenceController&gt; <span class="title">getPreferenceControllersFromXml</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        @XmlRes <span class="keyword">int</span> xmlResId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Bundle&gt; preferenceMetadata;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        preferenceMetadata = PreferenceXmlParserUtils.extractMetadata(context, xmlResId,</span><br><span class="line">                MetadataFlag.FLAG_NEED_KEY | MetadataFlag.FLAG_NEED_PREF_CONTROLLER</span><br><span class="line">                        | MetadataFlag.FLAG_INCLUDE_PREF_SCREEN);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | XmlPullParserException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Failed to parse preference xml for getting controllers"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> controllers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Bundle metadata : preferenceMetadata) &#123;</span><br><span class="line">        <span class="keyword">final</span> String controllerName = metadata.getString(METADATA_CONTROLLER);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(controllerName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BasePreferenceController controller;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            controller = BasePreferenceController.createInstance(context, controllerName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Could not find Context-only controller for pref: "</span> + controllerName);</span><br><span class="line">            <span class="keyword">final</span> String key = metadata.getString(METADATA_KEY);</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(key)) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Controller requires key but it's not defined in xml: "</span></span><br><span class="line">                        + controllerName);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                controller = BasePreferenceController.createInstance(context, controllerName,</span><br><span class="line">                        key);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException e2) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Cannot instantiate controller from reflection: "</span> + controllerName);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        controllers.add(controller);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> controllers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)、主要读取xml中配置的每个preference的METADATA_CONTROLLER即(“settings:controller”)属性，以上述网络和互联网菜单项为例，读取的即                 为”com.android.settings.network.TopLevelNetworkEntryPreferenceController”;<br>(2)、首先根据此去调用BasePreferenceController.java的createInstance方法，即调用TopLevelNetworkEntryPreferenceController.java的带一个参数的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiate a controller as specified controller type.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This is done through reflection. Do not use this method unless you know what you are doing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BasePreferenceController <span class="title">createInstance</span><span class="params">(Context context, String controllerName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; clazz = Class.forName(controllerName);</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; preferenceConstructor = clazz.getConstructor(Context<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> Object[] params = <span class="keyword">new</span> Object[]&#123;context&#125;;</span><br><span class="line">        <span class="keyword">return</span> (BasePreferenceController) preferenceConstructor.newInstance(params);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | InstantiationException |</span><br><span class="line">            IllegalArgumentException | InvocationTargetException | IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"Invalid preference controller: "</span> + controllerName, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)、从而执行异常内语句，首先会再去读取xml中配置的每个preference的METADATA_KEY即(android:key)属性，同样的再据此去调用TopLevelNetworkEntryPreferenceController.java的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TopLevelNetworkEntryPreferenceController</span><span class="params">(Context context, String preferenceKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, preferenceKey);</span><br><span class="line">    mMobileNetworkPreferenceController = <span class="keyword">new</span> MobileNetworkPreferenceController(mContext);</span><br><span class="line">    mTetherPreferenceController = <span class="keyword">new</span> TetherPreferenceController(</span><br><span class="line">    mContext, <span class="keyword">null</span> <span class="comment">/* lifecycle */</span>);</span><br><span class="line">    mWifiPreferenceController = <span class="keyword">new</span> WifiMasterSwitchPreferenceController(</span><br><span class="line">    mContext, <span class="keyword">null</span> <span class="comment">/* metrics */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时preferenceKey即为xml中配置的android:key属性的值，为”top_level_network”。</p><p>(4)、调用父类BasePreferenceController.java的构造方法，初始化其他变量完成构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasePreferenceController</span><span class="params">(Context context, String preferenceKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    mPreferenceKey = preferenceKey;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(mPreferenceKey)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Preference key must be set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、过滤重复定义的controller等，赋值填充mPreferenceControllers</p><p>故mPreferenceControllers主要是各种控制管理类的集合，包含xml中配置的每个preference的“settings:controller”属性和代码中通过createPreferenceControllers()方法构建的。</p><p>再回到displayResourceTiles()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">                controller -&gt; controller.displayPreference(screen));</span><br></pre></td></tr></table></figure><p>此语句主要就是调用各个controller的displayPreference()方法。<br>依旧以网络和互联网菜单项为例，xml中配置的controller为”com.android.settings.network.TopLevelNetworkEntryPreferenceController”，查看TopLevelNetworkEntryPreferenceController.java发现，其内并未实现displayPreference()方法，查看继承关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopLevelNetworkEntryPreferenceController</span> <span class="keyword">extends</span> <span class="title">BasePreferenceController</span></span></span><br></pre></td></tr></table></figure><p>查看BasePreferenceController.java的displayPreference()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayPreference</span><span class="params">(PreferenceScreen screen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.displayPreference(screen);</span><br><span class="line">    <span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line">        <span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line">        <span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line">        <span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一、继续先调用父类的displayPreference()方法，而继承关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePreferenceController extends AbstractPreferenceController implements Sliceable</span><br></pre></td></tr></table></figure><p>AbstractPreferenceController.java的displayPreference()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayPreference</span><span class="params">(PreferenceScreen screen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String prefKey = getPreferenceKey();</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(prefKey)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Skipping displayPreference because key is empty:"</span> + getClass().getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAvailable()) &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="keyword">true</span> <span class="comment">/* visible */</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Preference.OnPreferenceChangeListener) &#123;</span><br><span class="line">            <span class="keyword">final</span> Preference preference = screen.findPreference(prefKey);</span><br><span class="line">            preference.setOnPreferenceChangeListener(</span><br><span class="line">                    (Preference.OnPreferenceChangeListener) <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="keyword">false</span> <span class="comment">/* visible */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、getPreferenceKey()获取preference的key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the key for this preference.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPreferenceKey</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>BasePreferenceController.java的getPreferenceKey()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPreferenceKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mPreferenceKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而据上面分析到mPreferenceKey实质上即为xml中每个preference配置的android:key属性的值，即此处应为”top_level_network”。</p><p>2、isAvailable()；判断此preference是否可用即是否应该被显示。如果返回true，则被显示出来，反之则不被显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns true if preference is available (should be displayed)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>抽象方法，继续看子类BasePreferenceController.java的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; when the controller can be changed on the device.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* Will return true for &#123;<span class="doctag">@link</span> #AVAILABLE&#125; and &#123;<span class="doctag">@link</span> #DISABLED_DEPENDENT_SETTING&#125;.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* When the availability status returned by &#123;<span class="doctag">@link</span> #getAvailabilityStatus()&#125; is</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> #DISABLED_DEPENDENT_SETTING&#125;, then the setting will be disabled by default in the</span></span><br><span class="line"><span class="comment">* DashboardFragment, and it is up to the &#123;<span class="doctag">@link</span> BasePreferenceController&#125; to enable the</span></span><br><span class="line"><span class="comment">* preference at the right time.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* TODO (mfritze) Build a dependency mechanism to allow a controller to easily define the</span></span><br><span class="line"><span class="comment">* dependent setting.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> availabilityStatus = getAvailabilityStatus();</span><br><span class="line">    <span class="keyword">return</span> (availabilityStatus == AVAILABLE</span><br><span class="line">    || availabilityStatus == AVAILABLE_UNSEARCHABLE</span><br><span class="line">    || availabilityStatus == DISABLED_DEPENDENT_SETTING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用getAvailabilityStatus()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AvailabilityStatus</span><br><span class="line">public abstract int getAvailabilityStatus();</span><br></pre></td></tr></table></figure><p>抽象方法，按照上述举例，继续查看子类TopLevelNetworkEntryPreferenceController.java的getAvailabilityStatus()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAvailabilityStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Utils.isDemoUser(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE_UNSEARCHABLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、调用setVisible()方法设置是否可被显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setVisible(screen, prefKey, <span class="keyword">true</span> <span class="comment">/* visible */</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Show/hide a preference.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(PreferenceGroup group, String key, <span class="keyword">boolean</span> isVisible)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Preference pref = group.findPreference(key);</span><br><span class="line">    <span class="keyword">if</span> (pref != <span class="keyword">null</span>) &#123;</span><br><span class="line">    pref.setVisible(isVisible);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、判断controller是否实现了Preference.OnPreferenceChangeListener接口，是，则设置监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (this instanceof Preference.OnPreferenceChangeListener) &#123;</span><br><span class="line">    final Preference preference &#x3D; screen.findPreference(prefKey);</span><br><span class="line">    preference.setOnPreferenceChangeListener(</span><br><span class="line">    (Preference.OnPreferenceChangeListener) this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，如果希望preference不被显示在界面上，可以通过实现相关preference的controller的getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可。</p><p>二、继续查看BasePreferenceController.java的displayPreference()方法的剩余语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line"><span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line"><span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line">    <span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">    preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据子类controller实现的getAvailabilityStatus()方法的返回值判断是否需要将此preference置为不可点击。</p><p>至此，DashboardFragment.java中displayResourceTiles()方法分析完成。</p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>1、Settings的主Activity实质实现是在SettingsHomepageActivity.java内；<br>2、Settings的主界面设置item的显示是在fragment上，fragment为TopLevelSettings.java，加载显示的布局为top_level_settings.xml；<br>3、Settings主界面设置项item的加载显示主要分为两部分，一部分是xml定义的静态加载，xml为top_level_settings.xml；一部分是DashboardCategory来获取动态加载，此部分下篇分析；<br>4、每个设置项item均为一个preference，通过xml定义加载时，必须要有一个controller，可以是在xml中定义”settings:controller”属性声明，名称必须与类的包名路径相同；也可直接在相关fragment中实现createPreferenceControllers()方法去调用构造相关controller。此二者存其一即可。<br>5、xml中配置preference时，必须定义”android:key“属性；<br>6、需要隐藏不显示某个设置项时，一是可以直接在xml中注释其定义；二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可；</p><p>7、如果需要某个设置项不可点击，一是可以直接调用setEnabled():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line"><span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值为DISABLED_DEPENDENT_SETTING即可。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层源码 </category>
          
          <category> 设置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽返回键和多任务键功能</title>
      <link href="2021/07/21/%E5%B1%8F%E8%94%BD%E8%BF%94%E5%9B%9E%E9%94%AE%E5%92%8C%E5%A4%9A%E4%BB%BB%E5%8A%A1%E9%94%AE%E5%8A%9F%E8%83%BD/"/>
      <url>2021/07/21/%E5%B1%8F%E8%94%BD%E8%BF%94%E5%9B%9E%E9%94%AE%E5%92%8C%E5%A4%9A%E4%BB%BB%E5%8A%A1%E9%94%AE%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h6 id="一、屏蔽多任务键功能："><a href="#一、屏蔽多任务键功能：" class="headerlink" title="一、屏蔽多任务键功能："></a>一、屏蔽多任务键功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Log.v(TAG, <span class="string">"onPause()"</span>);</span><br><span class="line">   <span class="keyword">super</span>.onPause();</span><br><span class="line">   mActivityManager = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">   mActivityManager.moveTaskToFront(getTaskId(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意加权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.REORDER_TASKS"</span> /&gt;</span><br></pre></td></tr></table></figure><h6 id="二、屏蔽返回键功能："><a href="#二、屏蔽返回键功能：" class="headerlink" title="二、屏蔽返回键功能："></a>二、屏蔽返回键功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mDialog.setOnKeyListener(<span class="keyword">new</span> DialogInterface.OnKeyListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> keycode, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (keycode)&#123;</span><br><span class="line">                <span class="keyword">case</span> KeyEvent.KEYCODE_BACK:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义音乐播放器</title>
      <link href="2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>一、dialog布局</p><p>二、MediaPlayer(后台服务)用法</p><p><a href="https://blog.csdn.net/anhenzhufeng/article/details/89915069" target="_blank" rel="noopener">android:layout_weight 用法</a>  </p><p><a href="https://www.cnblogs.com/MianActivity/p/5867776.html" target="_blank" rel="noopener">shape标签定义形状</a></p><p><a href="https://blog.csdn.net/csf993981061/article/details/75330059" target="_blank" rel="noopener">clip标签的用法</a></p><p><a href="https://www.cnblogs.com/huihuizhang/p/10744780.html" target="_blank" rel="noopener">定时器Timer用法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wangxin on 2021/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicPlayerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MusicPlayerDialog musicPlayerDialog;</span><br><span class="line">    <span class="keyword">private</span> Uri playUri;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MUSIC_TIME = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MUSIC_NAME = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> ImageButton musicOperationButton;</span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mMediaPlayer;</span><br><span class="line">    <span class="keyword">private</span> SeekBar mMusicSeekBar;</span><br><span class="line">    <span class="keyword">private</span> Timer timer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isMusicPlaying;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSeekbarChanging;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MusicPlayerActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.musicplayer_activity_layout);</span><br><span class="line"></span><br><span class="line">        playUri = getIntent().getData();</span><br><span class="line">        Log.v(TAG, <span class="string">"uri = "</span> + playUri);</span><br><span class="line">        <span class="keyword">if</span> (playUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">        isMusicPlaying = <span class="keyword">true</span>;</span><br><span class="line">        isSeekbarChanging = <span class="keyword">false</span>; <span class="comment">//flag</span></span><br><span class="line">        initMusicPlayer();</span><br><span class="line">        play();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMusicPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        musicPlayerDialog = <span class="keyword">new</span> MusicPlayerDialog(<span class="keyword">this</span>);</span><br><span class="line">        musicPlayerDialog.show();</span><br><span class="line"></span><br><span class="line">        musicPlayerDialog.getWindow().setDimAmount(<span class="number">0.3f</span>); <span class="comment">//dialog后面activity背景亮度</span></span><br><span class="line">        musicPlayerDialog.setOnDismissListener(<span class="keyword">new</span> DialogInterface.OnDismissListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismiss</span><span class="params">(DialogInterface dialogInterface)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"MusicPlayerDialog Dismiss"</span>);</span><br><span class="line">                isSeekbarChanging = <span class="keyword">true</span>;</span><br><span class="line">                mMediaPlayer.stop();</span><br><span class="line">                mMediaPlayer.release();</span><br><span class="line">                mMediaPlayer = <span class="keyword">null</span>;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mMediaPlayer = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line">        mMediaPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"Play Completed"</span>);</span><br><span class="line">                musicPlayerDialog.cancel();</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            mMediaPlayer.setDataSource(<span class="keyword">this</span>, playUri);</span><br><span class="line">            mMediaPlayer.prepare();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听进度条</span></span><br><span class="line">        mMusicSeekBar = musicPlayerDialog.getMusicSeekBar();</span><br><span class="line">        mMusicSeekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> time = mMediaPlayer.getCurrentPosition() / <span class="number">1000</span>;</span><br><span class="line">                Log.v(TAG, <span class="string">"time = "</span> + time);</span><br><span class="line">                musicPlayerDialog.setCurrentMusicTime(formatTime(time));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line">                isSeekbarChanging = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line">                isSeekbarChanging = <span class="keyword">false</span>;</span><br><span class="line">                mMediaPlayer.seekTo(mMusicSeekBar.getProgress());</span><br><span class="line">                musicPlayerDialog.setCurrentMusicTime(formatTime(mMediaPlayer.getCurrentPosition() / <span class="number">1000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听播放/暂停按钮</span></span><br><span class="line">        musicOperationButton = musicPlayerDialog.getMusicOperationButton();</span><br><span class="line">        musicOperationButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"MusicOperationButton onClick = "</span> + isMusicPlaying);</span><br><span class="line">                <span class="keyword">if</span> (isMusicPlaying) &#123;</span><br><span class="line">                    mMediaPlayer.pause();</span><br><span class="line">                    musicOperationButton.setImageDrawable(getResources().getDrawable(R.drawable.music_pause));</span><br><span class="line">                    isMusicPlaying = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMediaPlayer.start();</span><br><span class="line">                    musicOperationButton.setImageDrawable(getResources().getDrawable(R.drawable.music_play));</span><br><span class="line">                    isMusicPlaying = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setMusicPlayInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mMediaPlayer.isPlaying()) &#123;</span><br><span class="line">            mMediaPlayer.start();</span><br><span class="line">            <span class="keyword">int</span> musicTotalTime = mMediaPlayer.getDuration();<span class="comment">//获取音乐总时间</span></span><br><span class="line">            mMusicSeekBar.setMax(musicTotalTime);</span><br><span class="line">            timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isSeekbarChanging) &#123;</span><br><span class="line">                        mMusicSeekBar.setProgress(mMediaPlayer.getCurrentPosition());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMusicPlayInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Cursor cursor = <span class="keyword">this</span>.getContentResolver().query(playUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        cursor.moveToFirst();</span><br><span class="line">        <span class="keyword">long</span> musicTime = mMediaPlayer.getDuration() / <span class="number">1000</span>;</span><br><span class="line">        MUSIC_TIME = formatTime(musicTime);</span><br><span class="line">        MUSIC_NAME = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DISPLAY_NAME));</span><br><span class="line"></span><br><span class="line">        musicPlayerDialog.setMusicName(MUSIC_NAME);</span><br><span class="line">        musicPlayerDialog.setMusicTime(MUSIC_TIME);</span><br><span class="line">        Log.v(TAG, <span class="string">"Music Name = "</span> + MUSIC_NAME + <span class="string">" Music Time = "</span> + MUSIC_TIME);</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatTime</span><span class="params">(<span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        String standardTime;</span><br><span class="line">        <span class="keyword">if</span> (seconds &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            standardTime = <span class="string">"00:00"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seconds &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"00:%02d"</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seconds &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"%02d:%02d"</span>, seconds / <span class="number">60</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"%02d:%02d:%02d"</span>, seconds / <span class="number">3600</span>, seconds % <span class="number">3600</span> / <span class="number">60</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> standardTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finish();</span><br><span class="line">        overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>synchronized简单使用</title>
      <link href="2021/07/09/synchronized%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2021/07/09/synchronized%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_28082757/article/details/91542030?utm_term=synchronized%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-91542030&spm=3001.4430" target="_blank" rel="noopener">synchronized简单使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Adapter简单使用</title>
      <link href="2021/07/09/Adapter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2021/07/09/Adapter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_45797116/article/details/117688150" target="_blank" rel="noopener">Adapter简单使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android弹出异常dialog源码分析</title>
      <link href="2021/07/09/%C2%96Android%E5%BC%B9%E5%87%BA%E5%BC%82%E5%B8%B8dialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/09/%C2%96Android%E5%BC%B9%E5%87%BA%E5%BC%82%E5%B8%B8dialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012960536/article/details/89339176" target="_blank" rel="noopener">Android弹出异常dialog源码分析</a></p><p><a href="https://blog.csdn.net/zhangyongfeiyong/article/details/70832263" target="_blank" rel="noopener">分析2，注意这里的dialog点击事件后的线程唤醒</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通知列表中的图标显示为灰色方框</title>
      <link href="2021/07/08/%C2%96%C2%96%E9%80%9A%E7%9F%A5%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E7%81%B0%E8%89%B2%E6%96%B9%E6%A1%86/"/>
      <url>2021/07/08/%C2%96%C2%96%E9%80%9A%E7%9F%A5%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E7%81%B0%E8%89%B2%E6%96%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>通知列表中的图标显示为灰色方框？<br>解决方法：RemoteViews里有成员变量mApplication，方法isSystemApp()，判断是否为系统app，再决定是否上色，因为系统app的图标都是正常的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSmallIconColor</span><span class="params">(Icon smallIcon, RemoteViews contentView,</span></span></span><br><span class="line"><span class="function"><span class="params">               StandardTemplateParams p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> colorable = !isLegacy() || getColorUtil().isGrayscaleIcon(mContext, smallIcon);<span class="comment">//是否上色，依据是否5.0以上以及灰色图</span></span><br><span class="line">    <span class="comment">//add by wangxin</span></span><br><span class="line">    ApplicationInfo applicationInfo = contentView.mApplication;</span><br><span class="line">    <span class="keyword">boolean</span> isSystemApp = applicationInfo.isSystemApp();</span><br><span class="line">    String packageName = applicationInfo.packageName;</span><br><span class="line">    android.util.Log.v(TAG, <span class="string">"isSystemApp = "</span> + isSystemApp + <span class="string">" packageName = "</span> + packageName );</span><br><span class="line">    colorable = isSystemApp ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"com.baidu.input_huawei"</span>.equals(packageName) || <span class="string">"com.cadothy.broadcast"</span>.equals(packageName)) &#123;<span class="comment">//特殊app</span></span><br><span class="line">        colorable = <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">if</span> (isColorized(p)) &#123;</span><br><span class="line">        color = getPrimaryTextColor(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    contentView.setInt(R.id.notification_header, <span class="string">"setOriginalIconColor"</span>,</span><br><span class="line">                       colorable ? color : NotificationHeaderView.NO_COLOR);</span><br><span class="line">    colorable ? color : COLOR_DEFAULT);<span class="comment">//mod by wangxin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>u盘查询大小速度慢</title>
      <link href="2021/07/08/u%E7%9B%98%E6%9F%A5%E8%AF%A2%E5%A4%A7%E5%B0%8F%E9%80%9F%E5%BA%A6%E6%85%A2/"/>
      <url>2021/07/08/u%E7%9B%98%E6%9F%A5%E8%AF%A2%E5%A4%A7%E5%B0%8F%E9%80%9F%E5%BA%A6%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<h6 id="一、俩个问题出现的原因："><a href="#一、俩个问题出现的原因：" class="headerlink" title="一、俩个问题出现的原因："></a>一、俩个问题出现的原因：</h6><p>1、文件管理中插入u盘后，偶现侧边栏内部存储和u盘界面消失：设置了provider查询时间限制20s，超时后cursor返不回去。<br>2、设置中”存储”和进入文件管理u盘文件里面 出现黑屏：主线程查询大小导致阻塞。</p><h6 id="二、解决办法："><a href="#二、解决办法：" class="headerlink" title="二、解决办法："></a>二、解决办法：</h6><ul><li>问题1：最简单的就是延长或取消查询时间限制，但是俺家产品为了用户体验，后台查询时须给用户提示，查询结束后显示结果。是不是觉得简单？后来自闭了… 解决办法问大佬，一块研究了好长时间，最后确定用 “二次查询”这个方法，下面单独说。</li><li>问题2：这个简单，另起线程，我是用的AsyncTask，因为这东西我第一次用。</li></ul><h6 id="三、相关流程："><a href="#三、相关流程：" class="headerlink" title="三、相关流程："></a>三、相关流程：</h6><blockquote><p>DocumentsApplication.java<br>文件管理启动时，注册并监听了 rootUri，当u盘插入后，调用相关onChange()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"Application onCreate"</span>);</span><br><span class="line">    ...</span><br><span class="line">        mProviders = <span class="keyword">new</span> ProvidersCache(<span class="keyword">this</span>);</span><br><span class="line">    mProviders.updateAsync(<span class="keyword">false</span>); <span class="comment">//注册监听 rootUri 地址，这不进行分析，很简单的</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ContentProviderClient <span class="title">acquireUnstableProviderOrThrow</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ContentResolver resolver, String authority)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ContentProviderClient client = resolver.acquireUnstableContentProviderClient(</span><br><span class="line">        authority);</span><br><span class="line">    <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Failed to acquire provider for "</span> + authority);</span><br><span class="line">    &#125;</span><br><span class="line">    client.setDetectNotResponding(PROVIDER_ANR_TIMEOUT); <span class="comment">// 20s provider查询时间限制，这就是引起界面消失的根本原因，但不是查的慢的原因</span></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ProvidersCache.java<br>loadRootsForAuthority() 这个方法里不仅实现了rootsUri的监听，而且查找相关信息（内部存储、u盘）就是在这里，之前分析到 cursor = client.query(rootsUri, null, null, null, null); 因为太菜，根本就不知道这还能往下分析，随后分析到 framework ExternalStorageProvider里       </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"onChange = "</span> + uri);</span><br><span class="line">    <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Received onChange event for null uri. Skipping."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Updating roots due to change at "</span> + uri);</span><br><span class="line">    &#125;</span><br><span class="line">    updateAuthorityAsync(uri.getAuthority()); <span class="comment">//new UpdateTask() 往下会走这</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"doInBackground start "</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> start = SystemClock.elapsedRealtime();</span><br><span class="line"></span><br><span class="line">    mTaskRoots.put(mRecentsRoot.authority, mRecentsRoot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = mContext.getPackageManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick up provider with action string</span></span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(DocumentsContract.PROVIDER_INTERFACE); <span class="comment">// "android.content.action.DOCUMENTS_PROVIDER"</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;ResolveInfo&gt; providers = pm.queryIntentContentProviders(intent, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (ResolveInfo info : providers) &#123;</span><br><span class="line">        ProviderInfo providerInfo = info.providerInfo;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"providerInfo = "</span> + providerInfo);</span><br><span class="line">        <span class="keyword">if</span> (providerInfo.authority != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleDocumentsProvider(providerInfo); <span class="comment">//处理文件管理的providerInfo</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> delta = SystemClock.elapsedRealtime() - start;</span><br><span class="line">    <span class="keyword">if</span> (VERBOSE) Log.v(TAG,</span><br><span class="line">                       <span class="string">"Update found "</span> + mTaskRoots.size() + <span class="string">" roots in "</span> + delta + <span class="string">"ms"</span>);</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"Update found "</span> + mTaskRoots.size() + <span class="string">" roots in "</span> + delta + <span class="string">"ms"</span>);        </span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mFirstLoadDone = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mBootCompletedResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mBootCompletedResult.finish();</span><br><span class="line">            mBootCompletedResult = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mRoots = mTaskRoots;</span><br><span class="line">        mStoppedAuthorities = mTaskStoppedAuthorities;</span><br><span class="line">    &#125;</span><br><span class="line">    mFirstLoad.countDown();</span><br><span class="line">    LocalBroadcastManager.getInstance(mContext).sendBroadcast(<span class="keyword">new</span> Intent(BROADCAST_ACTION)); <span class="comment">//查找完后发广播</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleDocumentsProvider</span><span class="params">(ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Ignore stopped packages for now; we might query them</span></span><br><span class="line">    <span class="comment">// later during UI interaction.</span></span><br><span class="line">    <span class="keyword">if</span> ((info.applicationInfo.flags &amp; ApplicationInfo.FLAG_STOPPED) != <span class="number">0</span>) &#123;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"mTaskStoppedAuthorities  "</span> + info.authority);  </span><br><span class="line">        <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Ignoring stopped authority "</span> + info.authority);</span><br><span class="line">        mTaskStoppedAuthorities.add(info.authority);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"handleDocumentsProvider  "</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forceRefresh = mForceRefreshAll</span><br><span class="line">        || Objects.equals(info.packageName, mForceRefreshPackage);</span><br><span class="line"></span><br><span class="line">    mTaskRoots.putAll(info.authority, loadRootsForAuthority(mContext.getContentResolver(),</span><br><span class="line">                                                            info.authority, forceRefresh)); <span class="comment">//所有rootInfo放到集合中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重点，重点，重点，实现注册之前的rootsUri监听，以及数据的查找</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;RootInfo&gt; <span class="title">loadRootsForAuthority</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ContentResolver resolver, String authority, <span class="keyword">boolean</span> forceRefresh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Loading roots for "</span> + authority);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;RootInfo&gt; roots = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> PackageManager pm = mContext.getPackageManager();</span><br><span class="line">        ProviderInfo provider = pm.resolveContentProvider(</span><br><span class="line">                authority, PackageManager.GET_META_DATA);</span><br><span class="line">        ...</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"synchronized 1"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mObservedAuthoritiesDetails) &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"synchronized 2"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mObservedAuthoritiesDetails.containsKey(authority)) &#123;</span><br><span class="line">                android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"! containsKey authority"</span>);</span><br><span class="line">                CharSequence appName = pm.getApplicationLabel(provider.applicationInfo);</span><br><span class="line">                String packageName = provider.applicationInfo.packageName;</span><br><span class="line"></span><br><span class="line">                mObservedAuthoritiesDetails.put(</span><br><span class="line">                        authority, <span class="keyword">new</span> PackageDetails(appName.toString(), packageName));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Watch for any future updates</span></span><br><span class="line">                <span class="keyword">final</span> Uri rootsUri = DocumentsContract.buildRootsUri(authority);</span><br><span class="line">                android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"rootsUri = "</span> + rootsUri);   <span class="comment">// content://com.android.externalstorage.documents/root</span></span><br><span class="line">                mContext.getContentResolver().registerContentObserver(rootsUri, <span class="keyword">true</span>, mObserver); <span class="comment">//实现监听</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"authority = "</span> + authority);</span><br><span class="line">        <span class="keyword">final</span> Uri rootsUri = DocumentsContract.buildRootsUri(authority);</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"rootsUri = "</span> + rootsUri + <span class="string">" forceRefresh = "</span> + forceRefresh);</span><br><span class="line">        <span class="keyword">if</span> (!forceRefresh) &#123;</span><br><span class="line">            <span class="comment">// Look for roots data that we might have cached for ourselves in the</span></span><br><span class="line">            <span class="comment">// long-lived system process.</span></span><br><span class="line">            <span class="keyword">final</span> Bundle systemCache = resolver.getCache(rootsUri);</span><br><span class="line">            <span class="keyword">if</span> (systemCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ArrayList&lt;RootInfo&gt; cachedRoots = systemCache.getParcelableArrayList(TAG);</span><br><span class="line">                <span class="keyword">assert</span>(cachedRoots != <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (!cachedRoots.isEmpty() || PERMIT_EMPTY_CACHE.contains(authority)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"System cache hit for "</span> + authority);</span><br><span class="line">                    <span class="keyword">return</span> cachedRoots;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"Ignoring empty system cache hit for "</span> + authority);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ContentProviderClient client = <span class="keyword">null</span>;</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = DocumentsApplication.acquireUnstableProviderOrThrow(resolver, authority);</span><br><span class="line">            cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>); <span class="comment">// here，就是这里查的慢，超过20s后cursor返不回去的，会报错</span></span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"RootInfo = "</span> + RootInfo.fromRootsCursor(authority, cursor));   </span><br><span class="line">                <span class="keyword">final</span> RootInfo root = RootInfo.fromRootsCursor(authority, cursor);</span><br><span class="line">                roots.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Failed to load some roots from "</span> + authority, e);</span><br><span class="line">            <span class="comment">// We didn't load every root from the provider. Don't put it to</span></span><br><span class="line">            <span class="comment">// system cache so that we'll try loading them again next time even</span></span><br><span class="line">            <span class="comment">// if forceRefresh is false.</span></span><br><span class="line">            <span class="keyword">return</span> roots;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            FileUtils.closeQuietly(cursor);</span><br><span class="line">            FileUtils.closeQuietly(client);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cache these freshly parsed roots over in the long-lived system</span></span><br><span class="line">        <span class="comment">// process, in case our process goes away. The system takes care of</span></span><br><span class="line">        <span class="comment">// invalidating the cache if the package or Uri changes.</span></span><br><span class="line">        <span class="keyword">final</span> Bundle systemCache = <span class="keyword">new</span> Bundle();</span><br><span class="line">        <span class="keyword">if</span> (roots.isEmpty() &amp;&amp; !PERMIT_EMPTY_CACHE.contains(authority)) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Provider returned no roots. Possibly naughty: "</span> + authority);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"roots size = "</span> + roots.size());</span><br><span class="line">            systemCache.putParcelableArrayList(TAG, roots);</span><br><span class="line">            resolver.putCache(rootsUri, systemCache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> roots;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ExternalStorageProvider.java</p><p>之前的办法就是 既然你查找的慢，那我就不需要了呗，反正文件管理进到u盘里面也有接口查大小，后来发现产品新加的”复制时要判断当前根目录剩余大小”功能冲突，因为当用户插u盘后复制文件，你的u盘大小压根就没获取，所以就没办法往u盘复制东西。所以说，这块还屏蔽不了。解决办法问大佬，一块研究了好长时间，最后确定用 “二次查询”这个方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">queryRoots</span><span class="params">(String[] projection)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MatrixCursor result = <span class="keyword">new</span> MatrixCursor(resolveRootProjection(projection));</span><br><span class="line">    <span class="keyword">synchronized</span> (mRootsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (RootInfo root : mRoots.values()) &#123;</span><br><span class="line">            <span class="keyword">final</span> RowBuilder row = result.newRow();</span><br><span class="line">            row.add(Root.COLUMN_ROOT_ID, root.rootId);<span class="comment">//相关信息，名字，大小等</span></span><br><span class="line">            row.add(Root.COLUMN_FLAGS, root.flags);</span><br><span class="line">            row.add(Root.COLUMN_TITLE, root.title);</span><br><span class="line">            row.add(Root.COLUMN_DOCUMENT_ID, root.docId);</span><br><span class="line">            row.add(Root.COLUMN_QUERY_ARGS, SUPPORTED_QUERY_ARGS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> availableBytes = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (root.reportAvailableBytes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.storageUuid != <span class="keyword">null</span>) &#123; <span class="comment">//内部存储here</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        availableBytes = getContext()</span><br><span class="line">                            .getSystemService(StorageStatsManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                            .<span class="title">getFreeBytes</span>(<span class="title">root</span>.<span class="title">storageUuid</span>)</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        Log.w(TAG, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//u盘here</span></span><br><span class="line">                    availableBytes = root.path.getUsableSpace();<span class="comment">//终于找到查找慢的根本地方了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row.add(Root.COLUMN_AVAILABLE_BYTES, availableBytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="四、最终解决办法："><a href="#四、最终解决办法：" class="headerlink" title="四、最终解决办法："></a>四、最终解决办法：</h6><blockquote><p>二次查询：即第一次查询后，将u盘相关信息返回，u盘设置summary时，判断大小，如果&lt;0，即给用户提示”查找未结束”。<br>随即通知uri进行二次查询，这次就不管它查多久了，查到结果后界面更新，显示大小。办法是有了，但是过程有点艰难。</p></blockquote><p>1、第一次查询：不让其走u盘的查找方法，即cursor返回的大小就是默认值-1，就知道已经开始查找但未结束。<br>实现二次查询，必须将之前提到的20s的查找时间限制，延长或改为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RootsFragment.java 查找完会发广播，loader加载，结束后onLoadFinished</span></span><br><span class="line">mCallbacks = <span class="keyword">new</span> LoaderCallbacks&lt;Collection&lt;RootInfo&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Loader&lt;Collection&lt;RootInfo&gt;&gt; onCreateLoader(<span class="keyword">int</span> id, Bundle args) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RootsLoader(activity, providers, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Loader&lt;Collection&lt;RootInfo&gt;&gt; loader, Collection&lt;RootInfo&gt; roots)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAdded()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Intent handlerAppIntent = getArguments().getParcelable(EXTRA_INCLUDE_APPS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent intent = activity.getIntent();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> excludeSelf =</span><br><span class="line">            intent.getBooleanExtra(DocumentsContract.EXTRA_EXCLUDE_SELF, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">final</span> String excludePackage = excludeSelf ? activity.getCallingPackage() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//add by wangxin u盘二次查询空间</span></span><br><span class="line">        <span class="keyword">for</span>(RootInfo root :  roots)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.isUsb() &amp;&amp; root.availableBytes &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                Uri uri = DocumentsContract.buildRootUri(root.authority, root.rootId);<span class="comment">//根据u盘的id重建一个uri</span></span><br><span class="line">                getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);<span class="comment">//onChange() 二次查询</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//add end</span></span><br><span class="line">        List&lt;Item&gt; sortedItems = sortLoadResult(roots, excludePackage, handlerAppIntent,</span><br><span class="line">                                                DocumentsApplication.getProvidersCache(getContext()));</span><br><span class="line">        mAdapter = <span class="keyword">new</span> RootsAdapter(activity, sortedItems, mDragListener);</span><br><span class="line">        mList.setAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line">        mInjector.shortcutsUpdater.accept(roots);</span><br><span class="line">        mInjector.appsRowManager.updateList(mApplicationItemList);</span><br><span class="line">        mInjector.appsRowManager.updateView(activity);</span><br><span class="line">        onCurrentRootChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RootItem</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(View convertView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context context = convertView.getContext();</span><br><span class="line">    <span class="keyword">if</span> (root.supportsEject()) &#123;</span><br><span class="line">        bindAction(convertView, View.VISIBLE, R.drawable.ic_eject,</span><br><span class="line">                   context.getResources().getString(R.string.menu_eject_root));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bindAction(convertView, View.GONE, -<span class="number">1</span> <span class="comment">/* iconResource */</span>, <span class="keyword">null</span> <span class="comment">/* description */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Show available space if no summary</span></span><br><span class="line">    String summaryText = root.summary;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(summaryText) &amp;&amp; root.availableBytes &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        summaryText = context.getString(R.string.root_available_bytes,</span><br><span class="line">                                        Formatter.formatFileSize(context, root.availableBytes));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add by wangxin 第一次查询后给用户提示 正在查询</span></span><br><span class="line">    <span class="keyword">if</span> (root.isUsb() &amp;&amp; root.availableBytes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        summaryText = context.getString(R.string.querying_udisk_available);</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line">    bindIconAndTitle(convertView);</span><br><span class="line">    bindSummary(convertView, summaryText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ProvidersCache.java</span></span><br><span class="line"><span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY_EXTERNALSTORAGE = <span class="string">"com.android.externalstorage.documents"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGENAME_EXTERNALSTORAGE = <span class="string">"com.android.externalstorage"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUERY_PARAMS = <span class="string">"NeedAvailableBytes"</span>;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UpdateTask</span><span class="params">(<span class="keyword">boolean</span> forceRefreshAll, String forceRefreshPackage, Uri uri)</span> </span>&#123; <span class="comment">//因为涉及到二次查询，所以得加上Uri，方便后期判断是否为二次查询</span></span><br><span class="line">    <span class="keyword">new</span> Exception(<span class="string">"new UpdateTask uri:"</span>+uri).printStackTrace();</span><br><span class="line">    mForceRefreshAll = forceRefreshAll;</span><br><span class="line">    mForceRefreshPackage = forceRefreshPackage;</span><br><span class="line">    mUri = uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;RootInfo&gt; <span class="title">loadRootsForAuthority</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ContentResolver resolver, String authority, <span class="keyword">boolean</span> forceRefresh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadRootsForAuthority(resolver, authority, forceRefresh, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    client = DocumentsApplication.acquireUnstableProviderOrThrow(resolver, authority);</span><br><span class="line">    cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//mod by wangxin</span></span><br><span class="line">    <span class="keyword">if</span> (AUTHORITY_EXTERNALSTORAGE.equals(authority)) &#123;</span><br><span class="line">        cursor = client.query(rootsUri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="comment">//mod end</span></span><br><span class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">        <span class="keyword">final</span> RootInfo root = RootInfo.fromRootsCursor(authority, cursor);</span><br><span class="line">        roots.add(root);</span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleDocumentsProvider</span><span class="params">(ProviderInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Ignore stopped packages for now; we might query them</span></span><br><span class="line">            <span class="comment">// later during UI interaction.</span></span><br><span class="line">            <span class="keyword">if</span> ((info.applicationInfo.flags &amp; ApplicationInfo.FLAG_STOPPED) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Ignoring stopped authority "</span> + info.authority);</span><br><span class="line">                mTaskStoppedAuthorities.add(info.authority);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> forceRefresh = mForceRefreshAll</span><br><span class="line">                    || Objects.equals(info.packageName, mForceRefreshPackage);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//add by wangxin </span></span><br><span class="line">            String[] projection = <span class="keyword">null</span>; <span class="comment">//二次查询我们自己重建的uri 传过来，判断是否有rootId，有的话传参</span></span><br><span class="line">            <span class="keyword">if</span> (PACKAGENAME_EXTERNALSTORAGE.equals(info.packageName) &amp;&amp; mUri != <span class="keyword">null</span> &amp;&amp; mUri.getPathSegments().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                projection = <span class="keyword">new</span> String[]&#123; QUERY_PARAMS &#125;;</span><br><span class="line">            &#125;<span class="comment">//add end</span></span><br><span class="line">            mTaskRoots.putAll(info.authority, loadRootsForAuthority(mContext.getContentResolver(),</span><br><span class="line">                    info.authority, forceRefresh, projection));<span class="comment">//add projection by wangxin</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、二次查询，根据之前notifyChange uri，传参数，到这里进行判断，实现最后的二次查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExternalStorageProvider.java 将文件所有的 "synchronized (mRootsLock)"、@GuardedBy("mRootsLock")删掉，不要锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">queryRoots</span><span class="params">(String[] projection)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] resolvedProjection = projection;<span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="keyword">if</span> (projection != <span class="keyword">null</span> &amp;&amp; projection.length &gt; <span class="number">0</span> &amp;&amp; QUERY_AGAIN_PARAMS.equals(projection[<span class="number">0</span>])) &#123;</span><br><span class="line">        resolvedProjection = <span class="keyword">null</span>;</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line">    <span class="keyword">final</span> MatrixCursor result = <span class="keyword">new</span> MatrixCursor(resolveRootProjection(resolvedProjection));</span><br><span class="line">    <span class="comment">//synchronized (mRootsLock) &#123; del all synchronized by wangxin</span></span><br><span class="line">    <span class="keyword">for</span> (RootInfo root : mRoots.values()) &#123;</span><br><span class="line">        <span class="keyword">final</span> RowBuilder row = result.newRow();</span><br><span class="line">        row.add(Root.COLUMN_ROOT_ID, root.rootId);</span><br><span class="line">        row.add(Root.COLUMN_FLAGS, root.flags);</span><br><span class="line">        row.add(Root.COLUMN_TITLE, root.title);</span><br><span class="line">        row.add(Root.COLUMN_DOCUMENT_ID, root.docId);</span><br><span class="line">        row.add(Root.COLUMN_QUERY_ARGS, SUPPORTED_QUERY_ARGS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> availableBytes = -<span class="number">1</span>;</span><br><span class="line">        File file;</span><br><span class="line">        <span class="keyword">if</span> (root.reportAvailableBytes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.storageUuid != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    availableBytes = getContext()</span><br><span class="line">                        .getSystemService(StorageStatsManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                        .<span class="title">getFreeBytes</span>(<span class="title">root</span>.<span class="title">storageUuid</span>)</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    Log.w(TAG, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//add by wangxin 真正的二次查询</span></span><br><span class="line">                <span class="keyword">if</span> (projection != <span class="keyword">null</span> &amp;&amp; projection.length &gt; <span class="number">0</span> &amp;&amp; QUERY_AGAIN_PARAMS.equals(projection[<span class="number">0</span>])) &#123;</span><br><span class="line">                    availableBytes = root.path.getUsableSpace();</span><br><span class="line">                &#125;<span class="comment">//add end</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        row.add(Root.COLUMN_AVAILABLE_BYTES, availableBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Parcel类</title>
      <link href="2021/05/31/Parcel%E7%B1%BB/"/>
      <url>2021/05/31/Parcel%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="一、Parcel类"><a href="#一、Parcel类" class="headerlink" title="一、Parcel类"></a>一、Parcel类</h5><h6 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1  定义："></a>1.1  定义：</h6><p>Parcel就是一个存放读取数据的容器， Android系统中的binder进程间通信就使用了Parcel类来进行客户端与服务端数据的交互，而且AIDL的数据也是通过Parcel来交互的。</p><h6 id="1-2-继承关系："><a href="#1-2-继承关系：" class="headerlink" title="1.2  继承关系："></a>1.2  继承关系：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><h6 id="1-3-基本方法："><a href="#1-3-基本方法：" class="headerlink" title="1.3  基本方法："></a>1.3  基本方法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">常用方法介绍：</span><br><span class="line">obtain()  获得一个新的parcel ，相当于<span class="keyword">new</span>一个对象</span><br><span class="line">dataSize()  得到当前parcel对象的实际存储空间</span><br><span class="line">dataCapacity()  得到当前parcel对象的已分配的存储空间, &gt;=dataSize()值  (以空间换时间)</span><br><span class="line">dataPostion()   获得当前parcel对象的偏移量(类似于文件流指针的偏移量)</span><br><span class="line">setDataPosition()  设置偏移量</span><br><span class="line">recyle()  清空、回收parcel对象的内存</span><br><span class="line"></span><br><span class="line">writeInt(<span class="keyword">int</span>)   写入一个整数</span><br><span class="line">writeFloat(<span class="keyword">float</span>)   写入一个浮点数</span><br><span class="line">writeDouble(<span class="keyword">double</span>)   写入一个双精度数</span><br><span class="line">writeString(string)   写入一个字符串</span><br><span class="line"></span><br><span class="line">当然，还有更多的writeXXX()方法，与之对应的就是readXXX()，具体方法请参阅SDK。其中几个值得注意的方法为：</span><br><span class="line">         writeException() 在Parcel队头写入一个异常</span><br><span class="line">         writeNoException()  Parcel队头写入“无异常“</span><br><span class="line">         readException() 在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span><br></pre></td></tr></table></figure><h6 id="1-4-客户端transact"><a href="#1-4-客户端transact" class="headerlink" title="1.4 客户端transact():"></a>1.4 客户端transact():</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span>  <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"><span class="comment">//参数说明：   </span></span><br><span class="line"><span class="comment">// code ：是请求的ID号    </span></span><br><span class="line"><span class="comment">// data ：客户端请求发送的参数   </span></span><br><span class="line"><span class="comment">// reply：服务器端返回的结果   </span></span><br><span class="line"><span class="comment">// flags：一些额外的标识，如FLAG_ONEWAY等，通常为0.</span></span><br></pre></td></tr></table></figure><h6 id="1-5-服务端与客户端的调用流程："><a href="#1-5-服务端与客户端的调用流程：" class="headerlink" title="1.5 服务端与客户端的调用流程："></a>1.5 服务端与客户端的调用流程：</h6><p><img src="http://wxyy97.com/image/parcel.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 在客户端创建一个IBinder 接口对象</span></span><br><span class="line"><span class="keyword">private</span> IBinder mPlusBinder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 将客户端的IBinder 接口对象与服务端的MyBinder进行关联（说法不太妥当，其实当调用bindService之后，mPlusBinder就是服务端的对象了。）</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">       mPlusBinder = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 执行transact（）方法</span></span><br><span class="line">mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 回调mPlusBinder 的onTransact（）方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="二、在进程间传递Parcel对象实现进程间通信"><a href="#二、在进程间传递Parcel对象实现进程间通信" class="headerlink" title="二、在进程间传递Parcel对象实现进程间通信"></a>二、在进程间传递Parcel对象实现进程间通信</h5><h6 id="2-1-Demo描述："><a href="#2-1-Demo描述：" class="headerlink" title="2.1 Demo描述："></a>2.1 Demo描述：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 在服务端 CalcPlusService 实现两个整数的相乘和相除，并将结果返回；</span><br><span class="line"><span class="number">2</span>) 在客户端 MainActivity 获取用户输入的参数，并传递到服务端；</span><br></pre></td></tr></table></figure><h6 id="2-2-服务端的实现："><a href="#2-2-服务端的实现：" class="headerlink" title="2.2 服务端的实现："></a>2.2 服务端的实现：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcPlusService</span>  <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"CalcPlusService"</span>;</span><br><span class="line">    <span class="keyword">private</span> MyBinder binder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onCreate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onBind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> binder;<span class="comment">//当客户端调用bindService时此方法 会被调用，并且返回客户端一个binder对象；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onUnbind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);<span class="comment">//当客户端调用unbindService时此方法 会被调用；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRebind(intent);</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onRebind()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onDestroy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;<span class="comment">//自定义Binder，继承Binder类，【class Binder implements IBinder】，实现onTransact方法；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> arg0;</span><br><span class="line">            <span class="keyword">int</span> arg1;</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR); <span class="comment">//指定服务的标识为CalcPlusService</span></span><br><span class="line">            arg0 = data.readInt();<span class="comment">//读取一个整数</span></span><br><span class="line">            arg1 = data.readInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (code)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x110</span>:&#123;</span><br><span class="line">                    result = arg0 * arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x111</span>:&#123;</span><br><span class="line">                    result = arg0 / arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-注册服务，并新指定一个remote进程："><a href="#2-3-注册服务，并新指定一个remote进程：" class="headerlink" title="2.3 注册服务，并新指定一个remote进程："></a>2.3 注册服务，并新指定一个remote进程：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">".CalcPlusService"</span></span><br><span class="line">      android:process=<span class="string">".remote"</span>&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><h6 id="2-4-客户端的调用："><a href="#2-4-客户端的调用：" class="headerlink" title="2.4 客户端的调用："></a>2.4 客户端的调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder mPlusBinder;<span class="comment">//进程间通信Parcel对象的传递主要靠IBinder 接口；</span></span><br><span class="line">    <span class="keyword">private</span> EditText et1,et2;</span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnPlus = <span class="keyword">new</span> ServiceConnection()&#123;<span class="comment">//ServiceConnection 是一个接口，是客户端与服务端进行连接的一个桥梁；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">" mServiceConnPlus onServiceConnected"</span>);</span><br><span class="line">            mPlusBinder = service;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">"mServiceConnPlus onServiceDisconnected"</span>);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//关于service：//</span></span><br><span class="line">            <span class="comment">//（1）取消绑定仅需要使用unbindService()方法，并将ServiceConnnection传递给unbindService()方法。</span></span><br><span class="line">            <span class="comment">//（2）需注意的是，unbindService()方法成功后，系统并不会调用onServiceDisconnected()，因为onServiceDisconnected()仅在意外断开绑定时才被调用； </span></span><br><span class="line">            <span class="comment">//（3）当bindService后，不能stopService,需要通过unBindService()来解除绑定， </span></span><br><span class="line">            <span class="comment">//（4）startService()后，不可以通过unBindService()来销毁service；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        et1 = (EditText)findViewById(R.id.et1);</span><br><span class="line">        et2 = (EditText)findViewById(R.id.et2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, CalcPlusService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">boolean</span> plus = bindService(intent, mServiceConnPlus, Context.BIND_AUTO_CREATE);<span class="comment">//标志位BIND_AUTO_CREATE：automatically create the service as long as the binding exists.</span></span><br><span class="line">        Toast.makeText(view.getContext(), <span class="string">"绑定服务"</span>+plus, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unbindService(mServiceConnPlus);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;<span class="comment">//这里必须代码置空</span></span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"解绑成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"未绑定"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**乘法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();<span class="comment">//Parcel.obtain()：获得一个新的parcel ，相当于new一个对象；</span></span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//写入服务的标志，与enforceInterface（）配套使用；</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);<span class="comment">//transact(int code, Parcel data, Parcel reply, int flags)</span></span><br><span class="line">                reply.readException();<span class="comment">//在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span></span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**除法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();</span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//通过Parcel::writeInterfaceToken往data写入一个RPC头</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x111</span>, data, reply, <span class="number">0</span>);</span><br><span class="line">                reply.readException();</span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inspectData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(et1.getText().toString())||TextUtils.isEmpty(et2.getText().toString()))&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"请填全两个参数！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h5><p>通过本Demo应该掌握以下几点：<br>（1）服务端自定义 Binder 类，实现其 onTransact() 方法；<br>（2）客户端使用 ServiceConnection 接口对象的使用，以及在客户端发起bindService（“三个参数的含义”）;<br>（3）了解客户端 IBinder 参与的行为，以及调用 transact(int code, Parcel data, Parcel reply, int flags) 方法;<br>（4）了解 Parcel 对象及基本的write/read等方法；</p><h5 id="四、转载说明"><a href="#四、转载说明" class="headerlink" title="四、转载说明"></a>四、转载说明</h5><p>注：首先说明这篇文章不是原创的，网上看到觉得这篇文章写的简洁易理解，但又怕哪天找不到，所以把内容复制下来，唯一目的就是为了防止链接失效以及更方便的找到，若侵犯了原创者的相关利益，请联系我删除。<a href="https://blog.csdn.net/happy_horse/article/details/51733492" target="_blank" rel="noopener">原创链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏添加通知图标</title>
      <link href="2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/"/>
      <url>2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h6 id="状态栏添加通知图标"><a href="#状态栏添加通知图标" class="headerlink" title="状态栏添加通知图标"></a>状态栏添加通知图标</h6><p><a href="https://blog.csdn.net/u012894808/article/details/106113865" target="_blank" rel="noopener">做法借鉴</a></p><p>最近做了一个添加通知图标的需求，因为之前没做过，所以借鉴了上面的做法，最终效果也实现了。其实做完发现其实并不是多难的，但是里面要学的东西也挺多的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、为什么要在 PhoneStatusBarPolicy.java 这个文件中进行修改，也就是需要分析下相关的流程。因为最近改状态栏的bug还挺频繁的，根据男人的第n感 觉得这个文件挺重要的，所以想借着这个来之不易的闲暇时间分析下状态栏的代码，这里就是其中的一部分。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、在上面链接中，有“第一步声明Slot”这个步骤，虽然只是个简单的字符串，但是定义的方式没见过，而且发现同事在里面也有定义，所以这块需要学习下。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内置app</title>
      <link href="2021/04/22/%E5%86%85%E7%BD%AEapp/"/>
      <url>2021/04/22/%E5%86%85%E7%BD%AEapp/</url>
      
        <content type="html"><![CDATA[<h6 id="以UCBrowser-apk为例"><a href="#以UCBrowser-apk为例" class="headerlink" title="以UCBrowser.apk为例"></a>以UCBrowser.apk为例</h6><p>1、将app放到该目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;apps</span><br></pre></td></tr></table></figure><p>2、将内置应用的路径写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;cells_build.mk:</span><br><span class="line">PRODUCT_COPY_FILES +&#x3D; \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:$(TARGET_COPY_OUT_SYSTEM)&#x2F;bin&#x2F;copy_apps.sh \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;init&#x2F;copy_app.rc:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;init&#x2F;copy_app.rc \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;apps&#x2F;UCBrowser.apk:$(TARGET_COPY_OUT_SYSTEM)&#x2F;pre-install&#x2F;UCBrowser.apk \   $(LOCAL_PATH)&#x2F;prebuild&#x2F;etc&#x2F;default_virtual_camera:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;default_virtual_camera</span><br></pre></td></tr></table></figure><p>3、同上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:</span><br><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;UCBrowser.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>注意：后来测试发现OTA升级后，内置的app可能会不在，需要模仿上面重新写下，具体原因后面有时间的话再去分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;Bilibili.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;kuaishou.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;UCBrowser.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;taobao.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;yingyongbao.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;TikTok.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;changba.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;tengxunhuiyi.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did</span><br><span class="line">fi</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did_v2 ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;Wps.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;jingdongshipin.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;lizhiweike.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did_v2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏图标刷新</title>
      <link href="2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/"/>
      <url>2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45080805/article/details/109485697?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control" target="_blank" rel="noopener">状态栏图标刷新</a> + <a href="https://blog.csdn.net/Sunxiaolin2016/article/details/99584029" target="_blank" rel="noopener">图标刷新2，不全</a></p><p>这块的流程因时间问题还未分析（Search Key = “Rain.G”）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Notification</title>
      <link href="2021/04/22/Notification/"/>
      <url>2021/04/22/Notification/</url>
      
        <content type="html"><![CDATA[<h5 id="一、基本用法："><a href="#一、基本用法：" class="headerlink" title="一、基本用法："></a>一、基本用法：</h5><h6 id="Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel"><a href="#Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel" class="headerlink" title="Notification 基本使用 + 8.0及8.0以上版本修改(注意添加通知Channel)"></a>Notification <a href="https://blog.csdn.net/qi85481455/article/details/82895507" target="_blank" rel="noopener">基本使用</a> + <a href="https://blog.csdn.net/yh18668197127/article/details/86299290" target="_blank" rel="noopener">8.0及8.0以上版本修改(注意添加通知Channel)</a></h6><p>在上面”基本使用”的模块使用中，发现实现不了通知的效果，原因是Android8.0 (API26) 开始要求通知设置Channel,否则会报错</p><p>注意: mipmap文件夹只放应用启动图标, 可以根据不同分辨率进行优化 , 其他需要使用的drawable资源放到对应的drawable文件夹。之前做的一次通知demo, 因为图片资源存放错误的问题，使通知栏下拉的通知图标显示灰色，导致分析bug方向出现失误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">String id = <span class="string">"channelId"</span>;</span><br><span class="line">String name = <span class="string">"xiaoxitongzhi"</span> ;<span class="comment">//就是设置里通知类别</span></span><br><span class="line">NotificationChannel notificationChannel = <span class="keyword">null</span>;</span><br><span class="line">NotificationManager notionManager= (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    notificationChannel = <span class="keyword">new</span> NotificationChannel(id, name, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">    notionManager.createNotificationChannel(notificationChannel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, NotificationActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,intent,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, id)</span><br><span class="line">    .setChannelId(id) <span class="comment">//8.0需要加 channelId</span></span><br><span class="line">    .setContentTitle(<span class="string">"title"</span>)</span><br><span class="line">    .setContentText(<span class="string">"contentText"</span>)</span><br><span class="line">    .setContentIntent(contentIntent)</span><br><span class="line">    .setAutoCancel(<span class="keyword">true</span>) <span class="comment">//clicked will dismiss</span></span><br><span class="line">    .setStyle(<span class="keyword">new</span> NotificationCompat.BigPictureStyle().bigPictue(</span><br><span class="line">        BitmapFactory.decodeResource(getResources(),R.drawable.weixin)))<span class="comment">//大长图</span></span><br><span class="line">    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.weixin))</span><br><span class="line">    .addAction(R.drawable.weixin, <span class="string">"button"</span>, contentIntent) <span class="comment">//最多可添加4个按钮</span></span><br><span class="line">    .setProgress(<span class="number">100</span>, <span class="number">30</span>, <span class="keyword">true</span>)<span class="comment">// true代表一个确定的进度条，false代表不确定</span></span><br><span class="line">    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)<span class="comment">//锁定屏幕后是否可以看见，有全部可见、部分可见、完全不可见</span></span><br><span class="line">    .setTimeoutAfter(<span class="number">2000</span>)</span><br><span class="line">    .setSmallIcon(R.drawable.weixin);<span class="comment">//小图标</span></span><br><span class="line"></span><br><span class="line">notionManager.notify(<span class="number">111</span>, mBuilder.build());<span class="comment">//保证每个通知所指定的id都是不同的，</span></span><br></pre></td></tr></table></figure><h5 id="二、设置锁定屏幕公开范围"><a href="#二、设置锁定屏幕公开范围" class="headerlink" title="二、设置锁定屏幕公开范围"></a>二、设置锁定屏幕公开范围</h5><p>要控制锁定屏幕中通知的可见详情级别，请调用 setVisibility() 并指定以下值之一：</p><ul><li>VISIBILITY_PUBLIC     显示通知的完整内容。</li><li>VISIBILITY_SECRET    不在锁定屏幕上显示该通知的任何部分。</li><li>VISIBILITY_PRIVATE   显示基本信息，例如通知图标和内容标题，但隐藏通知的完整内容。</li></ul><h5 id="三、更新通知"><a href="#三、更新通知" class="headerlink" title="三、更新通知"></a>三、更新通知</h5><p>要在发出此通知后对其进行更新，请再次调用 NotificationManagerCompat.notify()，并将之前使用的具有同一 ID 的通知传递给该方法。<br>如果之前的通知已被关闭，则系统会创建一个新通知。您可以选择性调用 setOnlyAlertOnce()，这样通知只会在通知首次出现时打断用户（通过声音、振动或视觉提示），而之后更新则不会再打断用户。</p><h5 id="四、移除通知"><a href="#四、移除通知" class="headerlink" title="四、移除通知"></a>四、移除通知</h5><p>除非发生以下情况之一，否则通知仍然可见：</p><ul><li>用户关闭通知。</li><li>用户点击通知，且您在创建通知时调用了 setAutoCancel()。</li><li>您针对特定的通知 ID 调用了 cancel()。此方法还会删除当前通知。</li><li>您调用了 cancelAll() 方法，该方法将移除之前发出的所有通知。</li><li>如果您在创建通知时使用 setTimeoutAfter() 设置了超时，系统会在指定持续时间过后取消通知。</li></ul><h5 id="五、监听清除通知的方式"><a href="#五、监听清除通知的方式" class="headerlink" title="五、监听清除通知的方式"></a>五、监听清除通知的方式</h5><p>系统现在可区分通知是由用户清除，还是由应用移除。要查看清除通知的方式，您应实现 NotificationListenerService 类的新 onNotificationRemoved() 函数。</p><h5 id="六、横幅通知显示"><a href="#六、横幅通知显示" class="headerlink" title="六、横幅通知显示"></a>六、横幅通知显示</h5><p>看网上好多人说android10后无法显示横幅通知，本来都信了，忽然发现该应用分身是可以的，继续往下追才知道 分为2步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">new</span> NotificationChannel(id, name, NotificationManager.IMPORTANCE_DEFAULT); <span class="comment">//设置通知重要性级别</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在手机设置中将该应用通知里的<span class="string">"在屏幕上弹出"</span>权限打开 <span class="comment">//估计很多人没走这步，所以别人说的不一定是真理</span></span><br></pre></td></tr></table></figure><h5 id="七、自定义通知"><a href="#七、自定义通知" class="headerlink" title="七、自定义通知"></a>七、自定义通知</h5><p>使用自定义通知布局时，请特别注意确保您的自定义布局适用于不同的设备屏幕方向和分辨率。虽然对于所有界面布局，此建议都适用，但它对通知布局而言尤为重要，因为抽屉式通知栏中的空间非常有限。自定义通知布局的可用高度取决于通知视图。通常情况下，收起后的视图布局的高度上限为 64 dp，展开后的视图布局的高度上限为 256 dp。<br>自定义通知有两种，一种是为内容区域创建自定义布局，另一种是创建完全自定义的通知布局。</p><h6 id="1-为内容区域创建自定义布局"><a href="#1-为内容区域创建自定义布局" class="headerlink" title="1.为内容区域创建自定义布局"></a>1.为内容区域创建自定义布局</h6><p>如果您需要自定义内容区域的布局，可以将 NotificationCompat.DecoratedCustomViewStyle 应用到您的通知。借助此 API，您可以为通常由标题和文本内容占据的内容区域提供自定义布局，同时仍对通知图标、时间戳、子文本和操作按钮使用系统装饰。<br>自定义布局的使用方式如下：</p><ul><li>构建基本通知（使用 NotificationCompat.Builder）</li><li>调用 setStyle()，向其传递一个 NotificationCompat.DecoratedMediaCustomViewStyle 实例。</li><li>将自定义布局扩充为 RemoteViews 的实例。</li><li>调用 setCustomContentView() 以设置收起后通知的布局。还可以选择调用 setCustomBigContentView() 来为展开后通知设置不同的布局。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//展开后的大布局会覆盖掉正常布局</span></span><br><span class="line">RemoteViews notificationLayout = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.custom_notification_item);</span><br><span class="line">RemoteViews notificationLayoutExpanded = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.custom_notification_large);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, channelId)</span><br><span class="line">    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">    .setStyle(<span class="keyword">new</span> NotificationCompat.DecoratedCustomViewStyle())</span><br><span class="line">    .setCustomContentView(notificationLayout)</span><br><span class="line">    .setCustomBigContentView(notificationLayoutExpanded)</span><br><span class="line">    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)</span><br><span class="line">    .setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(<span class="keyword">this</span>);</span><br><span class="line">notificationManager.notify(<span class="number">100</span>, notification.build());</span><br></pre></td></tr></table></figure><h6 id="2-创建完全自定义的通知布局"><a href="#2-创建完全自定义的通知布局" class="headerlink" title="2.创建完全自定义的通知布局"></a>2.创建完全自定义的通知布局</h6><p>如果不希望使用标准通知图标和标题装饰通知，请按照上述步骤使用 setCustomBigContentView()，但不要调用 setStyle()。<br>要支持低于 Android 4.1（API 级别 16）的 Android 版本，您还应调用 setContent()，向其传递同一 RemoteViews 对象。<br>这就没有所谓的图标、应用程序名字、展开按钮等等。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Activity</title>
      <link href="2021/04/18/Activity/"/>
      <url>2021/04/18/Activity/</url>
      
        <content type="html"><![CDATA[<h6 id="Activity-生命周期、状态-使用"><a href="#Activity-生命周期、状态-使用" class="headerlink" title="Activity 生命周期、状态   使用"></a>Activity 生命周期、状态   <a href="https://blog.csdn.net/qq_36270361/article/details/107141162" target="_blank" rel="noopener">使用</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask</title>
      <link href="2021/04/18/AsyncTask/"/>
      <url>2021/04/18/AsyncTask/</url>
      
        <content type="html"><![CDATA[<h6 id="AsyncTask-基本使用"><a href="#AsyncTask-基本使用" class="headerlink" title="AsyncTask  基本使用"></a>AsyncTask  <a href="https://www.jianshu.com/p/ee1342fcf5e7" target="_blank" rel="noopener">基本使用</a></h6><h6 id="AsyncTask-原理及源码"><a href="#AsyncTask-原理及源码" class="headerlink" title="AsyncTask  原理及源码"></a>AsyncTask  <a href="https://www.jianshu.com/p/37502bbbb25a" target="_blank" rel="noopener">原理及源码</a></h6><p>注意: 本以为调用task.cancel(true)就可以强制结束AsyncTask，但是实际上是不可行的，因为task.cancel(true)方法仅仅是将AsyncTask的cancel标识符设置为true，仍然需要去手动停止循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void ...voids)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// initialization ...</span></span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(isCancelled()) <span class="comment">//这里判断标识符</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">// do my thing ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ending ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Handler</title>
      <link href="2021/04/18/Handler%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/18/Handler%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h6 id="Handler机制-基本用法"><a href="#Handler机制-基本用法" class="headerlink" title="Handler机制    基本用法"></a>Handler机制    <a href="https://www.jianshu.com/p/fa1450b0bbf6" target="_blank" rel="noopener">基本用法</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>View体系、动画</title>
      <link href="2021/04/18/View%20%E4%BD%93%E7%B3%BB/"/>
      <url>2021/04/18/View%20%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h6 id="View-体系，包括动画"><a href="#View-体系，包括动画" class="headerlink" title="View 体系，包括动画"></a>View 体系，包括动画</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>android start</title>
      <link href="2021/04/12/android-start/"/>
      <url>2021/04/12/android-start/</url>
      
        <content type="html"><![CDATA[<h4 id="开机向导启动时机分析"><a href="#开机向导启动时机分析" class="headerlink" title="开机向导启动时机分析"></a>开机向导启动时机分析</h4><p><strong>SystemServer.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">               &#x2F;&#x2F; Start services.</span><br><span class="line">        try &#123;</span><br><span class="line">            traceBeginAndSlog(&quot;StartServices&quot;);</span><br><span class="line">            startBootstrapServices();</span><br><span class="line">            startCoreServices();</span><br><span class="line">            startOtherServices();   &#x2F;&#x2F;启动SystemUi、开机向导、Launcher等</span><br><span class="line">            SystemServerInitThreadPool.shutdown();</span><br><span class="line">        &#125; catch (Throwable ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActivityManagerService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void systemReady(final Runnable goingCallback, TimingsTraceLog traceLog) &#123;</span><br><span class="line">        ...</span><br><span class="line">               if (goingCallback !&#x3D; null) goingCallback.run();   &#x2F;&#x2F;启动systemUi</span><br><span class="line">        ...</span><br><span class="line">        synchronized(this) &#123;</span><br><span class="line">               ...</span><br><span class="line">               mAtmInternal.startHomeOnAllDisplays(currentUserId, &quot;systemReady&quot;); &#x2F;&#x2F;启动开机向导和Launcher</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class SystemUIService extends Service &#123;</span><br><span class="line">         @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIApplication.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void startServicesIfNeeded() &#123;</span><br><span class="line">        String[] names &#x3D; getResources().getStringArray(R.array.config_systemUIServiceComponents);</span><br><span class="line">        startServicesIfNeeded(names);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">---------config.xml ------------</span><br><span class="line">...</span><br><span class="line">&lt;item&gt;com.android.systemui.SystemBars&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.usb.StorageNotification&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.power.PowerUI&lt;&#x2F;item&gt;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;从config.xml文件获取组件的名称，状态栏和导航栏就是从这里获取并启动。</span><br></pre></td></tr></table></figure><p>这里将SystemUI直接屏蔽，发现开机向导还是会出现状态栏和导航栏；<br>分析原因后知道是 KeyguardService 启动了上面提到的SystemUi小组件</p><p>以上就是基本的流程，现在的方案如下：<br>1、延迟SystemUI加载的时间，即开机向导结束后发广播启动SystemUI<br>2、KeyguardService延迟启动SystemUi组件</p><p><strong>延迟SystemUI加载方案：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               &#x2F;**traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();*&#x2F;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">               &#125;</span><br><span class="line">               BroadcastReceiver startSystemUIReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            if (&quot;com.guyu.action.START_SYSTEMUI&quot;.equals(intent.getAction())) &#123;</span><br><span class="line">               Slog.v(&quot;wx6&quot;, &quot;SystemServer receive com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">               IntentFilter filter &#x3D; new IntentFilter();</span><br><span class="line">               filter.addAction(&quot;com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">        context.registerReceiver(startSystemUIReceiver, filter);</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardService延迟启动SystemUi组件的方案:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这个 service 在系统启动的时候和 SystemUI 启动的时候都会绑定这个服务</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 0)&#123;</span><br><span class="line">        android.util.Log.v(&quot;wx2021&quot;, &quot;res &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + Settings.Global.getString(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;));</span><br><span class="line">               &#125;else  &#123;</span><br><span class="line">                       ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               &#125;</span><br><span class="line">        &#125; catch (Settings.SettingNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;((SystemUIApplication) getApplication()).startServicesIfNeeded();   &#x2F;&#x2F;这里调用 SystemUIApplication</span><br><span class="line">        mKeyguardViewMediator &#x3D;</span><br><span class="line">                ((SystemUIApplication) getApplication()).getComponent(KeyguardViewMediator.class);</span><br><span class="line">        mKeyguardLifecyclesDispatcher &#x3D; new KeyguardLifecyclesDispatcher(</span><br><span class="line">                Dependency.get(ScreenLifecycle.class),</span><br><span class="line">                Dependency.get(WakefulnessLifecycle.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样修改后导致开机向导结束后会进入锁屏，分析后觉得是 SystemUi 的启动时机太晚引起，分析过程如下：</p><p><strong>PhoneWindowManager.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onSystemUiStarted() &#123;</span><br><span class="line">       bindKeyguard();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">       private void bindKeyguard() &#123;</span><br><span class="line">       synchronized (mLock) &#123;</span><br><span class="line">           if (mKeyguardBound) &#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">           mKeyguardBound &#x3D; true;</span><br><span class="line">       &#125;</span><br><span class="line">       mKeyguardDelegate.bindService(mContext);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>keyguardDelegate.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void bindService(Context context) &#123;</span><br><span class="line">        ...</span><br><span class="line">        final ComponentName keyguardComponent &#x3D; ComponentName.unflattenFromString(</span><br><span class="line">                resources.getString(com.android.internal.R.string.config_keyguardComponent)); &#x2F;&#x2F;KeyguardService</span><br><span class="line">        intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">        intent.setComponent(keyguardComponent);</span><br><span class="line"> </span><br><span class="line">        if (!context.bindServiceAsUser(intent, mKeyguardConnection,</span><br><span class="line">                Context.BIND_AUTO_CREATE, mHandler, UserHandle.SYSTEM)) &#123;</span><br><span class="line">            Log.v(TAG, &quot;*** Keyguard: can&#39;t bind to &quot; + keyguardComponent);</span><br><span class="line">                       ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard started&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private final ServiceConnection mKeyguardConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard connected (yay!)&quot;);</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;onServiceConnected&quot;);</span><br><span class="line">            mKeyguardService &#x3D; new KeyguardServiceWrapper(mContext,</span><br><span class="line">                    IKeyguardService.Stub.asInterface(service), mCallback);</span><br><span class="line">            if (mKeyguardState.systemIsReady) &#123;</span><br><span class="line">                &#x2F;&#x2F; If the system is ready, it means keyguard crashed and restarted.</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;mKeyguardState.systemIsReady&quot;);</span><br><span class="line">                mKeyguardService.onSystemReady();     &#x2F;&#x2F;这里进行 锁屏 操作</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>之前没修改 SystemUi 加载时间之前，也会走到这里， 不过在锁屏的时候进行了判断，如果开机向导还没结束，直接 return 不进行锁屏，现在修改是在 开机向导结束后启动 SystemUi，走到这里没有 return 的条件， 所以会锁屏。</p><p><strong>KeyguardViewMediator.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void doKeyguardLocked(Bundle options) &#123;</span><br><span class="line">android.util.Log.v(&quot;wx000&quot;, &quot;00000000000000&quot;);</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; In split system user mode, we never unlock system user.</span><br><span class="line">        if (!mustNotUnlockCurrentUser()</span><br><span class="line">                || !mUpdateMonitor.isDeviceProvisioned()) &#123;</span><br><span class="line"> </span><br><span class="line">            if (!lockedOrMissing &amp;&amp; shouldWaitForProvisioning()) &#123;</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;doKeyguard: not showing because device isn&#39;t provisioned&quot;</span><br><span class="line">                        + &quot; and the sim is not locked or missing&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">               ...</span><br><span class="line">        if (DEBUG) Log.d(TAG, &quot;doKeyguard: showing the lock screen&quot;);</span><br><span class="line">        showLocked(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后决定将 SystemUI 的启动时间放在 显示状态栏界面的后面，即登陆界面的后面，在点击下一步的时候发送广播 ，启动SystemUi，从log看 发广播到 锁屏判断 花费将近1s 多， 有次到5s</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 框架层 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_Collection</title>
      <link href="2020/06/27/Java-Collection/"/>
      <url>2020/06/27/Java-Collection/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/coder-lzh/p/10819627.html" target="_blank" rel="noopener">Map集合</a></p><p><a href="https://cloud.tencent.com/developer/article/1451016" target="_blank" rel="noopener">List集合</a></p><p><a href="https://blog.csdn.net/zhangqunshuai/article/details/80660974" target="_blank" rel="noopener">Set集合</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式设计</title>
      <link href="2020/05/30/Danli_1/"/>
      <url>2020/05/30/Danli_1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon1</span></span>&#123;</span><br><span class="line"><span class="comment">//私有化构造方法，不允许外界创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span>  <span class="title">SingleTon1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> SingleTon1 instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//public static  synchronized SingleTon1 instance() &#123;</span></span><br><span class="line"><span class="comment">//if (instance == null) &#123;</span></span><br><span class="line"><span class="comment">// instance = new SingleTon1();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return instance;</span></span><br><span class="line"><span class="comment">//&#125;synchronized按线程顺序执行，会使效率下降</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon1 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//mute锁：静态方法用类名.class,动态用的是this</span></span><br><span class="line"><span class="comment">//下面的设计会一定程度上减少线程阻塞，完后接volatile关键字</span></span><br><span class="line"><span class="comment">/*volatile关键字的作用：</span></span><br><span class="line"><span class="comment"> * 1、保证线程的可见性</span></span><br><span class="line"><span class="comment"> * 2、禁止指令重排序</span></span><br><span class="line"><span class="comment"> * 3、但不能保证其原子性</span></span><br><span class="line"><span class="comment"> * 记住：当多个线程对一个共享变量进行操作时，就用volatile修饰</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SingleTon1<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 此类设计存在线程不安全的原因？</span></span><br><span class="line"><span class="comment"> * 1、多个线程并发执行</span></span><br><span class="line"><span class="comment"> * 2、多个线程有共享数据集</span></span><br><span class="line"><span class="comment"> * 3、多个线程在共享数据集上的操作是非原子操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//SingleThreadTest(); 单线程测试</span></span><br><span class="line">ManyThreadTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1 s1 = SingleTon1.instance();</span><br><span class="line">SingleTon1 s2 = SingleTon1.instance();</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ManyThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多线程测试结果是不安全的，方法是：</span></span><br><span class="line"><span class="comment"> * 加上synchronized</span></span><br><span class="line"><span class="comment"> *多线程会只创建一个对象,保证了代码的原子性、安全性，</span></span><br><span class="line"><span class="comment"> *但是要让多个线程在这个代码块上顺序执行，性能会下降。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//小对象频繁用,线程安全，无阻塞</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//此单例的缺陷：可能占用资源比较多，尤其是大对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大对象，频繁用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inner.instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest02</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Singleton2.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 单例模式设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo command</title>
      <link href="2020/04/17/Hexo%20Command/"/>
      <url>2020/04/17/Hexo%20Command/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">" New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Clean-Cache"><a href="#Clean-Cache" class="headerlink" title="Clean Cache"></a>Clean Cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Run-Server"><a href="#Run-Server" class="headerlink" title="Run Server"></a>Run Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
