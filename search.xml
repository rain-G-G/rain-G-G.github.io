<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Parcel类</title>
      <link href="2021/05/31/Parcel%E7%B1%BB/"/>
      <url>2021/05/31/Parcel%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h5 id="一、Parcel类"><a href="#一、Parcel类" class="headerlink" title="一、Parcel类"></a>一、Parcel类</h5><h6 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1  定义："></a>1.1  定义：</h6><p>Parcel就是一个存放读取数据的容器， Android系统中的binder进程间通信就使用了Parcel类来进行客户端与服务端数据的交互，而且AIDL的数据也是通过Parcel来交互的。</p><h6 id="1-2-继承关系："><a href="#1-2-继承关系：" class="headerlink" title="1.2  继承关系："></a>1.2  继承关系：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><h6 id="1-3-基本方法："><a href="#1-3-基本方法：" class="headerlink" title="1.3  基本方法："></a>1.3  基本方法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">常用方法介绍：</span><br><span class="line">        obtain()  获得一个新的parcel ，相当于<span class="keyword">new</span>一个对象</span><br><span class="line">        dataSize()  得到当前parcel对象的实际存储空间</span><br><span class="line">        dataCapacity()  得到当前parcel对象的已分配的存储空间, &gt;=dataSize()值  (以空间换时间)</span><br><span class="line">        dataPostion()   获得当前parcel对象的偏移量(类似于文件流指针的偏移量)</span><br><span class="line">        setDataPosition()  设置偏移量</span><br><span class="line">        recyle()  清空、回收parcel对象的内存</span><br><span class="line"></span><br><span class="line">        writeInt(<span class="keyword">int</span>)   写入一个整数</span><br><span class="line">        writeFloat(<span class="keyword">float</span>)   写入一个浮点数</span><br><span class="line">        writeDouble(<span class="keyword">double</span>)   写入一个双精度数</span><br><span class="line">        writeString(string)   写入一个字符串</span><br><span class="line"></span><br><span class="line">     当然，还有更多的writeXXX()方法，与之对应的就是readXXX()，具体方法请参阅SDK。其中几个值得注意的方法为：</span><br><span class="line">         writeException() 在Parcel队头写入一个异常</span><br><span class="line">         writeNoException()  Parcel队头写入“无异常“</span><br><span class="line">         readException() 在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span><br></pre></td></tr></table></figure><h6 id="1-4-客户端transact"><a href="#1-4-客户端transact" class="headerlink" title="1.4 客户端transact():"></a>1.4 客户端transact():</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span>  <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"><span class="comment">//参数说明：   </span></span><br><span class="line"><span class="comment">// code ：是请求的ID号    </span></span><br><span class="line"><span class="comment">// data ：客户端请求发送的参数   </span></span><br><span class="line"><span class="comment">// reply：服务器端返回的结果   </span></span><br><span class="line"><span class="comment">// flags：一些额外的标识，如FLAG_ONEWAY等，通常为0.</span></span><br></pre></td></tr></table></figure><h6 id="1-5-服务端与客户端的调用流程："><a href="#1-5-服务端与客户端的调用流程：" class="headerlink" title="1.5 服务端与客户端的调用流程："></a>1.5 服务端与客户端的调用流程：</h6><p><img src="D:%5Cblog%5Csource%5Cimage%5Cparcel.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 在客户端创建一个IBinder 接口对象</span></span><br><span class="line"><span class="keyword">private</span> IBinder mPlusBinder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 将客户端的IBinder 接口对象与服务端的MyBinder进行关联（说法不太妥当，其实当调用bindService之后，mPlusBinder就是服务端的对象了。）</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">       mPlusBinder = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 执行transact（）方法</span></span><br><span class="line">mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 回调mPlusBinder 的onTransact（）方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="二、在进程间传递Parcel对象实现进程间通信"><a href="#二、在进程间传递Parcel对象实现进程间通信" class="headerlink" title="二、在进程间传递Parcel对象实现进程间通信"></a>二、在进程间传递Parcel对象实现进程间通信</h5><h6 id="2-1-Demo描述："><a href="#2-1-Demo描述：" class="headerlink" title="2.1 Demo描述："></a>2.1 Demo描述：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 在服务端 CalcPlusService 实现两个整数的相乘和相除，并将结果返回；</span><br><span class="line"><span class="number">2</span>) 在客户端 MainActivity 获取用户输入的参数，并传递到服务端；</span><br></pre></td></tr></table></figure><h6 id="2-2-服务端的实现："><a href="#2-2-服务端的实现：" class="headerlink" title="2.2 服务端的实现："></a>2.2 服务端的实现：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcPlusService</span>  <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"CalcPlusService"</span>;</span><br><span class="line">    <span class="keyword">private</span> MyBinder binder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onCreate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onBind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> binder;<span class="comment">//当客户端调用bindService时此方法 会被调用，并且返回客户端一个binder对象；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onUnbind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);<span class="comment">//当客户端调用unbindService时此方法 会被调用；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRebind(intent);</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onRebind()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onDestroy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;<span class="comment">//自定义Binder，继承Binder类，【class Binder implements IBinder】，实现onTransact方法；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> arg0;</span><br><span class="line">            <span class="keyword">int</span> arg1;</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR); <span class="comment">//指定服务的标识为CalcPlusService</span></span><br><span class="line">            arg0 = data.readInt();<span class="comment">//读取一个整数</span></span><br><span class="line">            arg1 = data.readInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (code)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x110</span>:&#123;</span><br><span class="line">                    result = arg0 * arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x111</span>:&#123;</span><br><span class="line">                    result = arg0 / arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-注册服务，并新指定一个remote进程："><a href="#2-3-注册服务，并新指定一个remote进程：" class="headerlink" title="2.3 注册服务，并新指定一个remote进程："></a>2.3 注册服务，并新指定一个remote进程：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">".CalcPlusService"</span></span><br><span class="line">      android:process=<span class="string">".remote"</span>&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><h6 id="2-4-客户端的调用："><a href="#2-4-客户端的调用：" class="headerlink" title="2.4 客户端的调用："></a>2.4 客户端的调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder mPlusBinder;<span class="comment">//进程间通信Parcel对象的传递主要靠IBinder 接口；</span></span><br><span class="line">    <span class="keyword">private</span> EditText et1,et2;</span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnPlus = <span class="keyword">new</span> ServiceConnection()&#123;<span class="comment">//ServiceConnection 是一个接口，是客户端与服务端进行连接的一个桥梁；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">" mServiceConnPlus onServiceConnected"</span>);</span><br><span class="line">            mPlusBinder = service;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">"mServiceConnPlus onServiceDisconnected"</span>);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//关于service：//</span></span><br><span class="line">            <span class="comment">//（1）取消绑定仅需要使用unbindService()方法，并将ServiceConnnection传递给unbindService()方法。</span></span><br><span class="line">            <span class="comment">//（2）需注意的是，unbindService()方法成功后，系统并不会调用onServiceDisconnected()，因为onServiceDisconnected()仅在意外断开绑定时才被调用； </span></span><br><span class="line">            <span class="comment">//（3）当bindService后，不能stopService,需要通过unBindService()来解除绑定， </span></span><br><span class="line">            <span class="comment">//（4）startService()后，不可以通过unBindService()来销毁service；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        et1 = (EditText)findViewById(R.id.et1);</span><br><span class="line">        et2 = (EditText)findViewById(R.id.et2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, CalcPlusService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">boolean</span> plus = bindService(intent, mServiceConnPlus, Context.BIND_AUTO_CREATE);<span class="comment">//标志位BIND_AUTO_CREATE：automatically create the service as long as the binding exists.</span></span><br><span class="line">        Toast.makeText(view.getContext(), <span class="string">"绑定服务"</span>+plus, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unbindService(mServiceConnPlus);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;<span class="comment">//这里必须代码置空</span></span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"解绑成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"未绑定"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**乘法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();<span class="comment">//Parcel.obtain()：获得一个新的parcel ，相当于new一个对象；</span></span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//写入服务的标志，与enforceInterface（）配套使用；</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);<span class="comment">//transact(int code, Parcel data, Parcel reply, int flags)</span></span><br><span class="line">                reply.readException();<span class="comment">//在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span></span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**除法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();</span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//通过Parcel::writeInterfaceToken往data写入一个RPC头</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x111</span>, data, reply, <span class="number">0</span>);</span><br><span class="line">                reply.readException();</span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inspectData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(et1.getText().toString())||TextUtils.isEmpty(et2.getText().toString()))&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"请填全两个参数！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h5><p>通过本Demo应该掌握以下几点：<br>（1）服务端自定义 Binder 类，实现其 onTransact() 方法；<br>（2）客户端使用 ServiceConnection 接口对象的使用，以及在客户端发起bindService（“三个参数的含义”）;<br>（3）了解客户端 IBinder 参与的行为，以及调用 transact(int code, Parcel data, Parcel reply, int flags) 方法;<br>（4）了解 Parcel 对象及基本的write/read等方法；</p><h5 id="四、转载说明"><a href="#四、转载说明" class="headerlink" title="四、转载说明"></a>四、转载说明</h5><p>注：首先说明这篇文章不是原创的，网上看到觉得这篇文章写的简洁易理解，但又怕哪天找不到，所以把内容复制下来，唯一目的就是为了防止链接失效以及更方便的找到，若侵犯了原创者的相关利益，请联系我删除。<a href="https://blog.csdn.net/happy_horse/article/details/51733492" target="_blank" rel="noopener">原创链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏添加通知图标</title>
      <link href="2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/"/>
      <url>2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h6 id="状态栏添加通知图标"><a href="#状态栏添加通知图标" class="headerlink" title="状态栏添加通知图标"></a>状态栏添加通知图标</h6><p><a href="https://blog.csdn.net/u012894808/article/details/106113865" target="_blank" rel="noopener">做法借鉴</a></p><p>最近做了一个添加通知图标的需求，因为之前没做过，所以借鉴了上面的做法，最终效果也实现了。其实做完发现其实并不是多难的，但是里面要学的东西也挺多的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、为什么要在 PhoneStatusBarPolicy.java 这个文件中进行修改，也就是需要分析下相关的流程。因为最近改状态栏的bug还挺频繁的，根据男人的第n感 觉得这个文件挺重要的，所以想借着这个来之不易的闲暇时间分析下状态栏的代码，这里就是其中的一部分。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、在上面链接中，有“第一步声明Slot”这个步骤，虽然只是个简单的字符串，但是定义的方式没见过，而且发现同事在里面也有定义，所以这块需要学习下。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内置app</title>
      <link href="2021/04/22/%E5%86%85%E7%BD%AEapp/"/>
      <url>2021/04/22/%E5%86%85%E7%BD%AEapp/</url>
      
        <content type="html"><![CDATA[<h6 id="以UCBrowser-apk为例"><a href="#以UCBrowser-apk为例" class="headerlink" title="以UCBrowser.apk为例"></a>以UCBrowser.apk为例</h6><p>1、将app放到该目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;apps</span><br></pre></td></tr></table></figure><p>2、将内置应用的路径写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;cells_build.mk:</span><br><span class="line">PRODUCT_COPY_FILES +&#x3D; \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:$(TARGET_COPY_OUT_SYSTEM)&#x2F;bin&#x2F;copy_apps.sh \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;init&#x2F;copy_app.rc:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;init&#x2F;copy_app.rc \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;apps&#x2F;UCBrowser.apk:$(TARGET_COPY_OUT_SYSTEM)&#x2F;pre-install&#x2F;UCBrowser.apk \   $(LOCAL_PATH)&#x2F;prebuild&#x2F;etc&#x2F;default_virtual_camera:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;default_virtual_camera</span><br></pre></td></tr></table></figure><p>3、同上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:</span><br><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;UCBrowser.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏图标刷新</title>
      <link href="2021/04/22/Wifi%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/"/>
      <url>2021/04/22/Wifi%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45080805/article/details/109485697?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control" target="_blank" rel="noopener">状态栏图标刷新</a> + <a href="https://blog.csdn.net/Sunxiaolin2016/article/details/99584029" target="_blank" rel="noopener">图标刷新2，不全</a></p><p>这块的流程因时间问题还未分析（Search Key = “Rain.G”）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Notification</title>
      <link href="2021/04/22/Notification/"/>
      <url>2021/04/22/Notification/</url>
      
        <content type="html"><![CDATA[<h5 id="一、基本用法："><a href="#一、基本用法：" class="headerlink" title="一、基本用法："></a>一、基本用法：</h5><h6 id="Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel"><a href="#Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel" class="headerlink" title="Notification 基本使用 + 8.0及8.0以上版本修改(注意添加通知Channel)"></a>Notification <a href="https://blog.csdn.net/qi85481455/article/details/82895507" target="_blank" rel="noopener">基本使用</a> + <a href="https://blog.csdn.net/yh18668197127/article/details/86299290" target="_blank" rel="noopener">8.0及8.0以上版本修改(注意添加通知Channel)</a></h6><p>在上面”基本使用”的模块使用中，发现实现不了通知的效果，原因是Android8.0 (API26) 开始要求通知设置Channel,否则会报错</p><p>注意: mipmap文件夹只放应用启动图标, 可以根据不同分辨率进行优化 , 其他需要使用的drawable资源放到对应的drawable文件夹。之前做的一次通知demo, 因为图片资源存放错误的问题，使通知栏下拉的通知图标显示灰色，导致分析bug方向出现失误。</p><h5 id="二、Bug分析："><a href="#二、Bug分析：" class="headerlink" title="二、Bug分析："></a>二、Bug分析：</h5><h6 id="bug1：第三方应用通知图标在状态栏显示为白板-改法"><a href="#bug1：第三方应用通知图标在状态栏显示为白板-改法" class="headerlink" title="bug1：第三方应用通知图标在状态栏显示为白板  改法"></a>bug1：第三方应用通知图标在状态栏显示为白板  <a href="https://blog.csdn.net/mdqwuyan/article/details/115700440?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&spm=1001.2101.3001.4242" target="_blank" rel="noopener">改法</a></h6><p>注意：</p><p>​        （1） 5.0以上（不包含5.0），系统默认通知栏图标为系统启动图标，会自动将通知栏的图标（有色区域）全部填充为白色，像一个白色格子，这是Google 为了实现材料设计规范，特意为之。为了去除白色图标，镂空背景即可： 所以这之后的想要设置显示状态栏icon不为白色： 这个icon只要背景需要透明，只让内容块纯白色。</p><p>​        （2）通知栏下栏的通知区域图标为灰色，原因是系统为小图标覆盖了颜色，代码地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/java/android/app/Notification.java 里的 processSmallIconColor()</span><br></pre></td></tr></table></figure><p>这一块的相关流程因时间问题还未分析（Search Key = “Rain.G”）;</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Activity</title>
      <link href="2021/04/18/Activity/"/>
      <url>2021/04/18/Activity/</url>
      
        <content type="html"><![CDATA[<h6 id="Activity-生命周期、状态-使用"><a href="#Activity-生命周期、状态-使用" class="headerlink" title="Activity 生命周期、状态   使用"></a>Activity 生命周期、状态   <a href="https://blog.csdn.net/qq_36270361/article/details/107141162" target="_blank" rel="noopener">使用</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask</title>
      <link href="2021/04/18/AsyncTask/"/>
      <url>2021/04/18/AsyncTask/</url>
      
        <content type="html"><![CDATA[<h6 id="AsyncTask-基本使用"><a href="#AsyncTask-基本使用" class="headerlink" title="AsyncTask  基本使用"></a>AsyncTask  <a href="https://www.jianshu.com/p/ee1342fcf5e7" target="_blank" rel="noopener">基本使用</a></h6><h6 id="AsyncTask-原理及源码"><a href="#AsyncTask-原理及源码" class="headerlink" title="AsyncTask  原理及源码"></a>AsyncTask  <a href="https://www.jianshu.com/p/37502bbbb25a" target="_blank" rel="noopener">原理及源码</a></h6><p>注意: 本以为调用task.cancel(true)就可以强制结束AsyncTask，但是实际上是不可行的，因为task.cancel(true)方法仅仅是将AsyncTask的cancel标识符设置为true，仍然需要去手动停止循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void ...voids)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// initialization ...</span></span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(isCancelled()) <span class="comment">//这里判断标识符</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">// do my thing ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ending ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Handler</title>
      <link href="2021/04/18/Handler%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/18/Handler%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h6 id="Handler机制-基本用法"><a href="#Handler机制-基本用法" class="headerlink" title="Handler机制    基本用法"></a>Handler机制    <a href="https://www.jianshu.com/p/fa1450b0bbf6" target="_blank" rel="noopener">基本用法</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>View体系、动画</title>
      <link href="2021/04/18/View%20%E4%BD%93%E7%B3%BB/"/>
      <url>2021/04/18/View%20%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h6 id="View-体系，包括动画"><a href="#View-体系，包括动画" class="headerlink" title="View 体系，包括动画"></a>View 体系，包括动画</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android基础知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>android start</title>
      <link href="2021/04/12/android-start/"/>
      <url>2021/04/12/android-start/</url>
      
        <content type="html"><![CDATA[<h1 id="开机向导启动时机分析"><a href="#开机向导启动时机分析" class="headerlink" title="开机向导启动时机分析"></a>开机向导启动时机分析</h1><p><strong>SystemServer.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">               &#x2F;&#x2F; Start services.</span><br><span class="line">        try &#123;</span><br><span class="line">            traceBeginAndSlog(&quot;StartServices&quot;);</span><br><span class="line">            startBootstrapServices();</span><br><span class="line">            startCoreServices();</span><br><span class="line">            startOtherServices();   &#x2F;&#x2F;启动SystemUi、开机向导、Launcher等</span><br><span class="line">            SystemServerInitThreadPool.shutdown();</span><br><span class="line">        &#125; catch (Throwable ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActivityManagerService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void systemReady(final Runnable goingCallback, TimingsTraceLog traceLog) &#123;</span><br><span class="line">        ...</span><br><span class="line">               if (goingCallback !&#x3D; null) goingCallback.run();   &#x2F;&#x2F;启动systemUi</span><br><span class="line">        ...</span><br><span class="line">        synchronized(this) &#123;</span><br><span class="line">               ...</span><br><span class="line">               mAtmInternal.startHomeOnAllDisplays(currentUserId, &quot;systemReady&quot;); &#x2F;&#x2F;启动开机向导和Launcher</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class SystemUIService extends Service &#123;</span><br><span class="line">         @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIApplication.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void startServicesIfNeeded() &#123;</span><br><span class="line">        String[] names &#x3D; getResources().getStringArray(R.array.config_systemUIServiceComponents);</span><br><span class="line">        startServicesIfNeeded(names);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">---------config.xml ------------</span><br><span class="line">...</span><br><span class="line">&lt;item&gt;com.android.systemui.SystemBars&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.usb.StorageNotification&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.power.PowerUI&lt;&#x2F;item&gt;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;从config.xml文件获取组件的名称，状态栏和导航栏就是从这里获取并启动。</span><br></pre></td></tr></table></figure><p>这里将SystemUI直接屏蔽，发现开机向导还是会出现状态栏和导航栏；</p><p>分析原因后知道是 KeyguardService 启动了上面提到的SystemUi小组件</p><p>以上就是基本的流程，现在的方案如下：</p><p>1、延迟SystemUI加载的时间，即开机向导结束后发广播启动SystemUI</p><p>2、KeyguardService延迟启动SystemUi组件</p><p><strong>延迟SystemUI加载方案：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               &#x2F;**traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();*&#x2F;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">               &#125;</span><br><span class="line">               BroadcastReceiver startSystemUIReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            if (&quot;com.guyu.action.START_SYSTEMUI&quot;.equals(intent.getAction())) &#123;</span><br><span class="line">               Slog.v(&quot;wx6&quot;, &quot;SystemServer receive com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">               IntentFilter filter &#x3D; new IntentFilter();</span><br><span class="line">               filter.addAction(&quot;com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">        context.registerReceiver(startSystemUIReceiver, filter);</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardService延迟启动SystemUi组件的方案:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这个 service 在系统启动的时候和 SystemUI 启动的时候都会绑定这个服务</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 0)&#123;</span><br><span class="line">        android.util.Log.v(&quot;wx2021&quot;, &quot;res &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + Settings.Global.getString(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;));</span><br><span class="line">               &#125;else  &#123;</span><br><span class="line">                       ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               &#125;</span><br><span class="line">        &#125; catch (Settings.SettingNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;((SystemUIApplication) getApplication()).startServicesIfNeeded();   &#x2F;&#x2F;这里调用 SystemUIApplication</span><br><span class="line">        mKeyguardViewMediator &#x3D;</span><br><span class="line">                ((SystemUIApplication) getApplication()).getComponent(KeyguardViewMediator.class);</span><br><span class="line">        mKeyguardLifecyclesDispatcher &#x3D; new KeyguardLifecyclesDispatcher(</span><br><span class="line">                Dependency.get(ScreenLifecycle.class),</span><br><span class="line">                Dependency.get(WakefulnessLifecycle.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样修改后导致开机向导结束后会进入锁屏，分析后觉得是 SystemUi 的启动时机太晚引起，分析过程如下：</p><p><strong>PhoneWindowManager.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onSystemUiStarted() &#123;</span><br><span class="line">       bindKeyguard();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">       private void bindKeyguard() &#123;</span><br><span class="line">       synchronized (mLock) &#123;</span><br><span class="line">           if (mKeyguardBound) &#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">           mKeyguardBound &#x3D; true;</span><br><span class="line">       &#125;</span><br><span class="line">       mKeyguardDelegate.bindService(mContext);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>keyguardDelegate.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void bindService(Context context) &#123;</span><br><span class="line">        ...</span><br><span class="line">        final ComponentName keyguardComponent &#x3D; ComponentName.unflattenFromString(</span><br><span class="line">                resources.getString(com.android.internal.R.string.config_keyguardComponent)); &#x2F;&#x2F;KeyguardService</span><br><span class="line">        intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">        intent.setComponent(keyguardComponent);</span><br><span class="line"> </span><br><span class="line">        if (!context.bindServiceAsUser(intent, mKeyguardConnection,</span><br><span class="line">                Context.BIND_AUTO_CREATE, mHandler, UserHandle.SYSTEM)) &#123;</span><br><span class="line">            Log.v(TAG, &quot;*** Keyguard: can&#39;t bind to &quot; + keyguardComponent);</span><br><span class="line">                       ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard started&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private final ServiceConnection mKeyguardConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard connected (yay!)&quot;);</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;onServiceConnected&quot;);</span><br><span class="line">            mKeyguardService &#x3D; new KeyguardServiceWrapper(mContext,</span><br><span class="line">                    IKeyguardService.Stub.asInterface(service), mCallback);</span><br><span class="line">            if (mKeyguardState.systemIsReady) &#123;</span><br><span class="line">                &#x2F;&#x2F; If the system is ready, it means keyguard crashed and restarted.</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;mKeyguardState.systemIsReady&quot;);</span><br><span class="line">                mKeyguardService.onSystemReady();     &#x2F;&#x2F;这里进行 锁屏 操作</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>之前没修改 SystemUi 加载时间之前，也会走到这里， 不过在锁屏的时候进行了判断，如果开机向导还没结束，直接 return 不进行锁屏</p><p>现在修改是在 开机向导结束后启动 SystemUi，走到这里没有 return 的条件， 所以会锁屏</p><p><strong>KeyguardViewMediator.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void doKeyguardLocked(Bundle options) &#123;</span><br><span class="line">android.util.Log.v(&quot;wx000&quot;, &quot;00000000000000&quot;);</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; In split system user mode, we never unlock system user.</span><br><span class="line">        if (!mustNotUnlockCurrentUser()</span><br><span class="line">                || !mUpdateMonitor.isDeviceProvisioned()) &#123;</span><br><span class="line"> </span><br><span class="line">            if (!lockedOrMissing &amp;&amp; shouldWaitForProvisioning()) &#123;</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;doKeyguard: not showing because device isn&#39;t provisioned&quot;</span><br><span class="line">                        + &quot; and the sim is not locked or missing&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">               ...</span><br><span class="line">        if (DEBUG) Log.d(TAG, &quot;doKeyguard: showing the lock screen&quot;);</span><br><span class="line">        showLocked(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后决定将 SystemUI 的启动时间放在 显示状态栏界面的后面，即登陆界面的后面，在点击下一步的时候发送广播 ，启动SystemUi</p><p>从log看 发广播到 锁屏判断 花费将近1s 多， 有次到5s</p><p><img src="D:%5Cblog%5Csource%5Cimage%5Cimage_fenping.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android框架层 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_Collection</title>
      <link href="2020/06/27/Java-Collection/"/>
      <url>2020/06/27/Java-Collection/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/coder-lzh/p/10819627.html" target="_blank" rel="noopener">Map集合</a></p><p><a href="https://cloud.tencent.com/developer/article/1451016" target="_blank" rel="noopener">List集合</a></p><p><a href="https://blog.csdn.net/zhangqunshuai/article/details/80660974" target="_blank" rel="noopener">Set集合</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式设计</title>
      <link href="2020/05/30/Danli_1/"/>
      <url>2020/05/30/Danli_1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon1</span></span>&#123;</span><br><span class="line"><span class="comment">//私有化构造方法，不允许外界创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span>  <span class="title">SingleTon1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> SingleTon1 instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//public static  synchronized SingleTon1 instance() &#123;</span></span><br><span class="line"><span class="comment">//if (instance == null) &#123;</span></span><br><span class="line"><span class="comment">// instance = new SingleTon1();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return instance;</span></span><br><span class="line"><span class="comment">//&#125;synchronized按线程顺序执行，会使效率下降</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon1 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//mute锁：静态方法用类名.class,动态用的是this</span></span><br><span class="line"><span class="comment">//下面的设计会一定程度上减少线程阻塞，完后接volatile关键字</span></span><br><span class="line"><span class="comment">/*volatile关键字的作用：</span></span><br><span class="line"><span class="comment"> * 1、保证线程的可见性</span></span><br><span class="line"><span class="comment"> * 2、禁止指令重排序</span></span><br><span class="line"><span class="comment"> * 3、但不能保证其原子性</span></span><br><span class="line"><span class="comment"> * 记住：当多个线程对一个共享变量进行操作时，就用volatile修饰</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SingleTon1<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 此类设计存在线程不安全的原因？</span></span><br><span class="line"><span class="comment"> * 1、多个线程并发执行</span></span><br><span class="line"><span class="comment"> * 2、多个线程有共享数据集</span></span><br><span class="line"><span class="comment"> * 3、多个线程在共享数据集上的操作是非原子操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//SingleThreadTest(); 单线程测试</span></span><br><span class="line">ManyThreadTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1 s1 = SingleTon1.instance();</span><br><span class="line">SingleTon1 s2 = SingleTon1.instance();</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ManyThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多线程测试结果是不安全的，方法是：</span></span><br><span class="line"><span class="comment"> * 加上synchronized</span></span><br><span class="line"><span class="comment"> *多线程会只创建一个对象,保证了代码的原子性、安全性，</span></span><br><span class="line"><span class="comment"> *但是要让多个线程在这个代码块上顺序执行，性能会下降。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//小对象频繁用,线程安全，无阻塞</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//此单例的缺陷：可能占用资源比较多，尤其是大对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大对象，频繁用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inner.instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest02</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Singleton2.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 单例模式设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo command</title>
      <link href="2020/04/17/Hexo%20Command/"/>
      <url>2020/04/17/Hexo%20Command/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">" New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Clean-Cache"><a href="#Clean-Cache" class="headerlink" title="Clean Cache"></a>Clean Cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Run-Server"><a href="#Run-Server" class="headerlink" title="Run Server"></a>Run Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
