<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Raphael内存泄漏分析工具</title>
      <link href="2022/04/10/Raphael%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>2022/04/10/Raphael%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h5 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h5><p><a href="https://github.com/bytedance/memory-leak-detector/blob/master/README_cn.md" target="_blank" rel="noopener">Raphael</a> 是西瓜视频基础技术团队开发的一款 native 内存泄漏监控工具，具有接入简单、监控范围广、性能优良、 稳定性好的特点。广泛用于字节跳动旗下各大 App 的 native 内存泄漏治理，收益显著！(这句话可是别人说的，好不好用了才知道，哈哈哈)</p><h5 id="二、步骤："><a href="#二、步骤：" class="headerlink" title="二、步骤："></a>二、步骤：</h5><h6 id="Step-1-Add-the-JitPack-repository-to-your-build-file"><a href="#Step-1-Add-the-JitPack-repository-to-your-build-file" class="headerlink" title="Step 1: Add the JitPack repository to your build file"></a>Step 1: Add the JitPack repository to your build file</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Step-2-Add-the-dependency"><a href="#Step-2-Add-the-dependency" class="headerlink" title="Step 2: Add the dependency"></a>Step 2: Add the dependency</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.github.bytedance:memory-leak-detector:0.1.7'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Step-3-Add-code-for-simple-usage-This-step-is-not-necessary-for-using-broadcast-control-如果使用广播的方式，这步不需要"><a href="#Step-3-Add-code-for-simple-usage-This-step-is-not-necessary-for-using-broadcast-control-如果使用广播的方式，这步不需要" class="headerlink" title="Step 3: Add code for simple usage (This step is not necessary for using broadcast control)如果使用广播的方式，这步不需要"></a>Step 3: Add code for simple usage (This step is not necessary for using broadcast control)如果使用广播的方式，这步不需要</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监控指定的so</span></span><br><span class="line">Raphael.start(</span><br><span class="line">    Raphael.MAP64_MODE|Raphael.ALLOC_MODE|<span class="number">0x0F0000</span>|<span class="number">1024</span>,</span><br><span class="line">    <span class="string">"/storage/emulated/0/raphael"</span>, <span class="comment">// need sdcard permission</span></span><br><span class="line">    <span class="string">".*libxxx\\.so$"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 监控整个进程</span></span><br><span class="line">Raphael.start(</span><br><span class="line">    Raphael.MAP64_MODE|Raphael.ALLOC_MODE|<span class="number">0x0F0000</span>|<span class="number">1024</span>,</span><br><span class="line">    <span class="string">"/storage/emulated/0/raphael"</span>, <span class="comment">// need sdcard permission</span></span><br><span class="line">    <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//## 通过本地广播监控指定的so</span></span><br><span class="line"><span class="comment">//## 0x0CF0400=Raphael.MAP64_MODE|Raphael.ALLOC_MODE|0x0F0000|1024</span></span><br><span class="line">adb shell am broadcast -a com.bytedance.raphael.ACTION_START -f <span class="number">0x01000000</span> --es configs <span class="number">0xCF0400</span> --es regex <span class="string">".*libXXX\\.so$"</span></span><br></pre></td></tr></table></figure><h6 id="Step-4-Print-result"><a href="#Step-4-Print-result" class="headerlink" title="Step 4: Print result"></a>Step 4: Print result</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码控制</span></span><br><span class="line">Raphael.print();</span><br><span class="line"></span><br><span class="line"><span class="comment">//## 本地广播</span></span><br><span class="line">adb shell am broadcast -a com.bytedance.raphael.ACTION_PRINT -f <span class="number">0x01000000</span></span><br></pre></td></tr></table></figure><h6 id="Step-5-Analysis-需要把这个工具下载，git地址在’概念’链接里"><a href="#Step-5-Analysis-需要把这个工具下载，git地址在’概念’链接里" class="headerlink" title="Step 5: Analysis(需要把这个工具下载，git地址在’概念’链接里)"></a>Step 5: Analysis(需要把这个工具下载，git地址在’概念’链接里)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**## 聚合 report，该文件在 print/stop 之后生成，需要手动 pull 出来</span></span><br><span class="line"><span class="comment">## 用到离线符号符号化功能的，需将raphael.py里的addr2line改为自己本地的NDK路径</span></span><br><span class="line"><span class="comment">##   -r: 日志路径, 必需，手机端生成的report文件</span></span><br><span class="line"><span class="comment">##   -o: 输出文件名，非必需，默认为 leak-doubts.txt</span></span><br><span class="line"><span class="comment">##   -s: 符号表目录，非必需，有符号化需求时可传，符号表文件需跟so同名，如：libXXX.so，多个文件需放在同一目录下儿*/</span></span><br><span class="line">python3 library/src/main/python/raphael.py -r report -o leak-doubts.txt -s ./symbol/</span><br><span class="line"></span><br><span class="line"><span class="comment">/**## 数据格式说明</span></span><br><span class="line"><span class="comment">##  201,852,591totals // 单指raphael拦截到的未释放的虚拟内存总和</span></span><br><span class="line"><span class="comment">##  118,212,424libandroid_runtime.so</span></span><br><span class="line"><span class="comment">##   28,822,002libhwui.so</span></span><br><span class="line"><span class="comment">##   24,145,920libstagefright.so</span></span><br><span class="line"><span class="comment">##   15,679,488libv8.cr.so</span></span><br><span class="line"><span class="comment">##    9,566,192libc++_shared.so</span></span><br><span class="line"><span class="comment">##       25,536libsqlite.so</span></span><br><span class="line"><span class="comment">##       12,288libv8_libbase.cr.so</span></span><br><span class="line"><span class="comment">##    5,388,741extras // raphael.py里预设了一些通用配置，可以通过修改规则进一步识别分组到extras里的数据</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## bdb11000, 70828032, 66 =&gt; bdb11000是report里此堆栈第一次分配出的内存地址，70828032是report里此堆栈的内存总和，66是report里此堆栈的总次数</span></span><br><span class="line"><span class="comment">## 0x000656cf /system/lib/libc.so (pthread_create + 246)</span></span><br><span class="line"><span class="comment">## 0x0037c129 /system/lib/libart.so (art::Thread::CreateNativeThread(_JNIEnv*, _jobject*, unsigned int, bool) + 448)</span></span><br><span class="line"><span class="comment">## 0x00112137 /system/framework/arm/boot.oat (java.lang.Thread.nativeCreate + 142)*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//## 分析 maps</span></span><br><span class="line"><span class="comment">//##  -m: maps文件路径，必需</span></span><br><span class="line">python3 library/src/main/python/mmap.py -m maps</span><br></pre></td></tr></table></figure><h6 id="Step-6-Stop-monitoring"><a href="#Step-6-Stop-monitoring" class="headerlink" title="Step 6: Stop monitoring"></a>Step 6: Stop monitoring</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码控制</span></span><br><span class="line">Raphael.stop();</span><br><span class="line"></span><br><span class="line"><span class="comment">//## 广播控制</span></span><br><span class="line">adb shell am broadcast -a com.bytedance.raphael.ACTION_STOP -f <span class="number">0x01000000</span></span><br></pre></td></tr></table></figure><blockquote><p>我这里用的是发广播的方式（start–等会–printf–Analysis–stop），内部自己有RaphaelReceiver，我们只需要注册一下就可以用了，比较方便。</p></blockquote><h5 id="四、定位报错位置"><a href="#四、定位报错位置" class="headerlink" title="四、定位报错位置"></a>四、定位报错位置</h5><p>需要用到ndk里面的addr2line这个工具，没有ndk的可以去android studio下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Android/Sdk/ndk/<span class="number">21.0</span><span class="number">.6113669</span>/toolchains/</span><br><span class="line">/Android/Sdk/ndk/<span class="number">21.0</span><span class="number">.6113669</span>/toolchains/arm-linux-androideabi-<span class="number">4.9</span>/prebuilt/linux-x86_64/bin</span><br><span class="line">/Android/Sdk/ndk/<span class="number">21.0</span><span class="number">.6113669</span>/toolchains/aarch64-linux-android-<span class="number">4.9</span>/prebuilt/linux-x86_64/bin</span><br></pre></td></tr></table></figure><p>注意该toolchains路径下有俩个文件夹都有addr2line，如果选的不正确会出现下面的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxso.so: File format not recognized</span><br></pre></td></tr></table></figure><p>根据上面的 leak-doubts.txt 文档，得知 libjingle_peerconnection_so.so库有问题，执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aarch64-linux-android-addr2line  -e /work2/rk3399/rk3399/packages/apps/DBPhoneService/app/build/intermediates/merged_native_libs/debug/out/lib/arm64-v8a/libjingle_peerconnection_so.so <span class="number">0x0000000000253fd4</span>  -s</span><br><span class="line">----------------------</span><br><span class="line">??:?</span><br></pre></td></tr></table></figure><p>惊不惊喜？？？到网上搜了下：</p><blockquote><p>在使用 addr2line 过程中经常会遇到 “??:?” 或 “??:0” 这种情况，原因就是一般 C/C++ SDK 都会进行添加 map  混淆，在编译配置选项中不生成符号表 symbolic 信息，不过 AndroidStudio 会默认为 so 文件添加符号表。<br>google说了，如果是aosp编译的话，在out/target/product/[productname]/symbols/system/lib/****.so下面 或者 在android工程obj目录下会自动生成带了符号表的共享库。找了找，真的有。于是他改了一下addr2line输入文件的位置，也就是将-e后面换成带有符号表的so库地址。(-e 设置输入文件（常用：选项后面需要跟报错的共享库，用于addr2line程序分析）)。</p></blockquote><p>也就是说，我使用了一个不带符号表的库。但是我的这个 libjingle_peerconnection_so.so 库特殊啊，到网上搜必须要下载webrtc源码然后编译，才能找到。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 性能分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DDMS打不开解决方案</title>
      <link href="2022/04/10/DDMS%E6%89%93%E4%B8%8D%E5%BC%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2022/04/10/DDMS%E6%89%93%E4%B8%8D%E5%BC%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>路径：<code>android/Sdk/tools/lib/monitor-x86_64/monitor</code></p><p>现象：打开DDMS会弹出错误log提示框，打开log如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.version=<span class="number">12.0</span><span class="number">.1</span></span><br><span class="line">java.vendor=Oracle Corporation</span><br><span class="line">!MESSAGE Bundle reference:file:org.apache.ant_1<span class="number">.8</span><span class="number">.3</span>.v201301120609/@<span class="number">4</span> not found.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个Log.txt文件，首行就是出现了当前jdk版本12.0.1。而DDMS的monitor,目前只支持到jdk8。</p><p>手动删除并重新下载JDK8，配置好环境变量。注意:JDK和AS最好一致，要用64位都用64位。<br>最主要的，要保证<code>jdk1.8的jre文件 和 android/Sdk/tools/lib/monitor-x86_64/jre</code> 文件夹保持一致 </p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 开发工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android布局圆角方案总结</title>
      <link href="2022/04/10/Android%E5%B8%83%E5%B1%80%E5%9C%86%E8%A7%92%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
      <url>2022/04/10/Android%E5%B8%83%E5%B1%80%E5%9C%86%E8%A7%92%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h6 id="一、问题："><a href="#一、问题：" class="headerlink" title="一、问题："></a>一、问题：</h6><p>最近在开发中会遇到Android布局切圆角的需求，大多数是对一个layout布局切下圆角。这里和图片切圆角有一些雷同的地方，可以相互借鉴，但是也不全一样。图片切圆角的一些总结和实践准备下次有空再写出来。</p><h6 id="二、方案："><a href="#二、方案：" class="headerlink" title="二、方案："></a>二、方案：</h6><p><strong>1.利用xml背景文件配置shape属性实现切圆角</strong></p><p><strong>2.利用GradientDrawable实现切圆角</strong></p><p><strong>3.利用clipPath实现切圆角</strong></p><p><strong>4.利用CardView实现切圆角</strong></p><p><strong>5.利用ViewOutlineProvider实现切圆角</strong></p><h6 id="三、方案实现"><a href="#三、方案实现" class="headerlink" title="三、方案实现:"></a>三、方案实现:</h6><p><strong>1、shape:</strong> 这种方式比较熟悉了，就是在drawable文件夹下新建一个xml文件，然后作为background属性值。</p><p><code>android:background=&quot;@drawable/bg_cornor&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span> <span class="comment">&lt;!--矩阵，oval椭圆等等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomLeftRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomRightRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"10dp"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">corners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/black"</span> /&gt;</span><span class="comment">&lt;!--填充的背景颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点是无法动态添加圆角。</p><p><strong>2、利用GradientDrawable实现切圆角:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mLly1 = findViewById(R.id.lly1);<span class="comment">//找到布局id</span></span><br><span class="line">        GradientDrawable gradientDrawable1 = <span class="keyword">new</span> GradientDrawable();</span><br><span class="line">        gradientDrawable1.setShape(GradientDrawable.RECTANGLE);</span><br><span class="line">        <span class="comment">//1、setCornerRadius 设置四个角，注意这里的单位是px</span></span><br><span class="line">        gradientDrawable1.setCornerRadius(DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>));</span><br><span class="line">        <span class="comment">//2、左边上下俩个角</span></span><br><span class="line">        <span class="keyword">float</span>[] radii = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">                DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>), DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>),</span><br><span class="line">                <span class="number">0F</span>, <span class="number">0F</span>,</span><br><span class="line">                <span class="number">0F</span>, <span class="number">0F</span>,</span><br><span class="line">                DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>), DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>)</span><br><span class="line">        &#125;;        </span><br><span class="line">        <span class="comment">//3、左边上角</span></span><br><span class="line">        <span class="keyword">float</span>[] radii1 = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">                DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>), DisplayUtils.dp2px(<span class="keyword">this</span>, <span class="number">10F</span>),</span><br><span class="line">                <span class="number">0F</span>, <span class="number">0F</span>,</span><br><span class="line">                <span class="number">0F</span>, <span class="number">0F</span>,</span><br><span class="line">                <span class="number">0F</span>, <span class="number">0F</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//setCornerRadii 单独设置</span></span><br><span class="line">        gradientDrawable1.setCornerRadii(radii);</span><br><span class="line">        gradientDrawable1.setColor(getResources().getColor(R.color.colorPrimary));</span><br><span class="line">        mLly1.setBackground(gradientDrawable1);</span><br></pre></td></tr></table></figure><p>优点：支持动态设置圆角。</p><p><strong>3、利用clipPath实现切圆角:</strong></p><p><strong>注意:cavas.clipPath不支持硬件加速，记得在AndroidManifest.xml中设置不使用硬件加速，不然效果出不来；常理解的clip(剪切)，是对已经存在的图形进行clip的。但是，在android上是对canvas（画布）上进行clip的，要在画图之前对canvas进行clip，如果画图之后再对canvas进行clip不会影响到已经画好的图形。一定要记住clip是针对canvas而非图形。</strong></p><p>(1)、<a href="https://www.jianshu.com/p/16b24f6374e0" target="_blank" rel="noopener">TypedArray用法</a></p><p>(2)、我们可以看出有A，B，C，D四个点，分别于<code>RectF(float left, float top, float right, float bottom)</code>方法对应的四个点。然而中间这个矩形的宽度width=C(right)-A(left)，高度height=D(bottom)-B(top)</p><img src="http://wxyy97.com/image/rect.jpg" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CornorViewLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> cornor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> topLeftCornor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> topRightCornor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> bottomLeftCornor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> bottomRightCornor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CornorViewLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CornorViewLayout</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CornorViewLayout);</span><br><span class="line">        cornor = typedArray.getDimension(R.styleable.CornorViewLayout_cornor, <span class="number">0</span>);</span><br><span class="line">        topLeftCornor = typedArray.getDimension(R.styleable.CornorViewLayout_topLeftCornor, <span class="number">0</span>);</span><br><span class="line">        topRightCornor = typedArray.getDimension(R.styleable.CornorViewLayout_topRightCornor, <span class="number">0</span>);</span><br><span class="line">        bottomLeftCornor = typedArray.getDimension(R.styleable.CornorViewLayout_bottomLeftCornor, <span class="number">0</span>);</span><br><span class="line">        bottomRightCornor = typedArray.getDimension(R.styleable.CornorViewLayout_bottomRightCornor, <span class="number">0</span>);</span><br><span class="line">        Log.v(<span class="string">"wangxin555"</span>, <span class="string">"typeValue = "</span> + cornor + <span class="string">" "</span> + topRightCornor + <span class="string">" "</span> + bottomLeftCornor + <span class="string">" "</span> + bottomRightCornor);</span><br><span class="line">        typedArray.recycle();<span class="comment">//别忘了回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        mWidth = getMeasuredWidth();</span><br><span class="line">        mHeight = getMeasuredHeight();</span><br><span class="line">        setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cornor &gt; <span class="number">0F</span>) &#123;</span><br><span class="line">            path.addRoundRect(rectF, cornor, cornor, Path.Direction.CCW);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">float</span>[] radii = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;</span><br><span class="line">                    topLeftCornor, topLeftCornor,</span><br><span class="line">                    topRightCornor, topRightCornor,</span><br><span class="line">                    bottomLeftCornor, bottomLeftCornor,</span><br><span class="line">                    bottomRightCornor, bottomRightCornor</span><br><span class="line">            &#125;;</span><br><span class="line">            path.addRoundRect(rectF, radii, Path.Direction.CCW);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        canvas.clipPath(path);<span class="comment">//裁剪路径</span></span><br><span class="line">        <span class="keyword">super</span>.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.myapplication.CornorViewLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/a3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"280dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cornor</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#952632"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最大的问题就是有锯齿，圆角效果不好。目前没有找到相关的完善方案。</p><p><strong>4、利用CardView实现切圆角:</strong></p><p>CardView是v7包中的组件（ViewGroup），主要用来设置布局的边框为圆角、z轴的偏移量（这个是5.0以后才有的概念，也就是阴影的效果）。这里我们仅仅使用圆角功能。</p><p><code>app:cardCornerRadius=&quot;10dp&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/a5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"280dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardBackgroundColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:cardCornerRadius</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>缺点: 四个角要一起配置，不支持其中若干个角单独配置</p><p><strong>5、利用ViewOutlineProvider实现切圆角:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/a6"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"280dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#999822"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleOutLineProvider</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinearLayout a6 = findViewById(R.id.a6);</span><br><span class="line">        a6.setOutlineProvider(<span class="keyword">new</span> ViewOutlineProvider() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOutline</span><span class="params">(View view, Outline outline)</span> </span>&#123;</span><br><span class="line">                outline.setRoundRect(<span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>, view.getWidth(),view.getHeight()),<span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        a6.setClipToOutline(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
          <category> Notification </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NotificationManagerService注册流程</title>
      <link href="2022/04/10/NotificationManagerService%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B/"/>
      <url>2022/04/10/NotificationManagerService%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h5><p>为了让读者更全面地了解 系统通知服务整体流程，这一篇我们会先简单介绍 <strong>手机是如何在启动的过程中拉起NMS服务的，涉及到 Zygote进程的启动 和 System进程启动；然后介绍 NMS服务的功能实现 以及 如何获取到NMS服务</strong>。</p><p>相关类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="line">frameworks/base/services/java/com/android/server/SystemServer.java</span><br></pre></td></tr></table></figure><p>我们知道（不知道就假装知道吧），手机启动的过程中，<strong>init进程</strong> 是第一个启动的进程,该进程在启动的过程中会去启动一个叫 <code>Zygote</code>的进程，<code>Zygote</code>进程在启动的过程中会去创建一个虚拟机对象，后续其他进程的启动则是直接从<code>Zygote</code>进程fork，从而达到每个进程都拥有一个独立虚拟机的目的，这是题外话了。其中 <strong>System进程</strong> 就是 <code>Zygote</code>进程在启动的过程中fork出来的一个进程，这是一个系统进程，负责在开机的时候启动各种核心系统服务，例如<code>AMS、PMS、NMS</code>等常见的服务。</p><p>下面来看看<code>Zygote</code>是如何一步步启动 NMS服务的吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">boolean</span> startSystemServer = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"start-system-server"</span>.equals(argv[i])) &#123;</span><br><span class="line">                    startSystemServer = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">                Runnable r = forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>ZygoteInit.main</code>函数中的<code>argv</code>数组会带有<code>start-system-server</code>字段，表明<code>Zygote</code>进程需要启动<code>System</code>进程，上面<code>startSystemServer=true</code>，也就是接下来执行的是<code>forkSystemServer</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span></span><br><span class="line">    <span class="comment">// Prepare the arguments and forks for the system server process.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title">forkSystemServer</span><span class="params">(String abiList, String socketName,ZygoteServer zygoteServer)</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        String args[] = &#123;</span><br><span class="line">                <span class="string">"--setuid=1000"</span>,</span><br><span class="line">                <span class="string">"--setgid=1000"</span>,</span><br><span class="line">                <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,"</span></span><br><span class="line">                        + <span class="string">"1024,1032,1065,3001,3002,3003,3006,3007,3009,3010"</span>,</span><br><span class="line">                <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</span><br><span class="line">                <span class="string">"--nice-name=system_server"</span>,</span><br><span class="line">                <span class="string">"--runtime-args"</span>,</span><br><span class="line">                <span class="string">"--target-sdk-version="</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class="line">                <span class="string">"com.android.server.SystemServer"</span>, <span class="comment">// 步骤1：指定 System进程 的入口类为 com.android.server.SystemServer 的 main 方法</span></span><br><span class="line">        &#125;;</span><br><span class="line">        ZygoteArguments parsedArgs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> pid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="comment">// 步骤2：通过 Zygote 去 fork System 进程</span></span><br><span class="line">            pid = Zygote.forkSystemServer(</span><br><span class="line">                    parsedArgs.mUid, parsedArgs.mGid,</span><br><span class="line">                    parsedArgs.mGids,</span><br><span class="line">                    parsedArgs.mRuntimeFlags,</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    parsedArgs.mPermittedCapabilities,</span><br><span class="line">                    parsedArgs.mEffectiveCapabilities);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤3：pid = 0 表示子进程fork成功</span></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">                waitForSecondaryZygote(socketName);</span><br><span class="line">            &#125;</span><br><span class="line">            zygoteServer.closeServerSocket();</span><br><span class="line">            <span class="keyword">return</span> handleSystemServerProcess(parsedArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有三个主要的步骤：</p><ul><li>1.指定<code>com.android.server.SystemServer 的 main函数</code>为 <code>System</code>进程的程序入口</li><li>2.通过 <code>Zygote 去 fork System</code> 进程，并返回一个进程id，我们知道，当fork返回的id为0时表示子进程fork成功，也就是步骤3要执行的</li><li>3.当pid=0时，会执行步骤3中的<code>handleSystemServerProcess</code>函数，该函数会进一步完成<code>System</code>进程的启动工作，往下走的主要工作就是去到native层了，这里就不再跟踪了（不行了）</li></ul><p><strong>System进程的启动：SystemServer的main函数</strong></p><p>上面分析了，<code>Zygote</code>进程启创建了<code>System</code>进程并指定了程序入口为<code>SystemServer.main()</code>，我们接下来看看这个入口函数做了什么事：</p><ul><li>直接调用<code>SystemServer().run()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/services/java/com/android/server/SystemServer.java</span></span><br><span class="line">    <span class="comment">// The main entry point from zygote.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SystemServer().run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>run</code>方法在做好各种准备工作之后，就开始开启各种系统服务，NMS的启动在<code>startOtherServices()</code>函数中执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/services/java/com/android/server/SystemServer.java/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">        <span class="comment">// Start services.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            traceBeginAndSlog(<span class="string">"StartServices"</span>);</span><br><span class="line">            startBootstrapServices();</span><br><span class="line">            startCoreServices();</span><br><span class="line">            startOtherServices();</span><br><span class="line">            SystemServerInitThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过<code>SystemServiceManager.startService()</code>启动NMS服务，<code>SystemServiceManager</code>是一个专门用于<strong>创建、启动以及管理各系统服务生命周期事件的管理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/java/com/android/server/SystemServer.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        mSystemServiceManager.startService(NotificationManagerService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>startService</code>函数的内容很简单，最终直接执行到NMS服务的<code>onStart</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/SystemServiceManager.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startService</span><span class="params">(@NonNull <span class="keyword">final</span> SystemService service)</span> </span>&#123;</span><br><span class="line">        mServices.add(service);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.onStart();</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里，NMS服务的启动流程和启动时机就分析完了，稍微总结下：<strong>NMS服务是一个常驻在System进程中的系统服务，在手机系统启动的过程中被拉起。</strong></p><h5 id="二、NMS服务的功能实现-以及-如何获取到NMS服务"><a href="#二、NMS服务的功能实现-以及-如何获取到NMS服务" class="headerlink" title="二、NMS服务的功能实现 以及 如何获取到NMS服务"></a>二、NMS服务的功能实现 以及 如何获取到NMS服务</h5><p>这一节我们会从框架上来看看NMS服务的大体功能与实现，先简单说明下：</p><ul><li>1.<code>INotificationManager.aidl</code>定义了系统通知服务(NMS)期望暴露给其他客户端的各种接口；</li><li>2.<code>NotificationManagerService</code>实现了<code>INotificationManager.aidl</code>这个接口，并将<code>Binder</code>代理对象注册到了<code>ServiceManager</code>中去，以便其他服务与应用调用，如<code>NotificationManager</code></li></ul><p>相关类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. frameworks/base/core/java/android/app/NotificationManager.java</span><br><span class="line"><span class="number">2</span>. frameworks/base/core/java/android/app/INotificationManager.aidl</span><br><span class="line"><span class="number">3</span>. frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java</span><br></pre></td></tr></table></figure><p>下面开始分析，我们上面讲过，系统在启动NMS服务的时候，调用了 <code>NotificationManagerService.onStart()</code> 函数，这是<strong>系统通知服务的入口</strong>，该函数主要完成了：</p><ul><li>1.<code>NotificationManagerService</code> 中一系列成员变量的赋值(通过<code>init(...)</code>方法)，如<code>AMS、PMS</code>类的代理对象的获取，各种辅助类实例的创建等等</li><li>2.注册各种广播，监听所需状态，如亮灭屏广播、用户切换广播、应用添加删除广播等等</li><li>3.将一个实现了<code>INotificationManager.aidl</code>接口的Binder代理对象<code>mService</code>注册到<code>ServiceManager</code></li></ul><p>上面多次提到<code>INotificationManager.aidl</code>这个接口文件，我们看下这个接口：该文件主要定义了这么几种类型的接口：</p><blockquote><p>/<em>frameworks/base/core/java/android/app/INotificationManager.aidl</em>/</p><ul><li>通知的添加(包括更新)、删除操作，即我们前面讲到的 <code>notify、cancel</code> 等接口的实现，如<code>enqueueNotificationWithTag(...)</code></li><li>通知属性的设置和判断，如是否允许显示某应用的通知、是否允许显示通知圆点(桌面图标右上角上的角标)等,如<code>setShowBadge(String pkg, int uid, boolean showBadge)</code></li><li>通知<code>channel</code>的增删改查，如<code>createNotificationChannels(...)</code></li><li>通知列表的获取如<code>StatusBarNotification[] getActiveNotifications(String callingPkg)</code></li><li>通知状态监听相关接口，如<code>registerListener(in INotificationListener listener, in ComponentName component, int userid)</code></li><li>……</li></ul></blockquote><p>1、2点的内容不展开讲，直接看下NMS的<code>onStart</code>方法即可，这里直接看第3点，来看看<code>INotificationManager.aidl</code>的实现和注册过程：</p><p>NMS 实现 <code>INotificationManager.aidl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java*/</span></span><br><span class="line">    <span class="keyword">final</span> IBinder mService = <span class="keyword">new</span> INotificationManager.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueToast</span><span class="params">(String pkg, ITransientNotification callback, <span class="keyword">int</span> duration, <span class="keyword">int</span> displayId)</span> </span>&#123;......&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将<code>Binder</code>代理对象注册到<code>ServiceManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 各成员变量的初始化 与 注册各种广播监听器</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 注册到ServiceManager</span></span><br><span class="line">        publishBinderService(Context.NOTIFICATION_SERVICE, mService, <span class="comment">/* allowIsolated= */</span> <span class="keyword">false</span>,</span><br><span class="line">                DUMP_FLAG_PRIORITY_CRITICAL | DUMP_FLAG_PRIORITY_NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishBinderService</span><span class="params">(String name, IBinder service,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> allowIsolated, <span class="keyword">int</span> dumpPriority)</span> </span>&#123;</span><br><span class="line">        ServiceManager.addService(name, service, allowIsolated, dumpPriority);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 <code>NOTIFICATION_SERVICE</code> 的值为<code>&quot;notification&quot;</code>， 这样其他服务或应用就可以通过<code>ServiceManager</code>来获取到 <strong>name 为 notification</strong> 的 <code>INotificationManager Binder代理对象</code>了， 从而达到与其交互的目的了，例如我们上面讲到的，开发者操作通知的入口类<code>NotificationManager</code>，look look：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/core/java/android/app/NotificationManager.java*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> INotificationManager sService;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> INotificationManager <span class="title">getService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sService;</span><br><span class="line">        &#125;</span><br><span class="line">        IBinder b = ServiceManager.getService(<span class="string">"notification"</span>);</span><br><span class="line">        sService = INotificationManager.Stub.asInterface(b);</span><br><span class="line">        <span class="keyword">return</span> sService;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>NotificationManager</code>直接通过查询获得<code>ServiceManager</code>中 name 为 notification 的 Binder对象，并通过<code>asInterface</code>方法将这个服务端的<code>Binder</code>对象转换成客户端所需的 AIDL 接口类型的对象，然后保存到成员变量<code>sService</code>中，以供后续调用。</p><p>需要注意的是，<code>ServiceManager</code>中注册的服务是不支持普通应用获取的，我们知道，当我们需要发送通知的时候，发送的入口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">notificationManager.notify(notiTag, notiId, notification);</span><br></pre></td></tr></table></figure><p>这里<code>getSystemService(String name)</code>是<code>Activity</code>的方法，并不是<code>ServiceManager</code>提供的，Android为了避免这些系统服务直接与用户打交道，统一提供了代理类供用户获取服务。</p><p>像<code>NotificationManagerService</code>面向用户的代理类为<code>NotificationManager</code>，<code>ActivityManagerService</code>面向用户的代理类为<code>ActivityManager</code>，这些代理类均被注册在一个叫<code>SystemServiceRegistry</code>的管理类中(代码路径<code>frameworks/base/core/java/android/app/SystemServiceRegistry.java</code>)，当我们调用<code>Activity</code>的<code>getSystemService(String name)</code>方法去获取系统服务时，最终会获取到<code>SystemServiceRegistry</code>中的对应代理类，从而我们就可以利用这些代理类来间接与各种系统服务交互了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
          <category> Notification </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Notification的基本布局和发送流程</title>
      <link href="2022/04/10/Notification%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/"/>
      <url>2022/04/10/Notification%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="一、通知栏界面如下："><a href="#一、通知栏界面如下：" class="headerlink" title="一、通知栏界面如下："></a>一、通知栏界面如下：</h5><p>竖屏：</p><img src="http://wxyy97.com/image/notification_shu.jpg" style="zoom:50%;" /><p>横屏：</p><img src="http://wxyy97.com/image/notification_heng.jpg" style="zoom: 33%;" /><p><strong>1、横屏有个情况是从左边下滑，通知栏从左边下滑，右边和中间同理。</strong></p><p>修改方案：<code>framework/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateVerticalPanelPosition</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mNotificationStackScroller.getWidth() * <span class="number">1.75f</span> &gt; getWidth()) &#123;</span><br><span class="line">           resetHorizontalPanelPosition();</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">float</span> leftMost = mPositionMinSideMargin + mNotificationStackScroller.getWidth() / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">float</span> rightMost = getWidth() - mPositionMinSideMargin</span><br><span class="line">               - mNotificationStackScroller.getWidth() / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">if</span> (Math.abs(x - getWidth() / <span class="number">2</span>) &lt; mNotificationStackScroller.getWidth() / <span class="number">4</span>) &#123;</span><br><span class="line">           x = getWidth() / <span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       x = Math.min(rightMost, Math.max(leftMost, x));</span><br><span class="line">       <span class="keyword">float</span> center =</span><br><span class="line">               mNotificationStackScroller.getLeft() + mNotificationStackScroller.getWidth() / <span class="number">2</span>;</span><br><span class="line">       <span class="comment">//setHorizontalPanelTranslation(x - center);</span></span><br><span class="line">       setHorizontalPanelTranslation(<span class="number">0f</span>);<span class="comment">//mod by wx 横屏下无论从左右中下拉状态栏 都从中间出来</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>大体上就是接收<code>touch</code>事件，获取x坐标、平移，具体流程有时间再分析吧。</p><p><strong>2、整个通知界面布局：</strong></p><p><img src="http://wxyy97.com/image/notification_buju.jpg" alt=""></p><ul><li><p><code>StatusBarWindowView</code>                                               SystemUI的根布局</p></li><li><p><code>NotificationPanelView(notification_panel)</code>         默认隐藏，接收到下拉操作后显示，包含锁屏的一些界面(比如锁屏的时间)</p></li><li><p><code>NotificationsQuickSettingsContainer(notification_container_parent)</code>      俩部分：一是快捷面板(id/qs_frame)，二是通知根布局(id/notification_stack_scroller)</p></li><li><p><code>NotificationStackScrollLayout(notification_stack_scroller)</code>                 通知的根布局</p></li></ul><p><strong>3、关于通知根布局的布局以及部分间距问题：</strong></p><p>（1）在根布局<code>id/notification_stack_scroller</code>里，一个通知即为一个<code>ExpandableNotificationRow</code>，下面是官方介绍：</p><p><code>View representing a notification item - this can be either the individual child notification or the group summary (which contains 1 or more child notifications).</code>表示通知项的视图- 可以是单个子通知，也可以是组摘要（包含一个或多个子通知）。</p><p>（2）每个通知长按后会出现<code>NotificationGuts</code>界面，即上面第一张图中的Android系统界面，使其成为圆角:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">childNeedsClipping</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// add by wx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一张图中给每个通知后面都有轮廓线条，导致后面的四个边角全部凸显出来，方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needsOutline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// add by wx for 去掉通知外形轮廓的那条线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二、Notification"><a href="#二、Notification" class="headerlink" title="二、Notification"></a>二、Notification</h5><h6 id="1、使用：Notification-Rain-G"><a href="#1、使用：Notification-Rain-G" class="headerlink" title="1、使用：Notification | Rain.G"></a><strong>1、使用</strong>：<a href="http://wxyy97.com/2021/04/22/Notification/">Notification | Rain.G</a></h6><h6 id="2、实现原理："><a href="#2、实现原理：" class="headerlink" title="2、实现原理："></a>2、实现原理：</h6><p><a href="https://blog.csdn.net/zhao5214319/article/details/98848708?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-98848708.pc_agg_new_rank&utm_term=PostNotificationRunnable&spm=1000.2123.3001.4430" target="_blank" rel="noopener">Android 发送通知Framework</a></p><blockquote><p>服务端(System进程)：NM发送 -&gt; NMS处理 -&gt; NMS 将通知post给监听器 -&gt;<br>客户端(SystemUI)：Sysui接收 -&gt; 根据通知类型加载对应通知布局 -&gt; 显示</p></blockquote><p><strong>（1）NotificationManager 预处理通知</strong></p><p>从上面的使用可知，最后发送是通过<code>NotificationManager.notify()</code>发送的，定位到<code>frameworks/base/core/java/android/app/NotificationManager.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAsUser</span><span class="params">(String tag, <span class="keyword">int</span> id, Notification notification, UserHandle user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        INotificationManager service = getService();</span><br><span class="line">        String pkg = mContext.getPackageName();</span><br><span class="line">        <span class="keyword">if</span>(pkg.contains(<span class="string">".qti"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (localLOGV) Log.v(TAG, pkg + <span class="string">": notify("</span> + id + <span class="string">", "</span> + notification + <span class="string">")"</span>);</span><br><span class="line">            service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">                    fixNotification(notification), user.getIdentifier());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Notification <span class="title">fixNotification</span><span class="params">(Notification notification)</span> </span>&#123;</span><br><span class="line">        String pkg = mContext.getPackageName();</span><br><span class="line">        <span class="comment">// Fix the notification as best we can.</span></span><br><span class="line">        Notification.addFieldsFromContext(mContext, notification);</span><br><span class="line">        <span class="comment">//修正sound</span></span><br><span class="line">        <span class="keyword">if</span> (notification.sound != <span class="keyword">null</span>) &#123;</span><br><span class="line">            notification.sound = notification.sound.getCanonicalUri();</span><br><span class="line">            <span class="keyword">if</span> (StrictMode.vmFileUriExposureEnabled()) &#123;</span><br><span class="line">                notification.sound.checkFileUriExposed(<span class="string">"Notification.sound"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//兼容旧版本smallIcon设置接口</span></span><br><span class="line">        fixLegacySmallIcon(notification, pkg);</span><br><span class="line">        <span class="comment">//小图标异常处理</span></span><br><span class="line">        <span class="keyword">if</span> (mContext.getApplicationInfo().targetSdkVersion &gt; Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (notification.getSmallIcon() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid notification (no valid small icon): "</span></span><br><span class="line">                        + notification);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//裁剪通知中包含的图片的大小,避免用户设置的图片太大</span></span><br><span class="line">        notification.reduceImageSizes(mContext);</span><br><span class="line">        <span class="comment">//低内存设备兼容</span></span><br><span class="line">        ActivityManager am = (ActivityManager) mContext.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">boolean</span> isLowRam = am.isLowRamDevice();</span><br><span class="line">        <span class="keyword">return</span> Builder.maybeCloneStrippedForDelivery(notification, isLowRam, mContext);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>fixNotification</code>方法对通知做了简单修正，如 smallIcon 处理，图片资源裁剪处理，低内存兼容等，说明下步骤1：<strong>在SDK版本大于22之后，Android强制要求用户设置 smallIcon 了，否则会报异常，所以我们发送通知的时候，smallIcon必须设置。</strong></p><p>做完简单修正处理后，<code>NotificationManager</code>就直接将流程交给NMS了，接下来看NMS的处理流程。</p><p><strong>（2）入列预处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationInternal</span><span class="params">(<span class="keyword">final</span> String pkg, <span class="keyword">final</span> String opPkg, <span class="keyword">final</span> <span class="keyword">int</span> callingUid,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> <span class="keyword">int</span> callingPid, <span class="keyword">final</span> String tag, <span class="keyword">final</span> <span class="keyword">int</span> id, <span class="keyword">final</span> Notification notification,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> incomingUserId)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> userId = ActivityManager.handleIncomingUser(callingPid,</span><br><span class="line">               callingUid, incomingUserId, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"enqueueNotification"</span>, pkg);</span><br><span class="line">       <span class="keyword">final</span> UserHandle user = UserHandle.of(userId);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Can throw a SecurityException if the calling uid doesn't have permission to post</span></span><br><span class="line">       <span class="comment">// as "pkg"</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> notificationUid = resolveNotificationUid(opPkg, pkg, callingUid, userId);</span><br><span class="line"></span><br><span class="line">       checkRestrictedCategories(notification);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Fix the notification as best we can.</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fixNotification(notification, pkg, userId);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">           Slog.e(TAG, <span class="string">"Cannot create a context for sending app"</span>, e);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mUsageStats.registerEnqueuedByApp(pkg);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// setup local book-keeping</span></span><br><span class="line">       String channelId = notification.getChannelId();</span><br><span class="line">       <span class="keyword">if</span> (mIsTelevision &amp;&amp; (<span class="keyword">new</span> Notification.TvExtender(notification)).getChannelId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           channelId = (<span class="keyword">new</span> Notification.TvExtender(notification)).getChannelId();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//Android 8.0之后不设置channel的通知是无法发送的，源码就是在这里做的限制</span></span><br><span class="line">       <span class="keyword">final</span> NotificationChannel channel = mPreferencesHelper.getNotificationChannel(pkg,</span><br><span class="line">               notificationUid, channelId, <span class="keyword">false</span> <span class="comment">/* includeDeleted */</span>);</span><br><span class="line">       <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> String noChannelStr = <span class="string">"No Channel found for "</span></span><br><span class="line">                   + <span class="string">"pkg="</span> + pkg</span><br><span class="line">                   + <span class="string">", channelId="</span> + channelId</span><br><span class="line">                   + <span class="string">", id="</span> + id</span><br><span class="line">                   + <span class="string">", tag="</span> + tag</span><br><span class="line">                   + <span class="string">", opPkg="</span> + opPkg</span><br><span class="line">                   + <span class="string">", callingUid="</span> + callingUid</span><br><span class="line">                   + <span class="string">", userId="</span> + userId</span><br><span class="line">                   + <span class="string">", incomingUserId="</span> + incomingUserId</span><br><span class="line">                   + <span class="string">", notificationUid="</span> + notificationUid</span><br><span class="line">                   + <span class="string">", notification="</span> + notification;</span><br><span class="line">           Slog.e(TAG, noChannelStr);</span><br><span class="line">           <span class="keyword">boolean</span> appNotificationsOff = mPreferencesHelper.getImportance(pkg, notificationUid)</span><br><span class="line">                   == NotificationManager.IMPORTANCE_NONE;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!appNotificationsOff) &#123;</span><br><span class="line">               doChannelWarningToast(<span class="string">"Developer warning for package \""</span> + pkg + <span class="string">"\"\n"</span> +</span><br><span class="line">                       <span class="string">"Failed to post notification on channel \""</span> + channelId + <span class="string">"\"\n"</span> +</span><br><span class="line">                       <span class="string">"See log for more details"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//面向客户端的`Notification`的包装类，包含部分信息</span></span><br><span class="line">       <span class="keyword">final</span> StatusBarNotification n = <span class="keyword">new</span> StatusBarNotification(</span><br><span class="line">               pkg, opPkg, id, tag, notificationUid, callingPid, notification,</span><br><span class="line">               user, <span class="keyword">null</span>, System.currentTimeMillis());</span><br><span class="line">       <span class="comment">//面向服务端的`Notification`的包装类，包含全部信息</span></span><br><span class="line">       <span class="keyword">final</span> NotificationRecord r = <span class="keyword">new</span> NotificationRecord(getContext(), n, channel);</span><br><span class="line">       r.setIsAppImportanceLocked(mPreferencesHelper.getIsAppImportanceLocked(pkg, callingUid));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//前台服务channel处理</span></span><br><span class="line">       <span class="keyword">if</span> ((notification.flags &amp; Notification.FLAG_FOREGROUND_SERVICE) != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">boolean</span> fgServiceShown = channel.isFgServiceShown();</span><br><span class="line">           <span class="keyword">if</span> (((channel.getUserLockedFields() &amp; NotificationChannel.USER_LOCKED_IMPORTANCE) == <span class="number">0</span></span><br><span class="line">                       || !fgServiceShown)</span><br><span class="line">                   &amp;&amp; (r.getImportance() == IMPORTANCE_MIN</span><br><span class="line">                           || r.getImportance() == IMPORTANCE_NONE)) &#123;</span><br><span class="line">               <span class="comment">// Increase the importance of foreground service notifications unless the user had</span></span><br><span class="line">               <span class="comment">// an opinion otherwise (and the channel hasn't yet shown a fg service).</span></span><br><span class="line">               <span class="keyword">if</span> (TextUtils.isEmpty(channelId)</span><br><span class="line">                       || NotificationChannel.DEFAULT_CHANNEL_ID.equals(channelId)) &#123;</span><br><span class="line">                   r.setSystemImportance(IMPORTANCE_LOW);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   channel.setImportance(IMPORTANCE_LOW);</span><br><span class="line">                   r.setSystemImportance(IMPORTANCE_LOW);</span><br><span class="line">                   <span class="keyword">if</span> (!fgServiceShown) &#123;</span><br><span class="line">                       channel.unlockFields(NotificationChannel.USER_LOCKED_IMPORTANCE);</span><br><span class="line">                       channel.setFgServiceShown(<span class="keyword">true</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   mPreferencesHelper.updateNotificationChannel(</span><br><span class="line">                           pkg, notificationUid, channel, <span class="keyword">false</span>);</span><br><span class="line">                   r.updateNotificationChannel(channel);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!fgServiceShown &amp;&amp; !TextUtils.isEmpty(channelId)</span><br><span class="line">                   &amp;&amp; !NotificationChannel.DEFAULT_CHANNEL_ID.equals(channelId)) &#123;</span><br><span class="line">               channel.setFgServiceShown(<span class="keyword">true</span>);</span><br><span class="line">               r.updateNotificationChannel(channel);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//检查通知发送速率、数量(最多25个)、Snoozed是否可以发出去</span></span><br><span class="line">       <span class="comment">//当用户在设置中设置了不允许显示某应用的通知(blocked)时,不再发送</span></span><br><span class="line">       <span class="keyword">if</span> (!checkDisqualifyingFeatures(userId, notificationUid, id, tag, r,</span><br><span class="line">               r.sbn.getOverrideGroupKey() != <span class="keyword">null</span>)) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Whitelist pending intents.</span></span><br><span class="line">       <span class="keyword">if</span> (notification.allPendingIntents != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> intentCount = notification.allPendingIntents.size();</span><br><span class="line">           <span class="keyword">if</span> (intentCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">final</span> ActivityManagerInternal am = LocalServices</span><br><span class="line">                       .getService(ActivityManagerInternal<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">               <span class="keyword">final</span> <span class="keyword">long</span> duration = LocalServices.getService(</span><br><span class="line">                       DeviceIdleController.LocalService<span class="class">.<span class="keyword">class</span>).<span class="title">getNotificationWhitelistDuration</span>()</span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intentCount; i++) &#123;</span><br><span class="line">                   PendingIntent pendingIntent = notification.allPendingIntents.valueAt(i);</span><br><span class="line">                   <span class="keyword">if</span> (pendingIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       am.setPendingIntentWhitelistDuration(pendingIntent.getTarget(),</span><br><span class="line">                               WHITELIST_TOKEN, duration);</span><br><span class="line">                       am.setPendingIntentAllowBgActivityStarts(pendingIntent.getTarget(),</span><br><span class="line">                               WHITELIST_TOKEN, (FLAG_ACTIVITY_SENDER | FLAG_BROADCAST_SENDER</span><br><span class="line">                                       | FLAG_SERVICE_SENDER));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mHandler.post(<span class="keyword">new</span> EnqueueNotificationRunnable(userId, r));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><code>StatusBarNotification</code>是一个<strong>面向客户端的<code>Notification</code>的包装类</strong>，仅包含用户需要知道的通知相关的信息，如通知包名、id、key等信息，最终NMS将新通知回调给监听者的时候，给客户端的就是该对象</li><li><code>NotificationRecord</code>是<strong>面向服务端的<code>Notification</code>的包装类</strong>，除了持有<code>StatusBarNotification</code>实例外，还封装了各种通知相关的信息，如<code>channel、sound(通知铃声)、vibration(震动效果)</code>等等，这些信息在服务端处理通知的时候需要用到，但客户端并不需要关心这些</li></ul><p>通知入列，将通知发送流程交给<code>EnqueueNotificationRunnable</code></p><p><strong>先解释几个概念：</strong></p><ol><li>下文会出现 <strong>旧通知 和 新通知</strong> 这两个说法，指的是两条”相同”的通知，这里的相同指的是<code>StatusBarNotification.key</code>相同，NMS中维护了一个<code>mNotificationsByKey</code>数据集合，该集合以<code>StatusBarNotification.key</code>为key，以<code>NotificationRecord</code>为value，维护着当前的通知列表，其中key的构造是在<code>StatusBarNotification</code>的构造函数中完成的，构造过程如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sbnKey = user.getIdentifier() + <span class="string">"|"</span> + pkg + <span class="string">"|"</span> + id + <span class="string">"|"</span> + tag + <span class="string">"|"</span> + uid;</span><br><span class="line">    <span class="keyword">if</span> (overrideGroupKey != <span class="keyword">null</span> &amp;&amp; getNotification().isGroupSummary()) &#123;</span><br><span class="line">        sbnKey = sbnKey + <span class="string">"|"</span> + overrideGroupKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sbnKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是我们前后以相同的key发送一条通知时，系统根据这个key就可以从<code>mNotificationsByKey</code>中获取到旧通知，例如更新类型的通知(微信个人的消息，音乐软件的通知等)；而新通知自然就是新来的这条要更新的通知了。</p><ol start="2"><li>NMS维护了几个主要的数据结构，分别用在不同的场景下，先说明下，后续阅读源码的时候如果困惑就回头再来看看这个总结吧：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerSevice.java*/</span></span><br><span class="line"><span class="comment">// 服务端维护的 已排序 的通知</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;NotificationRecord&gt; mNotificationList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 服务端维护的 未排序 的通知</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, NotificationRecord&gt; mNotificationsByKey = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"><span class="comment">//  "入列通知"，通知入列的时候被记录，当某通知成功发送后则会被从该集合中移除，所以最终该集合记录的是所有入列成功但发送不成功的通知</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;NotificationRecord&gt; mEnqueuedNotifications = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 前面我们说过，当应用未主动为通知设置组别时，系统也会去做这件事，该集合记录的就是这些系统成组的父通知，</span></span><br><span class="line"><span class="comment">// 也就是每次系统帮某用户的某个应用创建了一条父通知，则该父通知会被记录进该集合，</span></span><br><span class="line"><span class="comment">// key - value 为：ArrayMap&lt;userId, ArrayMap&lt;pkg, summarySbnKey&gt;&gt;</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;Integer, ArrayMap&lt;String, String&gt;&gt; mAutobundledSummaries = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 服务端根据groupKey，维护着所有用户主动成组的父通知，主要在`EnqueueNotificationRunnable`中处理分组通知的时候使用</span></span><br><span class="line">    <span class="keyword">final</span> ArrayMap&lt;String, NotificationRecord&gt; mSummaryByGroupKey = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br></pre></td></tr></table></figure><ol start="3"><li>分组的概念: Android允许应用主动将发送出来的多条通知以组的形式显示在一起,并通过<code>goupKey</code>区分组别，这样可以避免同个应用的多条通知占据了通知面板的大量显示空间，同时，<strong>如果应用未主动将多条通知成组，则系统也会去做这个事情</strong>，例如Android Q上面在同个应用的通知数达到4条的时候就会将其成组显示。</li></ol><p><strong>（3）通知入列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">EnqueueNotificationRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> NotificationRecord r;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> userId;</span><br><span class="line">        ...</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">                <span class="comment">//存到集合，后续会用到</span></span><br><span class="line">                mEnqueuedNotifications.add(r);</span><br><span class="line">                <span class="comment">//当用户设置了 Builder.setTimeoutAfter(long durationMs) 则会在这里做处理</span></span><br><span class="line">                scheduleTimeoutLocked(r);</span><br><span class="line">                <span class="comment">//从集合mNotificationsByKey中取出旧通知</span></span><br><span class="line">                <span class="keyword">final</span> StatusBarNotification n = r.sbn;</span><br><span class="line">                <span class="keyword">if</span> (DBG) Slog.d(TAG, <span class="string">"EnqueueNotificationRunnable.run for: "</span> + n.getKey());</span><br><span class="line">                NotificationRecord old = mNotificationsByKey.get(n.getKey());</span><br><span class="line">                <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Retain ranking information from previous record</span></span><br><span class="line">                    r.copyRankingInformation(old);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> callingUid = n.getUid();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> callingPid = n.getInitialPid();</span><br><span class="line">                <span class="keyword">final</span> Notification notification = n.getNotification();</span><br><span class="line">                <span class="keyword">final</span> String pkg = n.getPackageName();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> id = n.getId();</span><br><span class="line">                <span class="keyword">final</span> String tag = n.getTag();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// We need to fix the notification up a little for bubbles</span></span><br><span class="line">                flagNotificationForBubbles(r, pkg, callingUid, old);<span class="comment">//更新通知是不是气泡的flag</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Handle grouped notifications and bail out early if we</span></span><br><span class="line">                <span class="comment">// can to avoid extracting signals.</span></span><br><span class="line">                <span class="comment">// 分组处理</span></span><br><span class="line">                handleGroupedNotificationLocked(r, old, callingUid, callingPid);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// if this is a group child, unsnooze parent summary</span></span><br><span class="line">                <span class="keyword">if</span> (n.isGroup() &amp;&amp; notification.isGroupChild()) &#123;</span><br><span class="line">                    mSnoozeHelper.repostGroupSummary(pkg, r.getUserId(), n.getGroupKey());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// This conditional is a dirty hack to limit the logging done on</span></span><br><span class="line">                <span class="comment">//     behalf of the download manager without affecting other apps.</span></span><br><span class="line">                <span class="keyword">if</span> (!pkg.equals(<span class="string">"com.android.providers.downloads"</span>)</span><br><span class="line">                        || Log.isLoggable(<span class="string">"DownloadManager"</span>, Log.VERBOSE)) &#123;</span><br><span class="line">                    <span class="keyword">int</span> enqueueStatus = EVENTLOG_ENQUEUE_STATUS_NEW;</span><br><span class="line">                    <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        enqueueStatus = EVENTLOG_ENQUEUE_STATUS_UPDATE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    EventLogTags.writeNotificationEnqueue(callingUid, callingPid,</span><br><span class="line">                            pkg, id, tag, userId, notification.toString(),</span><br><span class="line">                            enqueueStatus);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// tell the assistant service about the notification</span></span><br><span class="line">                <span class="comment">// post通知</span></span><br><span class="line">                <span class="keyword">if</span> (mAssistants.isEnabled()) &#123;</span><br><span class="line">                    mAssistants.onNotificationEnqueuedLocked(r);</span><br><span class="line">                    mHandler.postDelayed(<span class="keyword">new</span> PostNotificationRunnable(r.getKey()),</span><br><span class="line">                            DELAY_FOR_ASSISTANT_TIME);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mHandler.post(<span class="keyword">new</span> PostNotificationRunnable(r.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleGroupedNotificationLocked</span><span class="params">(NotificationRecord r, NotificationRecord old,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> callingUid, <span class="keyword">int</span> callingPid)</span> </span>&#123;</span><br><span class="line">        StatusBarNotification sbn = r.sbn;</span><br><span class="line">        Notification n = sbn.getNotification();</span><br><span class="line">        <span class="comment">// 步骤1</span></span><br><span class="line">        <span class="keyword">if</span> (n.isGroupSummary() &amp;&amp; !sbn.isAppGroup())  &#123;</span><br><span class="line">            <span class="comment">// notifications without a group shouldn't be a summary, otherwise autobundling can</span></span><br><span class="line">            <span class="comment">// lead to bugs</span></span><br><span class="line">            n.flags &amp;= ~Notification.FLAG_GROUP_SUMMARY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String group = sbn.getGroupKey();</span><br><span class="line">        <span class="keyword">boolean</span> isSummary = n.isGroupSummary();</span><br><span class="line"></span><br><span class="line">        Notification oldN = old != <span class="keyword">null</span> ? old.sbn.getNotification() : <span class="keyword">null</span>;</span><br><span class="line">        String oldGroup = old != <span class="keyword">null</span> ? old.sbn.getGroupKey() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> oldIsSummary = old != <span class="keyword">null</span> &amp;&amp; oldN.isGroupSummary();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤2</span></span><br><span class="line">        <span class="keyword">if</span> (oldIsSummary) &#123;</span><br><span class="line">            NotificationRecord removedSummary = mSummaryByGroupKey.remove(oldGroup);</span><br><span class="line">            <span class="keyword">if</span> (removedSummary != old) &#123;</span><br><span class="line">                String removedKey =</span><br><span class="line">                        removedSummary != <span class="keyword">null</span> ? removedSummary.getKey() : <span class="string">"&lt;null&gt;"</span>;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Removed summary didn't match old notification: old="</span> + old.getKey() +</span><br><span class="line">                        <span class="string">", removed="</span> + removedKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isSummary) &#123;</span><br><span class="line">            mSummaryByGroupKey.put(group, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clear out group children of the old notification if the update</span></span><br><span class="line">        <span class="comment">// causes the group summary to go away. This happens when the old</span></span><br><span class="line">        <span class="comment">// notification was a summary and the new one isn't, or when the old</span></span><br><span class="line">        <span class="comment">// notification was a summary and its group key changed.</span></span><br><span class="line">        <span class="comment">//// 步骤3 </span></span><br><span class="line">        <span class="keyword">if</span> (oldIsSummary &amp;&amp; (!isSummary || !oldGroup.equals(group))) &#123;</span><br><span class="line">            cancelGroupChildrenLocked(old, callingUid, callingPid, <span class="keyword">null</span>, <span class="keyword">false</span> <span class="comment">/* sendDelete */</span>,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤1：修正处理，当用户调用<code>Builder setGroupSummary(boolean isGroupSummary)</code>设置了<code>Notification.FLAG_GROUP_SUMMARY</code>这个flag,但是没调用 <code>Builder.setGroup(String groupKey)</code>设置对应的<code>groupKey</code>,则<code>Notification.FLAG_GROUP_SUMMARY</code>这个flag会被去掉,否则会导致后续系统的自动成组出错。这个处理纠正了一些用户的错误操作，例如用户希望发送一条父通知，但是只调用了<code>Builder setGroupSummary(boolean isGroupSummary)</code>而忘了设置相应的<code>groupKey</code>；</li><li>步骤2：如果必要的话更新集合<code>mSummaryByGroupKey</code>，这个集合我们前面总结过，忘记的回头看吧</li><li>步骤3：如果旧通知是一条父通知,新通知变成了非父通知;或者旧通知新通知均是父通知,但是<code>group key</code>已经发生了变化,则原来父通知下的所有子通知会被移除</li></ul><p>可以看到，<code>EnqueueNotificationRunnable</code>只是对通知做进一步的处理和纠偏，重点处理了<strong>通知成组相关的内容</strong>,该<code>Runnable</code>的最后是将通知发送流程进一步交给了<code>PostNotificationRunnable</code>去处理，这个<code>Runnable</code>真正做了通知在服务端的发送(post)操作。</p><p><strong>（4）通知Post流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">PostNotificationRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line"></span><br><span class="line">        PostNotificationRunnable(String key) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    NotificationRecord r = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">int</span> N = mEnqueuedNotifications.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> NotificationRecord enqueued = mEnqueuedNotifications.get(i);</span><br><span class="line">                        <span class="keyword">if</span> (Objects.equals(key, enqueued.getKey())) &#123;</span><br><span class="line">                            r = enqueued;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤1</span></span><br><span class="line">                    <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Slog.i(TAG, <span class="string">"Cannot find enqueued record for key: "</span> + key);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤2</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlocked(r)) &#123;</span><br><span class="line">                        Slog.i(TAG, <span class="string">"notification blocked by assistant request"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤3</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> isPackageSuspended =</span><br><span class="line">                            isPackagePausedOrSuspended(r.sbn.getPackageName(), r.getUid());</span><br><span class="line">                    r.setHidden(isPackageSuspended);</span><br><span class="line">                    <span class="keyword">if</span> (isPackageSuspended) &#123;</span><br><span class="line">                        mUsageStats.registerSuspendedByAdmin(r);</span><br><span class="line">                    &#125;</span><br><span class="line">                    NotificationRecord old = mNotificationsByKey.get(key);</span><br><span class="line">                    <span class="keyword">final</span> StatusBarNotification n = r.sbn;</span><br><span class="line">                    <span class="keyword">final</span> Notification notification = n.getNotification();</span><br><span class="line">                    <span class="keyword">int</span> index = indexOfNotificationLocked(n.getKey());</span><br><span class="line">                    <span class="comment">// 步骤4</span></span><br><span class="line">                    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        mNotificationList.add(r);</span><br><span class="line">                        mUsageStats.registerPostedByApp(r);</span><br><span class="line">                        r.setInterruptive(isVisuallyInterruptive(<span class="keyword">null</span>, r));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        old = mNotificationList.get(index);</span><br><span class="line">                        mNotificationList.set(index, r);</span><br><span class="line">                        mUsageStats.registerUpdatedByApp(r, old);</span><br><span class="line">                        <span class="comment">// Make sure we don't lose the foreground service state.</span></span><br><span class="line">                        <span class="comment">// 避免通知更新过程中前台服务标志丢失</span></span><br><span class="line">                        notification.flags |=</span><br><span class="line">                                old.getNotification().flags &amp; FLAG_FOREGROUND_SERVICE;</span><br><span class="line">                        <span class="comment">//记录通知是更新类型的,后续决定是否播放通知声音、震动等提醒的时候会用到</span></span><br><span class="line">                        r.isUpdate = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> isInterruptive = isVisuallyInterruptive(old, r);</span><br><span class="line">                        r.setTextChanged(isInterruptive);</span><br><span class="line">                        r.setInterruptive(isInterruptive);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤5 记录 未排序 通知</span></span><br><span class="line">                    mNotificationsByKey.put(n.getKey(), r);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Ensure if this is a foreground service that the proper additional</span></span><br><span class="line">                    <span class="comment">// flags are set.</span></span><br><span class="line">                    <span class="comment">// 步骤6</span></span><br><span class="line">                    <span class="keyword">if</span> ((notification.flags &amp; FLAG_FOREGROUND_SERVICE) != <span class="number">0</span>) &#123;</span><br><span class="line">                        notification.flags |= FLAG_ONGOING_EVENT</span><br><span class="line">                                | FLAG_NO_CLEAR;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤7</span></span><br><span class="line">                    mRankingHelper.extractSignals(r);</span><br><span class="line">                    <span class="comment">// 步骤8</span></span><br><span class="line">                    mRankingHelper.sort(mNotificationList);</span><br><span class="line">                    <span class="comment">// 步骤9</span></span><br><span class="line">                    <span class="keyword">if</span> (!r.isHidden()) &#123;</span><br><span class="line">                        buzzBeepBlinkLocked(r);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 步骤10</span></span><br><span class="line">                    <span class="keyword">if</span> (notification.getSmallIcon() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        StatusBarNotification oldSbn = (old != <span class="keyword">null</span>) ? old.sbn : <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 步骤10.2</span></span><br><span class="line">                        mListeners.notifyPostedLocked(r, old);</span><br><span class="line">                        <span class="keyword">if</span> ((oldSbn == <span class="keyword">null</span> || !Objects.equals(oldSbn.getGroup(), n.getGroup()))</span><br><span class="line">                                &amp;&amp; !isCritical(r)) &#123;</span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="comment">// 步骤10.3</span></span><br><span class="line">                                    mGroupHelper.onNotificationPosted(</span><br><span class="line">                                            n, hasAutoGroupSummaryLocked(n));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 步骤10.1</span></span><br><span class="line">                        Slog.e(TAG, <span class="string">"Not posting notification without small icon: "</span> + notification);</span><br><span class="line">                        <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; !old.isCanceled) &#123;</span><br><span class="line">                            mListeners.notifyRemovedLocked(r,</span><br><span class="line">                                    NotificationListenerService.REASON_ERROR, r.getStats());</span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    mGroupHelper.onNotificationRemoved(n);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// ATTENTION: in a future release we will bail out here</span></span><br><span class="line">                        <span class="comment">// so that we do not play sounds, show lights, etc. for invalid</span></span><br><span class="line">                        <span class="comment">// notifications</span></span><br><span class="line">                        Slog.e(TAG, <span class="string">"WARNING: In a future release this will crash the app: "</span></span><br><span class="line">                                + n.getPackageName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    maybeRecordInterruptionLocked(r);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 将前面入列的通知从 mEnqueuedNotifications 移除，</span></span><br><span class="line">                    <span class="comment">// 所以最终该集合记录的是所有入列成功但发送不成功的通知</span></span><br><span class="line">                    <span class="keyword">int</span> N = mEnqueuedNotifications.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> NotificationRecord enqueued = mEnqueuedNotifications.get(i);</span><br><span class="line">                        <span class="keyword">if</span> (Objects.equals(key, enqueued.getKey())) &#123;</span><br><span class="line">                            mEnqueuedNotifications.remove(i);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1 </span></span><br><span class="line"><span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123; <span class="keyword">return</span>; &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤1：若通知已入列但是没走到这里的时候就被取消了，则停止发送处理，因为存在通知处理一半就被取消的情况，而取消通知时会从<code>mEnqueuedNotifications</code>将通知移除，所以将入列期间的通知存在<code>mEnqueuedNotifications</code>中可以让我们在处理通知的不同阶段去检查通知是否已经被移除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤2</span></span><br><span class="line"><span class="keyword">if</span> (isBlocked(r)) &#123; <span class="keyword">return</span>; &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤2：前面 <code>enqueueNotificationInternal</code> 已经做过一次 blocked 检查,这里再次检查是避免在中间处理过程中 blocked 属性发生了改变，所以整个通知发送过程中存在两次 blocked 状态检查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤3：</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isPackageSuspended = isPackagePausedOrSuspended(r.sbn.getPackageName(), r.getUid());</span><br><span class="line">r.setHidden(isPackageSuspended);</span><br></pre></td></tr></table></figure><ul><li>步骤3：该应用是否被系统限制了,是的话hidden为true,这个属性在后面决定是否播放通知声音、震动等提醒的时候会用到</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">NotificationRecord old = mNotificationsByKey.get(key);</span><br><span class="line"><span class="keyword">final</span> StatusBarNotification n = r.sbn;</span><br><span class="line"><span class="keyword">final</span> Notification notification = n.getNotification();</span><br><span class="line"><span class="keyword">int</span> index = indexOfNotificationLocked(n.getKey());</span><br><span class="line"><span class="comment">// 步骤4</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    mNotificationList.add(r);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    old = mNotificationList.get(index);</span><br><span class="line">    mNotificationList.set(index, r);</span><br><span class="line">    <span class="comment">// 避免通知更新过程中前台服务标志丢失</span></span><br><span class="line">    notification.flags |=</span><br><span class="line">    old.getNotification().flags &amp; FLAG_FOREGROUND_SERVICE;</span><br><span class="line">    <span class="comment">// 记录通知是更新类型的,后续决定是否播放通知声音、震动等提醒的时候会用到</span></span><br><span class="line">    r.isUpdate = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>步骤4：前面总结过，<code>mNotificationList</code>是存储 已排序 的通知，这里判断新来的通知是不是更新类型的，不是的话就直接add进<code>mNotificationList</code>，是的话则会将旧的通知替换掉，排序不变</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤5 记录 未排序 通知</span></span><br><span class="line">mNotificationsByKey.put(n.getKey(), r);</span><br></pre></td></tr></table></figure><ul><li>步骤5：将即将发送的通知存进集合<code>mNotificationsByKey</code>，这也是为什么前面我们可以通过<code>mNotificationsByKey</code>获取到某通知是否存在旧通知的原因</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤6</span></span><br><span class="line"><span class="keyword">if</span> ((notification.flags &amp; FLAG_FOREGROUND_SERVICE) != <span class="number">0</span>) &#123; </span><br><span class="line">    notification.flags |= FLAG_ONGOING_EVENT | FLAG_NO_CLEAR; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>步骤6：<strong>前台服务通知是强制常驻通知面板的</strong>，不管你发送的时候是否设置了相关的常驻标志（<code>FLAG_ONGOING_EVENT / FLAG_NO_CLEAR</code>），系统都会帮你加上</li></ul><p><strong>通知排序预处理:</strong></p><p>这一步是在<strong>对通知进行排序前利用各种规则更新通知的各种属性</strong>， 这里涉及到几个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/services/core/java/com/android/server/notification/RankingConfig.java</span><br><span class="line">frameworks/base/services/core/java/com/android/server/notification/PreferencesHelper.java</span><br><span class="line"></span><br><span class="line">frameworks/base/services/core/java/com/android/server/notification/NotificationChannelExtractor.java</span><br><span class="line">frameworks/base/services/core/java/com/android/server/notification/BadgeExtractor.java</span><br><span class="line">frameworks/base/services/core/java/com/android/server/notification/ZenModeExtractor.java</span><br><span class="line">frameworks/base/services/core/java/com/android/server/notification/XXXExtractor.java</span><br></pre></td></tr></table></figure><p><code>RankingConfig</code>，接口类，定义了各种通知属性的操作接口，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RankingConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setImportance</span><span class="params">(String packageName, <span class="keyword">int</span> uid, <span class="keyword">int</span> importance)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(String packageName, <span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setShowBadge</span><span class="params">(String packageName, <span class="keyword">int</span> uid, <span class="keyword">boolean</span> showBadge)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">createNotificationChannel</span><span class="params">(String pkg, <span class="keyword">int</span> uid, NotificationChannel channel,<span class="keyword">boolean</span> fromTargetApp, <span class="keyword">boolean</span> hasDndAccess)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateNotificationChannel</span><span class="params">(String pkg, <span class="keyword">int</span> uid, NotificationChannel channel, <span class="keyword">boolean</span> fromUser)</span></span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而接口的实现类为<code>PreferencesHelper</code>，我们挑两个来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/PreferencesHelper.java*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canShowBadge</span><span class="params">(String packageName, <span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackagePreferences) &#123;</span><br><span class="line">            <span class="keyword">return</span> getOrCreatePackagePreferencesLocked(packageName, uid).showBadge;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShowBadge</span><span class="params">(String packageName, <span class="keyword">int</span> uid, <span class="keyword">boolean</span> showBadge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackagePreferences) &#123;</span><br><span class="line">            getOrCreatePackagePreferencesLocked(packageName, uid).showBadge = showBadge;</span><br><span class="line">        &#125;</span><br><span class="line">        updateConfig();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>badge</code>表示通知圆点，也就是应用桌面图标右上角上那个 告诉你该应用来通知了的小圆点，当我们在设置中设置某应用的圆点开关的时候，请求会被从 <strong>设置 跨应用发送到 NMS</strong>，NMS则调用 <code>PreferencesHelper.setShowBadge(String packageName, int uid, boolean showBadge)</code>来执行该更新事件，更新结果保存在<code>PreferencesHelper</code>中一个叫<code>PackagePreferences</code>的数据结构中，并在更新完成的时候调用<code>updateConfig</code>去更新配置，以便我们后续使用<code>RankingConfig</code>时能读到最新的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/PreferencesHelper$PackagePreferences.java*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PackagePreferences</span> </span>&#123;</span><br><span class="line">        String pkg; <span class="comment">// 包名</span></span><br><span class="line">        <span class="keyword">int</span> uid = UNKNOWN_UID;</span><br><span class="line">        <span class="keyword">int</span> importance = DEFAULT_IMPORTANCE; <span class="comment">// 通知重要程度</span></span><br><span class="line">        <span class="keyword">int</span> priority = DEFAULT_PRIORITY; <span class="comment">// 通知优先级</span></span><br><span class="line">        <span class="keyword">int</span> visibility = DEFAULT_VISIBILITY; <span class="comment">// 通知可见性</span></span><br><span class="line">        <span class="keyword">boolean</span> showBadge = DEFAULT_SHOW_BADGE; <span class="comment">// 通知圆点</span></span><br><span class="line">        <span class="keyword">boolean</span> allowBubble = DEFAULT_ALLOW_BUBBLE; <span class="comment">// 气泡通知</span></span><br><span class="line">        <span class="keyword">int</span> lockedAppFields = DEFAULT_LOCKED_APP_FIELDS;</span><br><span class="line">        <span class="keyword">boolean</span> oemLockedImportance = DEFAULT_OEM_LOCKED_IMPORTANCE;</span><br><span class="line">        List&lt;String&gt; futureOemLockedChannels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> defaultAppLockedImportance = DEFAULT_APP_LOCKED_IMPORTANCE;</span><br><span class="line">        Delegate delegate = <span class="keyword">null</span>;</span><br><span class="line">        ArrayMap&lt;String, NotificationChannel&gt; channels = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, NotificationChannelGroup&gt; groups = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidDelegate</span><span class="params">(String pkg, <span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate != <span class="keyword">null</span> &amp;&amp; delegate.isAllowed(pkg, uid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>NotificationChannelExtractor</code>，规则处理器抽象类，定义各种规则的抽象接口，具体规则则由各种类型的子类去实现，后面会举例，先看看这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NotificationSignalExtractor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Context context, NotificationUsageStats usageStats)</span></span>;</span><br><span class="line">    <span class="comment">// 每次通知发送或更新的时候调用,如果`process`方法处理完之后还有其他东西需要做进一步处理,则返回一个`RankingReconsideration`</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RankingReconsideration <span class="title">process</span><span class="params">(NotificationRecord notification)</span></span>;</span><br><span class="line">    <span class="comment">// 让规则处理器持有规则`RankingConfig`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(RankingConfig config)</span></span>;</span><br><span class="line">    <span class="comment">// 让规则处理器持有免打扰辅助类`ZenModeHelper`</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setZenHelper</span><span class="params">(ZenModeHelper helper)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口有多个实现类，一套规则一个实现类，我们挑一个来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadgeExtractor</span> <span class="keyword">implements</span> <span class="title">NotificationSignalExtractor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RankingConfig mConfig;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Context ctx, NotificationUsageStats usageStats)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RankingReconsideration <span class="title">process</span><span class="params">(NotificationRecord record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (record == <span class="keyword">null</span> || record.getNotification() == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (mConfig == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">        <span class="keyword">boolean</span> userWantsBadges = mConfig.badgingEnabled(record.sbn.getUser());</span><br><span class="line">        <span class="keyword">boolean</span> appCanShowBadge = mConfig.canShowBadge(record.sbn.getPackageName(), record.sbn.getUid());</span><br><span class="line">        <span class="keyword">if</span> (!userWantsBadges || !appCanShowBadge) &#123;</span><br><span class="line">            record.setShowBadge(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (record.getChannel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                record.setShowBadge(record.getChannel().canShowBadge() &amp;&amp; appCanShowBadge);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                record.setShowBadge(appCanShowBadge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (record.isIntercepted()</span><br><span class="line">                &amp;&amp; (record.getSuppressedVisualEffects() &amp; SUPPRESSED_EFFECT_BADGE) != <span class="number">0</span>) &#123;</span><br><span class="line">            record.setShowBadge(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(RankingConfig config)</span> </span>&#123;</span><br><span class="line">        mConfig = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZenHelper</span><span class="params">(ZenModeHelper helper)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一套决定通知是否显示圆点的规则，规则包括：</p><ul><li>系统是否允许显示圆点(Config.badgingEnabled)，受一个系统全局变量影响，该变量写在 Settings 数据库字段中：NOTIFICATION_BADGING = “notification_badging”，改变该值的地方是 设置中的开关</li><li>用户是否在设置中打开了允许通知(Config.canShowBadge)，受我们前面说的<code>setShowBadge</code>接口影响，也就是会去查询<code>PreferencesHelper</code>类中的数据结构<code>PackagePreferences</code></li><li>此外还可能受通知<code>channel</code>影响等等</li></ul><p>以上只是处理了一个通知属性，而其他各种属性则分别在不同的规则处理器中处理，Android定义了一个配置列表，声明了所有的规则处理器，同时允许我们去扩展我们自己的规则处理器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*frameworks/base/core/res/res/values/config.xml*/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">"config_notificationSignalExtractors"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- many of the following extractors depend on the notification channel, so this</span></span><br><span class="line"><span class="comment">extractor must come first --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.NotificationChannelExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.NotificationAdjustmentExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.BubbleExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- depends on AdjustmentExtractor--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.ValidateNotificationPeople<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.PriorityExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- depends on PriorityExtractor --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.ZenModeExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.ImportanceExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- depends on ImportanceExtractor--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.NotificationIntrusivenessExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.VisibilityExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Depends on ZenModeExtractor --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.BadgeExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span>com.android.server.notification.CriticalNotificationExtractor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们需要新增规则时，只需要在这个配置列表中指定我们的规则实现类，并让我们的规则实现类实现<code>NotificationSignalExtractor</code>这个接口，完成我们特定的规则制定即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤7</span></span><br><span class="line">mRankingHelper.extractSignals(r);</span><br></pre></td></tr></table></figure><p>我们接着看<code>PostNotificationRunnable.run()</code>中的步骤7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/RankingHelper.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extractSignals</span><span class="params">(NotificationRecord r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mSignalExtractors.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            NotificationSignalExtractor extractor = mSignalExtractors[i];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                RankingReconsideration recon = extractor.process(r);</span><br><span class="line">                <span class="keyword">if</span> (recon != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mRankingHandler.requestReconsideration(recon);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也就是遍历各个规则处理器，触发其<code>process</code>方法去设置通知的各种属性，当返回值<code>RankingReconsideration</code>不为空时，则进一步处理其他规则，不展开讲。</p><p>这里主要学习源码的这种实现思路：<strong>将赋值过程复杂的属性的处理通过抽象隔离开来分别处理，达到修改某个属性的规则时不影响其他属性的目的，同时还保证了良好的可扩展性，当我们需要定义新的规则的时候，只需要扩展我们自己的一套规则即可</strong>.</p><p>这里体现了设计模式中多个基本原则，如<strong>单一职责原则（一个类应只包含单一的职责）、依赖倒转原则（抽象不应该依赖于细节，细节应当依赖于抽象）和迪米特原则（一个类尽量不要与其他类发生关系）等</strong>，整个通知系统的设计是十分复杂的，这个过程中有很多设计模式的体现，读者阅读的时候可多加思考并学习其应用。</p><p><strong>通知排序:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤8</span></span><br><span class="line">mRankingHelper.sort(mNotificationList);</span><br></pre></td></tr></table></figure><ul><li>步骤8：更新完通知的各种属性后，就可以对通知进行排序了，可以看到传进去排序的集合为<code>mNotificationList</code>，这也就是为什么我们前面说<code>mNotificationList</code>是已排序的通知集合</li></ul><p>服务端通知排序分为两次，初步排序与最终排序，具体排序规则受两个排序类影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初步排序：frameworks/base/services/core/java/com/android/server/notification/NotificationComparator.java</span><br><span class="line">最终排序：frameworks/base/services/core/java/com/android/server/notification/GlobalSortKeyComparator.java</span><br></pre></td></tr></table></figure><p>其中初步排序主要是 <strong>根据Importance / 彩色通知(受Notification.setColorized()接口影响) / 是否常驻通知(ongoing) / 是否重要消息 / 是否重要联系人 / priority / 通知发送时间</strong> 等因素影响，其中通知发送时间在排序规则中是最后被考虑的，这也是为什么经常我们看到的最新通知不一定是显示在最顶端的原因。具体规则和代码不展开讲，感兴趣的自己阅读下<code>frameworks/base/services/core/java/com/android/server/notification/NotificationComparator.java</code> 的 <code>compare</code> 方法。</p><p>对于初步排序这里只强调一点，由于<code>Comparator</code>比较器默认是升序的，如果不做处理会导致<code>mNotificationList</code>中的通知的排序是按照重要程度从低到高排序，这与我们的预期结果是相反的，源码的处理是在返回比较结果前做一次反序处理，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationComparator.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NotificationRecord left, NotificationRecord right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> leftImportance = left.getImportance();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> rightImportance = right.getImportance();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isLeftHighImportance = leftImportance &gt;= IMPORTANCE_DEFAULT;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isRightHighImportance = rightImportance &gt;= IMPORTANCE_DEFAULT;</span><br><span class="line">        <span class="keyword">if</span> (Settings.Secure.getInt(mContext.getContentResolver(),</span><br><span class="line">                Settings.Secure.NOTIFICATION_NEW_INTERRUPTION_MODEL, <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLeftHighImportance != isRightHighImportance) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span> * Boolean.compare(isLeftHighImportance, isRightHighImportance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们知道，<code>int compare(T o1, T o2)</code>是“比较o1和o2的大小”：</p><ul><li>返回 负数 表示 <strong>o1 比 o2小</strong></li><li>返回 0 表示 <strong>o1 等于 o2</strong></li><li>返回 正数 表示 <strong>o1 大于 o2</strong></li></ul><p>所以正常情况下，当<code>isLeftHighImportance</code>的值大于<code>isRightHighImportance</code>时，由于是升序，<code>Importance</code>较大的通知会被排在后面，而这里执行了 <code>-1 * result</code> 后，<code>Importance</code>较大的通知就排在前面了。</p><p><strong>接下来思考：为什么初步排序还不够呢</strong>，这里就涉及到我们发送通知时可能会用到的一个接口了：<code>Builder.setSortKey()</code>，有时候我们发送通知会调用<code>Builder.setSortKey()</code>设置一个排序键值，去对当前应用的通知进行排序，系统就是在最终排序里面对我们通过<code>setSortKey</code>设置的排序规则做受理的，而在最终排序前，系统会去规范我们设置的键值</p><p>那当我们设置了<code>setSortKey</code>之后，系统是怎么排序的呢？下面看看步骤8的<code>sort</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/RankingHelper.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList&lt;NotificationRecord&gt; notificationList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = notificationList.size();</span><br><span class="line">        <span class="comment">// clear global sort keys</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            notificationList.get(i).setGlobalSortKey(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初步排序，详见 `NotificationComparator`</span></span><br><span class="line">        Collections.sort(notificationList, mPreliminaryComparator);</span><br><span class="line">        <span class="comment">// 最终排序前的预处理</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mProxyByGroupTmp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> NotificationRecord record = notificationList.get(i);</span><br><span class="line">                record.setAuthoritativeRank(i);</span><br><span class="line">                <span class="keyword">final</span> String groupKey = record.getGroupKey();</span><br><span class="line">                NotificationRecord existingProxy = mProxyByGroupTmp.get(groupKey);</span><br><span class="line">                <span class="keyword">if</span> (existingProxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mProxyByGroupTmp.put(groupKey, record);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> NotificationRecord record = notificationList.get(i);</span><br><span class="line">                NotificationRecord groupProxy = mProxyByGroupTmp.get(record.getGroupKey());</span><br><span class="line">                String groupSortKey = record.getNotification().getSortKey();</span><br><span class="line">                <span class="comment">// 步骤8.1，执行预处理</span></span><br><span class="line">                String groupSortKeyPortion;</span><br><span class="line">                <span class="keyword">if</span> (groupSortKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    groupSortKeyPortion = <span class="string">"nsk"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (groupSortKey.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                    groupSortKeyPortion = <span class="string">"esk"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    groupSortKeyPortion = <span class="string">"gsk="</span> + groupSortKey;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">boolean</span> isGroupSummary = record.getNotification().isGroupSummary();</span><br><span class="line">                <span class="comment">// 步骤8.2，执行预处理</span></span><br><span class="line">               record.setGlobalSortKey(String.format(<span class="string">"crtcl=0x%04x:intrsv=%c:grnk=0x%04x:gsmry=%c:%s:rnk=0x%04x"</span>,</span><br><span class="line">                        record.getCriticality(), record.isRecentlyIntrusive() &amp;&amp; record.getImportance() &gt; NotificationManager.IMPORTANCE_MIN ? <span class="string">'0'</span> : <span class="string">'1'</span>,</span><br><span class="line">                        groupProxy.getAuthoritativeRank(), isGroupSummary ? <span class="string">'0'</span> : <span class="string">'1'</span>, groupSortKeyPortion, record.getAuthoritativeRank()));</span><br><span class="line">            &#125;</span><br><span class="line">            mProxyByGroupTmp.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 步骤8.3，执行最终排序</span></span><br><span class="line">        Collections.sort(notificationList, mFinalComparator);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤8.1：最终排序预处理，可以看到系统对<code>sortKey</code>做了统一处理：<ul><li>当我们没设置<code>sortKey</code>时，groupSortKeyPortion = “nsk”</li><li>当我们设置的<code>sortKey</code>为空(也就是””)时，groupSortKeyPortion = “esk”;</li><li>当我们设置的<code>sortKey</code>不为null时，groupSortKeyPortion = “gsk=” + groupSortKey;</li></ul></li><li>步骤8.2：最终排序预处理，以<code>crtcl=0x%04x:intrsv=%c:grnk=0x%04x:gsmry=%c:%s:rnk=0x%04x</code>这个格式为<code>record</code>设置<code>mGlobalSortKey</code>，也就是系统将这几个属性组合成一个字符串，赋值给<code>mGlobalSortKey</code>，里面就包括前面步骤1中规范化出来的<code>sortKey</code>，而这一整个字符串将在最终排序中影响通知排序</li><li>步骤8.3：执行最终排序，这里我们直接看最终排序用的这个对比器<code>mFinalComparator</code>里面的规则：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/GlobalSortKeyComparator.java*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalSortKeyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">NotificationRecord</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(NotificationRecord left, NotificationRecord right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left.getGlobalSortKey() == <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (right.getGlobalSortKey() == <span class="keyword">null</span>) &#123; <span class="keyword">return</span>  -<span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> left.getGlobalSortKey().compareTo(right.getGlobalSortKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到系统直接比较了前面设置的<code>mGlobalSortKey</code>值，<code>mGlobalSortKey</code>是一个字符串，也就是这里的排序规则是由<strong>字典序</strong>排序规则决定的。结合前面两点我们可以得出，当两条通知的<code>crtcl、intrsv、grnk、gsmry</code>这几个属性的值都一样的情况下，我们通过<code>Builder.setSortKey()</code>设置的排序键值就会生效了。</p><p>经过前面系统的规范，不同的键值类型对应的字典序排序结果为：<strong>esk类型 &gt; gsk=xxx类型 &gt; nsk类型</strong>，即<code>sortKey</code>类型为<strong>“”</strong> 的通知会排在最前面，接着是设置了<code>sortKey</code>的通知，这一类通知的排序则根据用户指定的<code>sortKey</code>而定，接着才是没设置<code>sortKey</code>的，本地写了个demo验证了下，结果如下：</p><img src="http://wxyy97.com/image/notification_sortdemo.jpg" style="zoom:50%;" /><p>到这里我们也就明白了为什么有时候设置<code>sortKey</code>并不能生效了，因为<code>sortKey</code>的排序优先级不是最高的，还受<code>crtcl、intrsv、grnk、gsmry</code>这几个属性影响。</p><p><strong>通知震动、音效和呼吸灯处理:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤9</span></span><br><span class="line"><span class="keyword">if</span> (!r.isHidden()) &#123; buzzBeepBlinkLocked(r); &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤9：这里开始处理通知的<strong>震动、音效和呼吸灯</strong>效果，这里主要根据通知的 重要程度、是否当前用户、是否更新类型的通知等 信息共同决定当前这条通知是否需要 震动、音效和呼吸灯效果，代码较简单，不展开讲，感兴趣的童鞋直接看下<code>NotificationManagerService.buzzBeepBlinkLocked(NotificationRecord record)</code>方法，下面重点看看通知的post。</li></ul><p><strong>通知Post:</strong></p><p>分析了这么久，我们终于来到通知的发送步骤了，别急，还有很多事情没处理呢～例如我们前面说过，当用户未主动给应用通知设置组别时，系统会帮我们最这件事，但是到目前为止都没有见到相关处理，答案就在下面，接着往下看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*PostNotificationRunnable.run()*/</span></span><br><span class="line">                    <span class="comment">// 步骤:10</span></span><br><span class="line">                    <span class="keyword">if</span> (notification.getSmallIcon() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        StatusBarNotification oldSbn = (old != <span class="keyword">null</span>) ? old.sbn : <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 步骤10.2</span></span><br><span class="line">                        mListeners.notifyPostedLocked(r, old);</span><br><span class="line">                        <span class="keyword">if</span> ((oldSbn == <span class="keyword">null</span> || !Objects.equals(oldSbn.getGroup(), n.getGroup())) &amp;&amp; !isCritical(r)) &#123;</span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    <span class="comment">// 步骤10.3</span></span><br><span class="line">                                    mGroupHelper.onNotificationPosted(n, hasAutoGroupSummaryLocked(n)); </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 步骤10.1</span></span><br><span class="line">                        <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; !old.isCanceled) &#123;</span><br><span class="line">                            mListeners.notifyRemovedLocked(r, NotificationListenerService.REASON_ERROR, r.getStats());</span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    mGroupHelper.onNotificationRemoved(n);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 将前面入列的通知从 mEnqueuedNotifications 移除，所以最终该集合记录的是所有入列成功但发送不成功的通知</span></span><br><span class="line">                    <span class="keyword">int</span> N = mEnqueuedNotifications.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> NotificationRecord enqueued = mEnqueuedNotifications.get(i);</span><br><span class="line">                        <span class="keyword">if</span> (Objects.equals(key, enqueued.getKey())) &#123;</span><br><span class="line">                            mEnqueuedNotifications.remove(i);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10：这里再次对通知是否有<code>mSmallIcon</code>做了检查，避免前面在处理通知的过程中<code>mSmallIcon</code>丢失了，而没有<code>mSmallIcon</code>的通知是一定不能发送的，这也看出了Google对流氓通知是零容忍的。如果没有<code>mSmallIcon</code>，则走进<code>else</code>。</li><li>步骤10.1：先看<code>else</code> 的情况，此时如果旧通知已成功发送但新通知没<code>smallIcon</code>，则旧通知会被移除，所以移除通知不一定要调用<code>cancel</code>接口，在这种情况下旧通知也是会被移除的。</li></ul><p><strong>通知各监听者:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*PostNotificationRunnable.run()*/</span></span><br><span class="line"><span class="comment">// 步骤10.2</span></span><br><span class="line">mListeners.notifyPostedLocked(r, old);</span><br></pre></td></tr></table></figure><ul><li>步骤10.2：<code>mSmallIcon</code>不为空，终于可以发送了，<code>mListeners.notifyPostedLocked(r, old)</code>将以异步的形式，将该消息通知给各个<code>listeners</code>，其中就包括我们后面主要分析的<code>SystemUI</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java$*/</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(NotificationRecord r, NotificationRecord old, <span class="keyword">boolean</span> notifyAllListeners)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : getServices()) &#123;</span><br><span class="line">                <span class="comment">// 过滤掉部分listener.如不可见用户,Android P以下hidden类型的通知等</span></span><br><span class="line">                ......</span><br><span class="line">                <span class="comment">// 步骤10.2.1</span></span><br><span class="line">                <span class="keyword">final</span> NotificationRankingUpdate update = makeRankingUpdateLocked(info);</span><br><span class="line">                <span class="comment">// 移除原来可见现在不可见的通知</span></span><br><span class="line">                <span class="keyword">if</span> (oldSbnVisible &amp;&amp; !sbnVisible) &#123;</span><br><span class="line">                    <span class="keyword">final</span> StatusBarNotification oldSbnLightClone = oldSbn.cloneLight();</span><br><span class="line">                    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            notifyRemoved(</span><br><span class="line">                                    info, oldSbnLightClone, update, <span class="keyword">null</span>, REASON_USER_STOPPED);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 步骤10.2.2</span></span><br><span class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        notifyPosted(info, sbnToPost, update);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10.2.1：<strong>构建一个包含所有通知排序信息和关键属性的映射表，其中<code>key=StatusBarNotification.key，value=NotificationListenerService.Ranking</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java$*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> NotificationRankingUpdate <span class="title">makeRankingUpdateLocked</span><span class="params">(ManagedServiceInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mNotificationList.size();</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;NotificationListenerService.Ranking&gt; rankings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            NotificationRecord record = mNotificationList.get(i);</span><br><span class="line">            <span class="comment">// 过滤掉当前用户不可见的通知</span></span><br><span class="line">            <span class="keyword">if</span> (!isVisibleToListener(record.sbn, info)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> String key = record.sbn.getKey();</span><br><span class="line">            <span class="comment">// 一条通知对应一个 Ranking</span></span><br><span class="line">            <span class="keyword">final</span> NotificationListenerService.Ranking ranking =</span><br><span class="line">                    <span class="keyword">new</span> NotificationListenerService.Ranking();</span><br><span class="line">            <span class="comment">// 将通知的关键信息，包括排序、关键属性等存进 Ranking</span></span><br><span class="line">            ranking.populate(</span><br><span class="line">                    key,</span><br><span class="line">                    rankings.size(),</span><br><span class="line">                    !record.isIntercepted(),</span><br><span class="line">                    record.getPackageVisibilityOverride(),</span><br><span class="line">                    record.getSuppressedVisualEffects(),</span><br><span class="line">                    record.getImportance(),</span><br><span class="line">                    record.getImportanceExplanation(),</span><br><span class="line">                    record.sbn.getOverrideGroupKey(),</span><br><span class="line">                    record.getChannel(),</span><br><span class="line">                    record.getPeopleOverride(),</span><br><span class="line">                    record.getSnoozeCriteria(),</span><br><span class="line">                    record.canShowBadge(),</span><br><span class="line">                    record.getUserSentiment(),</span><br><span class="line">                    record.isHidden(),</span><br><span class="line">                    record.getLastAudiblyAlertedMs(),</span><br><span class="line">                    record.getSound() != <span class="keyword">null</span> || record.getVibration() != <span class="keyword">null</span>,</span><br><span class="line">                    record.getSystemGeneratedSmartActions(),</span><br><span class="line">                    record.getSmartReplies(),</span><br><span class="line">                    record.canBubble()</span><br><span class="line">            );</span><br><span class="line">            rankings.add(ranking);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建`RankingMap`</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NotificationRankingUpdate(</span><br><span class="line">                rankings.toArray(<span class="keyword">new</span> NotificationListenerService.Ranking[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关注下最后一步：将列表转为 <code>NotificationListenerService.Ranking</code> 类型的数组，然后构建一个<code>RankingMap</code>，<code>RankingMap</code>是一个<code>key=StatusBarNotification.key，value=NotificationListenerService.Ranking</code>的<code>ArrayMap</code>，后面<code>SystemUI</code>会根据这个映射表的排序信息显示通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/core/java/android/service/notification/NotificationRankingUpdate.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotificationRankingUpdate</span><span class="params">(NotificationListenerService.Ranking[] rankings)</span> </span>&#123;</span><br><span class="line">        mRankingMap = <span class="keyword">new</span> NotificationListenerService.RankingMap(rankings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*frameworks/base/core/java/android/service/notification/NotificationRankingUpdate$RankingMap.java*/</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RankingMap</span><span class="params">(Ranking[] rankings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rankings.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> String key = rankings[i].getKey();</span><br><span class="line">                mOrderedKeys.add(key);</span><br><span class="line">                <span class="comment">// key=StatusBarNotification.key，value=NotificationListenerService.Ranking</span></span><br><span class="line">                mRankings.put(key, rankings[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10.2.2：执行<code>listener.onNotificationPosted(sbnHolder, rankingUpdate);</code>接口通知各个监听器</li></ul><p>至此，各个监听器就能收到来新通知的消息了。</p><p><strong>尝试构建系统分组:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*PostNotificationRunnable.run()*/</span></span><br><span class="line"><span class="keyword">if</span> ((oldSbn == <span class="keyword">null</span> || !Objects.equals(oldSbn.getGroup(), n.getGroup())) &amp;&amp; !isCritical(r)) &#123;</span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 步骤10.3</span></span><br><span class="line">            mGroupHelper.onNotificationPosted(n, hasAutoGroupSummaryLocked(n)); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10.3：这里将利用分组通知的辅助类<code>GroupHelper</code>在必要的情况下构建一个父通知，前面我们说的用户未主动将通知分组时系统会帮我们去做这件事，就是在这里完成的。但<code>GroupHelper</code>只是负责判断是否需要创建或者移除系统创建的通知，具体的操作是在NMS中完成的，涉及到下面这个回调：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/GroupHelper.java*/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addAutoGroup</span><span class="params">(String key)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeAutoGroup</span><span class="params">(String key)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addAutoGroupSummary</span><span class="params">(<span class="keyword">int</span> userId, String pkg, String triggeringKey)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeAutoGroupSummary</span><span class="params">(<span class="keyword">int</span> user, String pkg)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>NMS将回调注册到<code>GroupHelper</code>，<code>GroupHelper</code>则在必要的时候通知NMS去完成相关操作，来看看 步骤10.3 的具体操作，代码做过简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/GroupHelper.java*/</span></span><br><span class="line">    <span class="comment">// 步骤10.3.1</span></span><br><span class="line">    Map&lt;Integer, Map&lt;String, LinkedHashSet&lt;String&gt;&gt;&gt; mUngroupedNotifications = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(StatusBarNotification sbn, <span class="keyword">boolean</span> autogroupSummaryExists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; notificationsToGroup = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">// 步骤10.3.2</span></span><br><span class="line">            <span class="keyword">if</span> (!sbn.isAppGroup()) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mUngroupedNotifications) &#123;</span><br><span class="line">                    <span class="comment">// 步骤10.3.3</span></span><br><span class="line">                    <span class="keyword">if</span> (notificationsForPackage.size() &gt;= mAutoGroupAtCount</span><br><span class="line">                            || autogroupSummaryExists) &#123;</span><br><span class="line">                        notificationsToGroup.addAll(notificationsForPackage);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (notificationsToGroup.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 步骤10.3.4</span></span><br><span class="line">                    adjustAutogroupingSummary(sbn.getUserId(), sbn.getPackageName(), notificationsToGroup.get(<span class="number">0</span>), <span class="keyword">true</span>);</span><br><span class="line">                    <span class="comment">// 步骤10.3.5</span></span><br><span class="line">                    adjustNotificationBundling(notificationsToGroup, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 步骤10.3.6</span></span><br><span class="line">                maybeUngroup(sbn, <span class="keyword">false</span>, sbn.getUserId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10.3.1：<code>GroupHelper</code>持有一个集合<code>mUngroupedNotifications</code>，存储内容为：&lt;user, &lt;packageName, notificationsForPackage&gt;&gt;，这样就能将每个用户的每个应用下的通知存储起来，在条件满足的时候去执行系统成组操作</li><li>步骤10.3.2：若用户创建该通知的时候未指定<code>mGroupKey</code>或者<code>mSortKey</code>，则系统会尝试去走创建父通知的逻辑</li><li>步骤10.3.3：系统尝试创建父通知，创建的条件是<strong>该应用的通知数达到了4条 或者 之前已经存在该应用的父通知了</strong>，这个的 <strong>4</strong> 是在配置在<code>config</code>中的，路径为<code>frameworks/base/core/res/res/values/config.xml 下的 config_autoGroupAtCount</code>字段，所以如果我们想要修改系统的通知自动成组数条件，修改该变量即可。</li><li>步骤10.3.4：满足创建父通知的条件，走<code>adjustAutogroupingSummary</code>逻辑，该方法最终调了NMS中的<code>addAutoGroupSummary</code>方法，这里关注下创建的这条父通知的内容：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*frameworks/base/services/core/java/com/android/server/notification/NotificationManagerService.java*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAutoGroupSummary</span><span class="params">(<span class="keyword">int</span> userId, String pkg, String triggeringKey)</span> </span>&#123;</span><br><span class="line">        NotificationRecord summaryRecord = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">            <span class="comment">// 步骤10.3.4.1</span></span><br><span class="line">            NotificationRecord notificationRecord = mNotificationsByKey.get(triggeringKey);</span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">if</span> (!summaries.containsKey(pkg)) &#123;</span><br><span class="line">                ......</span><br><span class="line">                <span class="keyword">final</span> Notification summaryNotification =</span><br><span class="line">                        <span class="keyword">new</span> Notification.Builder(getContext(), channelId)</span><br><span class="line">                                .setSmallIcon(adjustedSbn.getNotification().getSmallIcon())</span><br><span class="line">                                .setGroupSummary(<span class="keyword">true</span>)</span><br><span class="line">                                .setGroupAlertBehavior(Notification.GROUP_ALERT_CHILDREN)</span><br><span class="line">                                <span class="comment">// 步骤10.3.4.2</span></span><br><span class="line">                                .setGroup(GroupHelper.AUTOGROUP_KEY)</span><br><span class="line">                                .setFlag(FLAG_AUTOGROUP_SUMMARY, <span class="keyword">true</span>)</span><br><span class="line">                                .setFlag(Notification.FLAG_GROUP_SUMMARY, <span class="keyword">true</span>)</span><br><span class="line">                                .setColor(adjustedSbn.getNotification().color)</span><br><span class="line">                                .setLocalOnly(<span class="keyword">true</span>)</span><br><span class="line">                                .build();</span><br><span class="line">                ......</span><br><span class="line">                <span class="keyword">final</span> StatusBarNotification summarySbn =</span><br><span class="line">                        <span class="keyword">new</span> StatusBarNotification(adjustedSbn.getPackageName(), adjustedSbn.getOpPkg(), Integer.MAX_VALUE,</span><br><span class="line">                                <span class="comment">// 步骤10.3.4.2</span></span><br><span class="line">                                GroupHelper.AUTOGROUP_KEY, </span><br><span class="line">                                adjustedSbn.getUid(), adjustedSbn.getInitialPid(), summaryNotification, adjustedSbn.getUser(),</span><br><span class="line">                                <span class="comment">// 步骤10.3.4.2</span></span><br><span class="line">                                GroupHelper.AUTOGROUP_KEY,</span><br><span class="line">                                System.currentTimeMillis());</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (summaryRecord != <span class="keyword">null</span> &amp;&amp; checkDisqualifyingFeatures(userId, MY_UID, summaryRecord.sbn.getId(), summaryRecord.sbn.getTag(), summaryRecord, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="comment">//  步骤10.3.4.3</span></span><br><span class="line">            mHandler.post(<span class="keyword">new</span> EnqueueNotificationRunnable(userId, summaryRecord));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>步骤10.3.4.1：拿到欲成组的子通知里面的第一条，然后将该子通知的各种属性复制给父通知，包括子通知的<strong>userId、extras、contentIntent</strong>等信息</li><li>步骤10.3.4.2：这里创建父通知时指定了<code>Notification</code>的<code>mGroupKey = GroupHelper.AUTOGROUP_KEY</code>，也就是<code>ranker_group</code>，同时指定了<code>StatusBarNotification</code>的<code>tag = GroupHelper.AUTOGROUP_KEY</code> 和 <code>overrideGroupKey = GroupHelper.AUTOGROUP_KEY</code>，这些信息在后续分析客户端通知显示的时候会用到</li><li>步骤10.3.4.3：父通知构建完成后，执行入列操作，这个就跟前面分析的新通知入列的流程是一样的了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*GroupHelper.onNotificationPosted(...)*/</span></span><br><span class="line"><span class="comment">// 步骤10.3.5</span></span><br><span class="line">adjustNotificationBundling(notificationsToGroup, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>步骤10.3.5：看回前面的 步骤10.3.5，这里会去刷新所有刚被成组的所有子通知的属性，主要操作是执行了<code>StatusBarNotification</code>的<code>setOverrideGroupKey()</code>方法，将该值指定为<code>GroupHelper.AUTOGROUP_KEY</code>，所以到这里，所以成组的通知，包括父通知的<code>overrideGroupKey</code>就都变成了<code>ranker_group</code>，同样，这个属性将在<code>SystemUI</code>显示时发挥作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*GroupHelper.onNotificationPosted(...)*/</span></span><br><span class="line"><span class="comment">// 步骤10.3.6</span></span><br><span class="line">maybeUngroup(sbn, <span class="keyword">false</span>, sbn.getUserId());</span><br></pre></td></tr></table></figure><p>步骤10.3.6：存在一种情况：某通知原来未指定group，然后被加进了系统创建的父通知里，但现在用户更新了该通知，并为其指定了group，也就是用户告诉系统，接下我自己要创建分组了，你把通知还给我。对于这种情况，系统需要将该通知从系统分组里面移除出来，避免出错。</p><p>至此，整个 <code>PostNotificationRunnable.run()</code> 方法就都分析完了，通知会发送给各个监听者，包括我们后面要讲的 <code>SystemUI</code>。</p><h6 id="SystemUI通知显示流程"><a href="#SystemUI通知显示流程" class="headerlink" title="SystemUI通知显示流程:"></a>SystemUI通知显示流程:</h6><p><img src="http://wxyy97.com/image/notification_systemui.jpg" alt=""><br><code>NotificationListeners mListeners;</code></p><p><code>mListeners.notifyPostedLocked(r, old);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListeners</span> <span class="keyword">extends</span> <span class="title">ManagedServices</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> IInterface <span class="title">asInterface</span><span class="params">(IBinder binder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INotificationListener.Stub.asInterface(binder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceAdded</span><span class="params">(ManagedServiceInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">        <span class="keyword">final</span> NotificationRankingUpdate update;</span><br><span class="line">        <span class="keyword">synchronized</span> (mNotificationLock) &#123;</span><br><span class="line">            update = makeRankingUpdateLocked(info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listener.onListenerConnected(update);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// we tried</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * asynchronously notify all listeners about a new notification</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Also takes care of removing a notification that has been visible to a listener before,</span></span><br><span class="line"><span class="comment">     * but isn't anymore.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"mNotificationLock"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(NotificationRecord r, NotificationRecord old)</span> </span>&#123;</span><br><span class="line">        notifyPostedLocked(r, old, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notifyAllListeners notifies all listeners if true, else only notifies listeners</span></span><br><span class="line"><span class="comment">     *                           targetting &lt;= O_MR1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GuardedBy</span>(<span class="string">"mNotificationLock"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPostedLocked</span><span class="params">(NotificationRecord r, NotificationRecord old,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> notifyAllListeners)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Lazily initialized snapshots of the notification.</span></span><br><span class="line">        StatusBarNotification sbn = r.sbn;</span><br><span class="line">        StatusBarNotification oldSbn = (old != <span class="keyword">null</span>) ? old.sbn : <span class="keyword">null</span>;</span><br><span class="line">        TrimCache trimCache = <span class="keyword">new</span> TrimCache(sbn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ManagedServiceInfo info : getServices()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> sbnVisible = isVisibleToListener(sbn, info);</span><br><span class="line">            <span class="keyword">boolean</span> oldSbnVisible = oldSbn != <span class="keyword">null</span> ? isVisibleToListener(oldSbn, info) : <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// This notification hasn't been and still isn't visible -&gt; ignore.</span></span><br><span class="line">            <span class="keyword">if</span> (!oldSbnVisible &amp;&amp; !sbnVisible) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If the notification is hidden, don't notifyPosted listeners targeting &lt; P.</span></span><br><span class="line">            <span class="comment">// Instead, those listeners will receive notifyPosted when the notification is</span></span><br><span class="line">            <span class="comment">// unhidden.</span></span><br><span class="line">            <span class="keyword">if</span> (r.isHidden() &amp;&amp; info.targetSdkVersion &lt; Build.VERSION_CODES.P) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If we shouldn't notify all listeners, this means the hidden state of</span></span><br><span class="line">            <span class="comment">// a notification was changed.  Don't notifyPosted listeners targeting &gt;= P.</span></span><br><span class="line">            <span class="comment">// Instead, those listeners will receive notifyRankingUpdate.</span></span><br><span class="line">            <span class="keyword">if</span> (!notifyAllListeners &amp;&amp; info.targetSdkVersion &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> NotificationRankingUpdate update = makeRankingUpdateLocked(info);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This notification became invisible -&gt; remove the old one.</span></span><br><span class="line">            <span class="keyword">if</span> (oldSbnVisible &amp;&amp; !sbnVisible) &#123;</span><br><span class="line">                <span class="keyword">final</span> StatusBarNotification oldSbnLightClone = oldSbn.cloneLight();</span><br><span class="line">                mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        notifyRemoved(</span><br><span class="line">                                info, oldSbnLightClone, update, <span class="keyword">null</span>, REASON_USER_STOPPED);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Grant access before listener is notified</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> targetUserId = (info.userid == UserHandle.USER_ALL)</span><br><span class="line">                    ? UserHandle.USER_SYSTEM : info.userid;</span><br><span class="line">            updateUriPermissions(r, old, info.component.getPackageName(), targetUserId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> StatusBarNotification sbnToPost = trimCache.ForListener(info);</span><br><span class="line">            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    notifyPosted(info, sbnToPost, update);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyPosted</span><span class="params">(<span class="keyword">final</span> ManagedServiceInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> StatusBarNotification sbn, NotificationRankingUpdate rankingUpdate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> INotificationListener listener = (INotificationListener) info.service;</span><br><span class="line">        StatusBarNotificationHolder sbnHolder = <span class="keyword">new</span> StatusBarNotificationHolder(sbn);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listener.onNotificationPosted(sbnHolder, rankingUpdate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"unable to notify listener (posted): "</span> + listener, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListenerService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListenerWrapper</span> <span class="keyword">extends</span> <span class="title">INotificationListener</span>.<span class="title">Stub</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationListenerWithPlugins.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListenerWithPlugins</span> <span class="keyword">extends</span> <span class="title">NotificationListenerService</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/NotificationListener.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationListener</span> <span class="keyword">extends</span> <span class="title">NotificationListenerWithPlugins</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//Systemui真正接收通知的地方</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNotificationPosted</span><span class="params">(<span class="keyword">final</span> StatusBarNotification sbn,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> RankingMap rankingMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"onNotificationPosted: "</span> + sbn);</span><br><span class="line">        <span class="keyword">if</span> (sbn != <span class="keyword">null</span> &amp;&amp; !onPluginNotificationPosted(sbn, rankingMap)) &#123;</span><br><span class="line">            Dependency.get(Dependency.MAIN_HANDLER).post(() -&gt; &#123;</span><br><span class="line">                processForRemoteInput(sbn.getNotification(), mContext);</span><br><span class="line">                String key = sbn.getKey();</span><br><span class="line">                <span class="keyword">boolean</span> isUpdate =</span><br><span class="line">                        mEntryManager.getNotificationData().get(key) != <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// In case we don't allow child notifications, we ignore children of</span></span><br><span class="line">                <span class="comment">// notifications that have a summary, since` we're not going to show them</span></span><br><span class="line">                <span class="comment">// anyway. This is true also when the summary is canceled,</span></span><br><span class="line">                <span class="comment">// because children are automatically canceled by NoMan in that case.</span></span><br><span class="line">                <span class="keyword">if</span> (!ENABLE_CHILD_NOTIFICATIONS</span><br><span class="line">                        &amp;&amp; mGroupManager.isChildInGroupWithSummary(sbn)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"Ignoring group child due to existing summary: "</span> + sbn);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Remove existing notification to avoid stale data.</span></span><br><span class="line">                    <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                        mEntryManager.removeNotification(key, rankingMap, UNDEFINED_DISMISS_REASON);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mEntryManager.getNotificationData()</span><br><span class="line">                                .updateRanking(rankingMap);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断更新还是添加</span></span><br><span class="line">                <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">                    mEntryManager.updateNotification(sbn, rankingMap);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mEntryManager.addNotification(sbn, rankingMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/NotificationEntryManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNotificationInternal</span><span class="params">(StatusBarNotification notification,</span></span></span><br><span class="line"><span class="function"><span class="params">            NotificationListenerService.RankingMap rankingMap)</span> <span class="keyword">throws</span> InflationException </span>&#123;</span><br><span class="line">        String key = notification.getKey();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"addNotification key="</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mNotificationData.updateRanking(rankingMap);</span><br><span class="line">        NotificationListenerService.Ranking ranking = <span class="keyword">new</span> NotificationListenerService.Ranking();</span><br><span class="line">        rankingMap.getRanking(key, ranking);</span><br><span class="line"></span><br><span class="line">        NotificationEntry entry = <span class="keyword">new</span> NotificationEntry(notification, ranking);</span><br><span class="line"></span><br><span class="line">        Dependency.get(LeakDetector<span class="class">.<span class="keyword">class</span>).<span class="title">trackInstance</span>(<span class="title">entry</span>)</span>;</span><br><span class="line">        <span class="comment">// Construct the expanded view.</span></span><br><span class="line">        requireBinder().inflateViews(entry, () -&gt; performRemoveNotification(notification,</span><br><span class="line">                REASON_CANCEL));</span><br><span class="line"></span><br><span class="line">        abortExistingInflation(key);</span><br><span class="line"></span><br><span class="line">        mPendingNotifications.put(key, entry);</span><br><span class="line">        <span class="keyword">for</span> (NotificationEntryListener listener : mNotificationEntryListeners) &#123;</span><br><span class="line">            listener.onPendingEntryAdded(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/NotificationRowBinderImpl.java</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflateViews</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            NotificationEntry entry,</span></span></span><br><span class="line"><span class="function"><span class="params">            Runnable onDismissRunnable)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InflationException </span>&#123;</span><br><span class="line">        ViewGroup parent = mListContainer.getViewParentForNotification(entry);</span><br><span class="line">        PackageManager pmUser = StatusBar.getPackageManagerForUser(mContext,</span><br><span class="line">                entry.notification.getUser().getIdentifier());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> StatusBarNotification sbn = entry.notification;</span><br><span class="line">        <span class="keyword">if</span> (entry.rowExists()) &#123;</span><br><span class="line">            entry.updateIcons(mContext, sbn);</span><br><span class="line">            entry.reset();</span><br><span class="line">            updateNotification(entry, pmUser, sbn, entry.getRow());</span><br><span class="line">            entry.getRow().setOnDismissRunnable(onDismissRunnable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            entry.createIcons(mContext, sbn);</span><br><span class="line">            <span class="keyword">new</span> RowInflaterTask().inflate(mContext, parent, entry,</span><br><span class="line">                    row -&gt; &#123;</span><br><span class="line">                        bindRow(entry, pmUser, sbn, row, onDismissRunnable);</span><br><span class="line">                        updateNotification(entry, pmUser, sbn, row);</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后bindRow就是去构造通知栏的通知View，然后updateNotification就是去显示到状态栏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/row/RowInflaterTask.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflate</span><span class="params">(Context context, ViewGroup parent, NotificationEntry entry,</span></span></span><br><span class="line"><span class="function"><span class="params">            RowInflationFinishedListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TRACE_ORIGIN) &#123;</span><br><span class="line">            mInflateOrigin = <span class="keyword">new</span> Throwable(<span class="string">"inflate requested here"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        AsyncLayoutInflater inflater = <span class="keyword">new</span> AsyncLayoutInflater(context);</span><br><span class="line">        mEntry = entry;</span><br><span class="line">        entry.setInflationTask(<span class="keyword">this</span>);</span><br><span class="line">        inflater.inflate(R.layout.status_bar_notification_row, parent, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateNotification</span><span class="params">(Entry entry, PackageManager pmUser,</span></span></span><br><span class="line"><span class="function"><span class="params">     StatusBarNotification sbn, ExpandableNotificationRow row)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        row.updateNotification(entry);</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNotification</span><span class="params">(NotificationData.Entry entry)</span> </span>&#123;</span><br><span class="line">    mEntry = entry;</span><br><span class="line">    mStatusBarNotification = entry.notification;</span><br><span class="line">    mNotificationInflater.inflateNotificationViews();</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inflateNotificationViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inflateNotificationViews(FLAG_REINFLATE_ALL);</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inflateNotificationViews</span><span class="params">(<span class="keyword">int</span> reInflateFlags)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    StatusBarNotification sbn = mRow.getEntry().notification;</span><br><span class="line">    <span class="keyword">new</span> AsyncInflationTask(sbn, reInflateFlags, mRow, mIsLowPriority,</span><br><span class="line">            mIsChildInGroup, mUsesIncreasedHeight, mUsesIncreasedHeadsUpHeight, mRedactAmbient,</span><br><span class="line">            mCallback, mRemoteViewClickHandler).execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">AsyncInflationTask</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> InflationProgress <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> createRemoteViews(mReInflateFlags,</span><br><span class="line">     recoveredBuilder, mIsLowPriority, mIsChildInGroup,</span><br><span class="line">     mUsesIncreasedHeight, mUsesIncreasedHeadsUpHeight, mRedactAmbient,</span><br><span class="line">     packageContext);</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InflationProgress <span class="title">createRemoteViews</span><span class="params">(<span class="keyword">int</span> reInflateFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">            Notification.Builder builder, <span class="keyword">boolean</span> isLowPriority, <span class="keyword">boolean</span> isChildInGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> usesIncreasedHeight, <span class="keyword">boolean</span> usesIncreasedHeadsUpHeight, <span class="keyword">boolean</span> redactAmbient,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context packageContext)</span> </span>&#123;</span><br><span class="line">        InflationProgress result = <span class="keyword">new</span> InflationProgress();</span><br><span class="line">        isLowPriority = isLowPriority &amp;&amp; !isChildInGroup;</span><br><span class="line">        <span class="keyword">if</span> ((reInflateFlags &amp; FLAG_REINFLATE_CONTENT_VIEW) != <span class="number">0</span>) &#123;</span><br><span class="line">            result.newContentView = createContentView(builder, isLowPriority, usesIncreasedHeight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((reInflateFlags &amp; FLAG_REINFLATE_EXPANDED_VIEW) != <span class="number">0</span>) &#123;</span><br><span class="line">            result.newExpandedView = createExpandedView(builder, isLowPriority);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((reInflateFlags &amp; FLAG_REINFLATE_HEADS_UP_VIEW) != <span class="number">0</span>) &#123;</span><br><span class="line">            result.newHeadsUpView = builder.createHeadsUpContentView(usesIncreasedHeadsUpHeight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((reInflateFlags &amp; FLAG_REINFLATE_PUBLIC_VIEW) != <span class="number">0</span>) &#123;</span><br><span class="line">            result.newPublicView = builder.makePublicContentView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((reInflateFlags &amp; FLAG_REINFLATE_AMBIENT_VIEW) != <span class="number">0</span>) &#123;</span><br><span class="line">            result.newAmbientView = redactAmbient ? builder.makePublicAmbientNotification()</span><br><span class="line">                    : builder.makeAmbientNotification();</span><br><span class="line">        &#125;</span><br><span class="line">        result.packageContext = packageContext;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/java/android/app/Notification.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RemoteViews <span class="title">createContentView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createContentView(<span class="keyword">false</span> <span class="comment">/* increasedheight */</span> );</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> RemoteViews <span class="title">createContentView</span><span class="params">(<span class="keyword">boolean</span> increasedHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mN.contentView != <span class="keyword">null</span> &amp;&amp; useExistingRemoteView()) &#123;</span><br><span class="line">        <span class="keyword">return</span> mN.contentView;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mStyle != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> RemoteViews styleView = mStyle.makeContentView(increasedHeight);</span><br><span class="line">        <span class="keyword">if</span> (styleView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> styleView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> applyStandardTemplate(getBaseLayoutResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认的通知布局</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBaseLayoutResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> R.layout.notification_template_material_base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/status_bar_latest_event_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:tag</span>=<span class="string">"base"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/notification_template_header"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/notification_main_column"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"@dimen/notification_content_margin_start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"@dimen/notification_content_margin_end"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/notification_content_margin_top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/notification_content_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/notification_template_part_line1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/notification_template_text"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"@dimen/notification_progress_bar_height"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/notification_progress_margin_top"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"@layout/notification_template_progress"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/notification_template_smart_reply_container"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"@dimen/notification_content_margin"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/notification_template_right_icon"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的布局可看出分为三部分，头部、主内容、右图标。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
          <category> Notification </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Settings10主界面加载(二)</title>
      <link href="2021/10/14/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%BA%8C)/"/>
      <url>2021/10/14/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h6 id="DashboardFragmentRegistry-java"><a href="#DashboardFragmentRegistry-java" class="headerlink" title="DashboardFragmentRegistry.java"></a>DashboardFragmentRegistry.java</h6><blockquote><p>说到动态加载，先介绍下这个类DashboardFragmentRegistry.java。这个类主要作用类似于一个注册表的作用，注册记录什么界面(fragment)使用哪一个host去进行相应动态索引加载。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A registry to keep track of which page hosts which category.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DashboardFragmentRegistry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; PARENT_TO_CATEGORY_KEY_MAP;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; CATEGORY_KEY_TO_PARENT_MAP;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        PARENT_TO_CATEGORY_KEY_MAP = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">        PARENT_TO_CATEGORY_KEY_MAP.put(TopLevelSettings<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(),</span></span><br><span class="line"><span class="class">                <span class="title">CategoryKey</span>.<span class="title">CATEGORY_HOMEPAGE</span>)</span>;</span><br><span class="line"> ...</span><br><span class="line">        PARENT_TO_CATEGORY_KEY_MAP.put(LanguageAndInputSettings<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(),</span></span><br><span class="line"><span class="class">                <span class="title">CategoryKey</span>.<span class="title">CATEGORY_SYSTEM_LANGUAGE</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CATEGORY_KEY_TO_PARENT_MAP = <span class="keyword">new</span> ArrayMap&lt;&gt;(PARENT_TO_CATEGORY_KEY_MAP.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; parentToKey : PARENT_TO_CATEGORY_KEY_MAP.entrySet()) &#123;</span><br><span class="line">            CATEGORY_KEY_TO_PARENT_MAP.put(parentToKey.getValue(), parentToKey.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于目前主要记录主界面加载，而上篇分析道主界面fragment为TopLevelSettings.java，相应的CategoryKey为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CATEGORY_HOMEPAGE = <span class="string">"com.android.settings.category.ia.homepage"</span>;</span><br><span class="line"></span><br><span class="line">PARENT_TO_CATEGORY_KEY_MAP.put(TopLevelSettings<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(),</span></span><br><span class="line"><span class="class">                <span class="title">CategoryKey</span>.<span class="title">CATEGORY_HOMEPAGE</span>)</span>;</span><br></pre></td></tr></table></figure><p>可以看到主界面动态加载关键字应是”com.android.settings.category.ia.homepage”。</p><h6 id="refreshDashboardTiles"><a href="#refreshDashboardTiles" class="headerlink" title="refreshDashboardTiles()"></a>refreshDashboardTiles()</h6><p>上篇 <a href="http://wxyy97.com/categories/Android/Android-%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AE%BE%E7%BD%AE/%E8%AE%BE%E7%BD%AE%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD-%E4%B8%80/">设置主界面加载(一)</a> 记录到DashboardFragment.java的refreshDashboardTiles()方法主要是用DashboardCategory动态加载设置项的。</p><p>先来整体看看此方法相关逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Refresh preference items backed by DashboardCategory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refreshDashboardTiles</span><span class="params">(<span class="keyword">final</span> String TAG)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">    <span class="keyword">final</span> DashboardCategory category =</span><br><span class="line">            mDashboardFeatureProvider.getTilesForCategory(getCategoryKey());</span><br><span class="line">    <span class="keyword">if</span> (category == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"NO dashboard tiles for "</span> + TAG);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Tile&gt; tiles = category.getTiles();</span><br><span class="line">    <span class="keyword">if</span> (tiles == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"tile list is empty, skipping category "</span> + category.key);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a list to track which tiles are to be removed.</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; remove = <span class="keyword">new</span> ArrayList&lt;&gt;(mDashboardTilePrefKeys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are dashboard tiles, so we need to install SummaryLoader.</span></span><br><span class="line">    <span class="keyword">if</span> (mSummaryLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mSummaryLoader.release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Context context = getContext();</span><br><span class="line">    mSummaryLoader = <span class="keyword">new</span> SummaryLoader(getActivity(), getCategoryKey());</span><br><span class="line">    mSummaryLoader.setSummaryConsumer(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// Install dashboard tiles.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forceRoundedIcons = shouldForceRoundedIcon();</span><br><span class="line">    <span class="keyword">for</span> (Tile tile : tiles) &#123;</span><br><span class="line">        <span class="keyword">final</span> String key = mDashboardFeatureProvider.getDashboardKeyForTile(tile);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(key)) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"tile does not contain a key, skipping "</span> + tile);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!displayTile(tile)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mDashboardTilePrefKeys.contains(key)) &#123;</span><br><span class="line">            <span class="comment">// Have the key already, will rebind.</span></span><br><span class="line">            <span class="keyword">final</span> Preference preference = screen.findPreference(key);</span><br><span class="line">            mDashboardFeatureProvider.bindPreferenceToTile(getActivity(), forceRoundedIcons,</span><br><span class="line">                    getMetricsCategory(), preference, tile, key,</span><br><span class="line">                    mPlaceholderPreferenceController.getOrder());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Don't have this key, add it.</span></span><br><span class="line">            <span class="keyword">final</span> Preference pref = <span class="keyword">new</span> Preference(getPrefContext());</span><br><span class="line">            mDashboardFeatureProvider.bindPreferenceToTile(getActivity(), forceRoundedIcons,</span><br><span class="line">                    getMetricsCategory(), pref, tile, key,</span><br><span class="line">                    mPlaceholderPreferenceController.getOrder());</span><br><span class="line">            screen.addPreference(pref);</span><br><span class="line">            mDashboardTilePrefKeys.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">        remove.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Finally remove tiles that are gone.</span></span><br><span class="line">    <span class="keyword">for</span> (String key : remove) &#123;</span><br><span class="line">        mDashboardTilePrefKeys.remove(key);</span><br><span class="line">        <span class="keyword">final</span> Preference preference = screen.findPreference(key);</span><br><span class="line">        <span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            screen.removePreference(preference);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mSummaryLoader.setListening(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中TAG为”TopLevelSettings”。</p><h6 id="getTilesForCategory"><a href="#getTilesForCategory" class="headerlink" title="getTilesForCategory()"></a>getTilesForCategory()</h6><blockquote><p>packages/apps/Settings/src/com/android/settings/dashboard/DashboardFeatureProviderImpl.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> DashboardCategory category =</span><br><span class="line">                mDashboardFeatureProvider.getTilesForCategory(getCategoryKey());</span><br></pre></td></tr></table></figure><p>1、先来看 getCategoryKey()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the CategoryKey for loading &#123;<span class="doctag">@link</span> DashboardCategory&#125; for this fragment.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCategoryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> DashboardFragmentRegistry.PARENT_TO_CATEGORY_KEY_MAP.get(getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法是获取相关fragment的CategoryKey用于动态加载，根据上面分析主界面是TopLevelSettings.java，故而key为”com.android.settings.category.ia.homepage”。</p><p>2、继续看 getTilesForCategory方法()，具体实现是在 DashboardFeatureProviderImpl.java 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DashboardCategory <span class="title">getTilesForCategory</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mCategoryManager.getTilesByCategory(mContext, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryManager.java的 getTilesByCategory() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> DashboardCategory <span class="title">getTilesByCategory</span><span class="params">(Context context, String categoryKey)</span> </span>&#123;</span><br><span class="line">    tryInitCategories(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mCategoryByKeyMap.get(categoryKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到方法返回值是通过关键字key（“com.android.settings.category.ia.homepage”）去map集合中索引返回DashboardCategory的对象，故tryInitCategories()方法肯定是存在加载然后对map赋值的操作。直接看 tryInitCategories() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">tryInitCategories</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Keep cached tiles by default. The cache is only invalidated when InterestingConfigChange</span></span><br><span class="line">    <span class="comment">// happens.</span></span><br><span class="line">    tryInitCategories(context, <span class="keyword">false</span> <span class="comment">/* forceClearCache */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">tryInitCategories</span><span class="params">(Context context, <span class="keyword">boolean</span> forceClearCache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCategories == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (forceClearCache) &#123;</span><br><span class="line">            mTileByComponentCache.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    mCategoryByKeyMap.clear();</span><br><span class="line">    mCategories = TileUtils.getCategories(context, mTileByComponentCache);</span><br><span class="line">        <span class="keyword">for</span> (DashboardCategory category : mCategories) &#123;</span><br><span class="line">        mCategoryByKeyMap.put(category.key, category);</span><br><span class="line">        &#125;</span><br><span class="line">        backwardCompatCleanupForCategory(mTileByComponentCache, mCategoryByKeyMap);</span><br><span class="line">        sortCategories(context, mCategoryByKeyMap);</span><br><span class="line">        filterDuplicateTiles(mCategoryByKeyMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先清空mCategoryByKeyMap集合；</li><li>调用getCategories()方法，去查询构建DashboardCategory的list列表；</li><li>遍历list填充mCategoryByKeyMap集合；</li><li>检查是否使用旧的category keys，如果是，使用最新的category keys去替换；</li><li>排序；</li><li>去掉category中重复的tiles。</li></ol><p>可以看到主要还是getCategories()方法去获取相关数据：</p><blockquote><p> frameworks/base/packages/SettingsLib/Tile/src/com/android/settingslib/drawer/TileUtils.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Build a list of DashboardCategory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;DashboardCategory&gt; <span class="title">getCategories</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;Pair&lt;String, String&gt;, Tile&gt; cache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">boolean</span> setup = Global.getInt(context.getContentResolver(), Global.DEVICE_PROVISIONED, <span class="number">0</span>)</span><br><span class="line">            != <span class="number">0</span>;</span><br><span class="line">    ArrayList&lt;Tile&gt; tiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);</span><br><span class="line">    <span class="keyword">for</span> (UserHandle user : userManager.getUserProfiles()) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Needs much optimization, too many PM queries going on here.</span></span><br><span class="line">        <span class="keyword">if</span> (user.getIdentifier() == ActivityManager.getCurrentUser()) &#123;</span><br><span class="line">            <span class="comment">// Only add Settings for this user.</span></span><br><span class="line">            getTilesForAction(context, user, SETTINGS_ACTION, cache, <span class="keyword">null</span>, tiles, <span class="keyword">true</span>);</span><br><span class="line">            getTilesForAction(context, user, OPERATOR_SETTINGS, cache,</span><br><span class="line">                    OPERATOR_DEFAULT_CATEGORY, tiles, <span class="keyword">false</span>);</span><br><span class="line">            getTilesForAction(context, user, MANUFACTURER_SETTINGS, cache,</span><br><span class="line">                    MANUFACTURER_DEFAULT_CATEGORY, tiles, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (setup) &#123;</span><br><span class="line">            getTilesForAction(context, user, EXTRA_SETTINGS_ACTION, cache, <span class="keyword">null</span>, tiles, <span class="keyword">false</span>);</span><br><span class="line">            getTilesForAction(context, user, IA_SETTINGS_ACTION, cache, <span class="keyword">null</span>, tiles, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, DashboardCategory&gt; categoryMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Tile tile : tiles) &#123;</span><br><span class="line">        <span class="keyword">final</span> String categoryKey = tile.getCategory();</span><br><span class="line">        DashboardCategory category = categoryMap.get(categoryKey);</span><br><span class="line">        <span class="keyword">if</span> (category == <span class="keyword">null</span>) &#123;</span><br><span class="line">            category = <span class="keyword">new</span> DashboardCategory(categoryKey);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (category == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.w(LOG_TAG, <span class="string">"Couldn't find category "</span> + categoryKey);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            categoryMap.put(categoryKey, category);</span><br><span class="line">        &#125;</span><br><span class="line">        category.addTile(tile);</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;DashboardCategory&gt; categories = <span class="keyword">new</span> ArrayList&lt;&gt;(categoryMap.values());</span><br><span class="line">    <span class="keyword">for</span> (DashboardCategory category : categories) &#123;</span><br><span class="line">        category.sortTiles();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_TIMING) &#123;</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"getCategories took "</span></span><br><span class="line">                + (System.currentTimeMillis() - startTime) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> categories;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断是否完成开机向导设置，setup 为true时表明已完成；</li><li>新建tiles 集合</li><li>遍历设备中所有用户，调用getTilesForAction()方法根据相关action获取相关tiles，填充tiles集合；设置中主要通过此action去搜索系统中符合的活动去作为主界面TopLevelSettings的tile，相关action定义如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_SETTINGS_ACTION = <span class="string">"com.android.settings.action.EXTRA_SETTINGS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@See</span> &#123;<span class="doctag">@link</span> #EXTRA_SETTINGS_ACTION&#125;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IA_SETTINGS_ACTION = <span class="string">"com.android.settings.action.IA_SETTINGS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Same as #EXTRA_SETTINGS_ACTION but used for the platform Settings activities.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SETTINGS_ACTION = <span class="string">"com.android.settings.action.SETTINGS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPERATOR_SETTINGS =</span><br><span class="line"><span class="string">"com.android.settings.OPERATOR_APPLICATION_SETTING"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPERATOR_DEFAULT_CATEGORY =</span><br><span class="line"><span class="string">"com.android.settings.category.wireless"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MANUFACTURER_SETTINGS =</span><br><span class="line"><span class="string">"com.android.settings.MANUFACTURER_APPLICATION_SETTING"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MANUFACTURER_DEFAULT_CATEGORY =</span><br><span class="line"><span class="string">"com.android.settings.category.device"</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>新建categoryMap集合， HashMap&lt;String, DashboardCategory&gt; categoryMap，其中map的key为categoryKey；</p></li><li><p>遍历tiles集合，以每个tile的tile.getCategory()的值为构造参数，创建DashboardCategory对象，并将tile添加到此对象中，将此填充到map集合中；</p></li><li><p>将categoryMap的值赋值给ArrayList cagtories以便执行排序算法，遍历新集合利用Collections函数和比较器TILE_COMPARATOR将category.tiles按照priority从大到小排序。</p></li></ol><p>可以看到主要调用getTilesForAction()方法获取数据源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTilesForAction</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        UserHandle user, String action, Map&lt;Pair&lt;String, String&gt;, Tile&gt; addedCache,</span></span></span><br><span class="line"><span class="function"><span class="params">        String defaultCategory, List&lt;Tile&gt; outTiles, <span class="keyword">boolean</span> requireSettings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(action);</span><br><span class="line">    <span class="keyword">if</span> (requireSettings) &#123;</span><br><span class="line">        intent.setPackage(SETTING_PKG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = context.getPackageManager();</span><br><span class="line">    List&lt;ResolveInfo&gt; results = pm.queryIntentActivitiesAsUser(intent,</span><br><span class="line">            PackageManager.GET_META_DATA, user.getIdentifier());</span><br><span class="line">    <span class="keyword">for</span> (ResolveInfo resolved : results) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!resolved.system) &#123;</span><br><span class="line">            <span class="comment">// Do not allow any app to add to settings, only system ones.</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ActivityInfo activityInfo = resolved.activityInfo;</span><br><span class="line">        Bundle metaData = activityInfo.metaData;</span><br><span class="line">        String categoryKey = defaultCategory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load category</span></span><br><span class="line">        <span class="keyword">if</span> ((metaData == <span class="keyword">null</span> || !metaData.containsKey(EXTRA_CATEGORY_KEY))</span><br><span class="line">                &amp;&amp; categoryKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(LOG_TAG, <span class="string">"Found "</span> + resolved.activityInfo.name + <span class="string">" for intent "</span></span><br><span class="line">                    + intent + <span class="string">" missing metadata "</span></span><br><span class="line">                    + (metaData == <span class="keyword">null</span> ? <span class="string">""</span> : EXTRA_CATEGORY_KEY));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            categoryKey = metaData.getString(EXTRA_CATEGORY_KEY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pair&lt;String, String&gt; key = <span class="keyword">new</span> Pair&lt;&gt;(activityInfo.packageName, activityInfo.name);</span><br><span class="line">        Tile tile = addedCache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (tile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tile = <span class="keyword">new</span> Tile(activityInfo, categoryKey);</span><br><span class="line">            addedCache.put(key, tile);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tile.setMetaData(metaData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!tile.userHandle.contains(user)) &#123;</span><br><span class="line">            tile.userHandle.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!outTiles.contains(tile)) &#123;</span><br><span class="line">            outTiles.add(tile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>通过action构建intent，根据requireSettings来决定是否指定Settings进程包名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(action);</span><br><span class="line"><span class="keyword">if</span> (requireSettings) &#123;</span><br><span class="line">intent.setPackage(SETTING_PKG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用PM查询符合相关intent action支持的ResolveInfo集合，每个ResolveInfo对象主要是从AndroidManifest.xml中解析出的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PackageManager pm = context.getPackageManager();</span><br><span class="line">List&lt;ResolveInfo&gt; results = pm.queryIntentActivitiesAsUser(intent,</span><br><span class="line">PackageManager.GET_META_DATA, user.getIdentifier());</span><br></pre></td></tr></table></figure></li><li><p>遍历ResolveInfo集合，获取集合中每一个ResolveInfo对象，判断是否是系统进程，是否AndroidManifest.xml配置的meta标签name包含com.android.settings.category并解析其value值，构建tile对象，并将此添加到tiles集合内输出。</p></li></ol><p><strong>可以看到每个Tile对象，都是包含有从AndroidManifest.xml解析出的Resolveinfo对象和解析meta标签name包含com.android.settings.category value的值。</strong></p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><ol><li>遍历设备所有用户，调getTilesForAction()方法利用PM去检索设备中所有符合传入action的activity ResolveInfo；</li><li>判断每一个ResolveInfo是否是系统进程，是否AndroidManifest.xml中配置的meta标签name包含”com.android.settings.category”的 value，将符合条件的以此value的值和ResolveInfo对象构建tile对象；并以此构建填充tiles集合</li><li>构建HashMap&lt;String, DashboardCategory&gt; categoryMap集合，以AndroidManifest.xml中配置的meta标签name包含”com.android.settings.category”的 value值为参数来构建DashboardCategory对象，遍历tiles集合将符合条件的tile填充DashboardCategory对象（DashboardCategory对象即包含可以显示在界面上的设置项），并以value为key，DashboardCategory对象为value填充categoryMap集合；</li><li>将categoryMap的值赋值给ArrayList cagtories以便执行排序算法，遍历新集合利用Collections函数和比较器TILE_COMPARATOR将category.tiles按照priority从大到小排序。</li><li>经过对Categories集合的更新、排序、去重等操作，得到最终所需的mCategoryByKeyMap集合；</li><li>再根据所传入的TAG(TopLevelSettings)，去mCategoryByKeyMap集合检索，最终得出适合在Settings主界面TopLevelSettings中可以显示的DashboardCategory对象。</li></ol><p>继续回到refreshDashboardTiles()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> DashboardCategory category =</span><br><span class="line">mDashboardFeatureProvider.getTilesForCategory(getCategoryKey());</span><br><span class="line"><span class="keyword">if</span> (category == <span class="keyword">null</span>) &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"NO dashboard tiles for "</span> + TAG);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> List&lt;Tile&gt; tiles = category.getTiles();</span><br><span class="line"><span class="keyword">if</span> (tiles == <span class="keyword">null</span>) &#123;</span><br><span class="line">Log.d(TAG, <span class="string">"tile list is empty, skipping category "</span> + category.key);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过getTilesForCategory()方法得到适合在Settings主界面TopLevelSettings中可以显示的DashboardCategory对象。判断对象是否为空，对象内是否包含tiles集合；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a list to track which tiles are to be removed.</span></span><br><span class="line"><span class="keyword">final</span> List&lt;String&gt; remove = <span class="keyword">new</span> ArrayList&lt;&gt;(mDashboardTilePrefKeys);</span><br><span class="line"></span><br><span class="line"><span class="comment">// There are dashboard tiles, so we need to install SummaryLoader.</span></span><br><span class="line"><span class="keyword">if</span> (mSummaryLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">mSummaryLoader.release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Context context = getContext();</span><br><span class="line">mSummaryLoader = <span class="keyword">new</span> SummaryLoader(getActivity(), getCategoryKey());</span><br><span class="line">mSummaryLoader.setSummaryConsumer(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// Install dashboard tiles.</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> forceRoundedIcons = shouldForceRoundedIcon();</span><br></pre></td></tr></table></figure><ol><li>新建remove集合，跟踪哪些tile需要被移除的；</li><li>初始化SummaryLoader，顾名思义，主要用来加载更新tile的summary；即对于界面显示来说即preference的summary的更新；</li></ol><p>开始遍历适合在Settings主界面TopLevelSettings中可以显示的DashboardCategory对象内的tile集合，每个tile包含从AndroidManifest.xml解析出的resolveinfo对象，此即为初步符合条件可以显示在主界面的动态设置项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Tile tile : tiles) &#123;</span><br><span class="line">    <span class="keyword">final</span> String key = mDashboardFeatureProvider.getDashboardKeyForTile(tile);</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(key)) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"tile does not contain a key, skipping "</span> + tile);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!displayTile(tile)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDashboardTilePrefKeys.contains(key)) &#123;</span><br><span class="line">        <span class="comment">// Have the key already, will rebind.</span></span><br><span class="line">        <span class="keyword">final</span> Preference preference = screen.findPreference(key);</span><br><span class="line">        mDashboardFeatureProvider.bindPreferenceToTile(getActivity(), forceRoundedIcons,</span><br><span class="line">                getMetricsCategory(), preference, tile, key,</span><br><span class="line">                mPlaceholderPreferenceController.getOrder());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Don't have this key, add it.</span></span><br><span class="line">        <span class="keyword">final</span> Preference pref = <span class="keyword">new</span> Preference(getPrefContext());</span><br><span class="line">        mDashboardFeatureProvider.bindPreferenceToTile(getActivity(), forceRoundedIcons,</span><br><span class="line">                getMetricsCategory(), pref, tile, key,</span><br><span class="line">                mPlaceholderPreferenceController.getOrder());</span><br><span class="line">        screen.addPreference(pref);</span><br><span class="line">        mDashboardTilePrefKeys.add(key);</span><br><span class="line">    &#125;</span><br><span class="line">    remove.remove(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>getDashboardKeyForTile()；DashboardFeatureProviderImpl.java的getDashboardKeyForTile()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDashboardKeyForTile</span><span class="params">(Tile tile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tile == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tile.hasKey()) &#123;</span><br><span class="line">        <span class="keyword">return</span> tile.getKey(mContext);<span class="comment">//是否包含 com.android.settings.keyhint</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(DASHBOARD_TILE_PREF_KEY_PREFIX);</span><br><span class="line">    <span class="keyword">final</span> ComponentName component = tile.getIntent().getComponent();</span><br><span class="line">    sb.append(component.getClassName());</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断AndroidManifest.xml中是否配置了meta标签name为”com.android.settings.keyhint”的属性；</p><p> 如果配置，则获取其value值作为后续显示在界面的preference的key值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optional key to use for this tile.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasKey()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ensureMetadataNotStale(context);</span><br><span class="line">    <span class="keyword">if</span> (mMetaData.get(META_DATA_PREFERENCE_KEYHINT) <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getResources().getString(mMetaData.getInt(META_DATA_PREFERENCE_KEYHINT));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mMetaData.getString(META_DATA_PREFERENCE_KEYHINT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ensureMetadataNotStale()方法主要是确保能获取最新的mMetaData：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ensures metadata is not stale for this tile.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureMetadataNotStale</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = context.getApplicationContext().getPackageManager();</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> lastUpdateTime = pm.getPackageInfo(mActivityPackage,</span><br><span class="line">                PackageManager.GET_META_DATA).lastUpdateTime;</span><br><span class="line">        <span class="keyword">if</span> (lastUpdateTime == mLastUpdateTime) &#123;</span><br><span class="line">            <span class="comment">// All good. Do nothing</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// App has been updated since we load metadata last time. Reload metadata.</span></span><br><span class="line">        mActivityInfo = <span class="keyword">null</span>;</span><br><span class="line">        getActivityInfo(context);</span><br><span class="line">        mLastUpdateTime = lastUpdateTime;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Can't find package, probably uninstalled."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">private</span> ActivityInfo <span class="title">getActivityInfo</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mActivityInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageManager pm = context.getApplicationContext().getPackageManager();</span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent().setClassName(mActivityPackage, mActivityName);</span><br><span class="line">        <span class="keyword">final</span> List&lt;ResolveInfo&gt; infoList =</span><br><span class="line">                pm.queryIntentActivities(intent, PackageManager.GET_META_DATA);</span><br><span class="line">        <span class="keyword">if</span> (infoList != <span class="keyword">null</span> &amp;&amp; !infoList.isEmpty()) &#123;</span><br><span class="line">            mActivityInfo = infoList.get(<span class="number">0</span>).activityInfo;</span><br><span class="line">            mMetaData = mActivityInfo.metaData;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Cannot find package info for "</span></span><br><span class="line">                    + intent.getComponent().flattenToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mActivityInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询此App最后一次修改的时间与上一次修改时间是否一致，如果不是则重新通过PM查询更新mMetaData属性，确保mMetaData属性是从App内获取到的最新的。</p><p>如果未配置meta标签name为”com.android.settings.keyhint”的属性，则通过将activity name拼接处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(DASHBOARD_TILE_PREF_KEY_PREFIX);</span><br><span class="line"><span class="keyword">final</span> ComponentName component = tile.getIntent().getComponent();</span><br><span class="line">sb.append(component.getClassName());</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br></pre></td></tr></table></figure><p>以语言和输入法设置项为例：</p><p>其拼接处理后即为：”dashboard_tile_pref_com.android.settings.Settings$LanguageAndInputSettingsActivity”</p></li><li><p>判断获取到的key是否为空，判断此设置项是否需要被显示；</p></li><li><p>调用bindPreferenceToTile()方法，对preference进行数据绑定；</p></li><li><p>调用setListening()方法，设置监听，以便于后续各个preference后续可以自行根据需要更新summary。</p></li></ol><h6 id="bindPreferenceToTile"><a href="#bindPreferenceToTile" class="headerlink" title="bindPreferenceToTile()"></a>bindPreferenceToTile()</h6><blockquote><p>packages/apps/Settings/src/com/android/settings/dashboard/DashboardFeatureProviderImpl.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindPreferenceToTile</span><span class="params">(FragmentActivity activity, <span class="keyword">boolean</span> forceRoundedIcon,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> sourceMetricsCategory, Preference pref, Tile tile, String key, <span class="keyword">int</span> baseOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pref == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pref.setTitle(tile.getTitle(activity.getApplicationContext()));</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(key)) &#123;</span><br><span class="line">        pref.setKey(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pref.setKey(getDashboardKeyForTile(tile));</span><br><span class="line">    &#125;</span><br><span class="line">    bindSummary(pref, tile);</span><br><span class="line">    bindIcon(pref, tile, forceRoundedIcon);</span><br><span class="line">    <span class="keyword">final</span> Bundle metadata = tile.getMetaData();</span><br><span class="line">    String clsName = <span class="keyword">null</span>;</span><br><span class="line">    String action = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">        clsName = metadata.getString(SettingsActivity.META_DATA_KEY_FRAGMENT_CLASS);</span><br><span class="line">        action = metadata.getString(META_DATA_KEY_INTENT_ACTION);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(clsName)) &#123;</span><br><span class="line">        pref.setFragment(clsName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(tile.getIntent());</span><br><span class="line">        intent.putExtra(MetricsFeatureProvider.EXTRA_SOURCE_METRICS_CATEGORY,</span><br><span class="line">                sourceMetricsCategory);</span><br><span class="line">        <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.setAction(action);</span><br><span class="line">        &#125;</span><br><span class="line">        pref.setOnPreferenceClickListener(preference -&gt; &#123;</span><br><span class="line">            launchIntentOrSelectProfile(activity, tile, intent, sourceMetricsCategory);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> String skipOffsetPackageName = activity.getPackageName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tile.hasOrder()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> order = tile.getOrder();</span><br><span class="line">        <span class="keyword">boolean</span> shouldSkipBaseOrderOffset = TextUtils.equals(</span><br><span class="line">                skipOffsetPackageName, tile.getIntent().getComponent().getPackageName());</span><br><span class="line">        <span class="keyword">if</span> (shouldSkipBaseOrderOffset || baseOrder == Preference.DEFAULT_ORDER) &#123;</span><br><span class="line">            pref.setOrder(order);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pref.setOrder(order + baseOrder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>设置preference title，根据getTitle()方法获取title：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pref.setTitle(tile.getTitle(activity.getApplicationContext()));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title of the tile that is shown to the user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharSequence <span class="title">getTitle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    CharSequence title = <span class="keyword">null</span>;</span><br><span class="line">    ensureMetadataNotStale(context);</span><br><span class="line">    <span class="keyword">final</span> PackageManager packageManager = context.getPackageManager();</span><br><span class="line">    <span class="keyword">if</span> (mMetaData.containsKey(META_DATA_PREFERENCE_TITLE)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mMetaData.get(META_DATA_PREFERENCE_TITLE) <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Resources res =</span><br><span class="line">                        packageManager.getResourcesForApplication(mActivityPackage);</span><br><span class="line">                title = res.getString(mMetaData.getInt(META_DATA_PREFERENCE_TITLE));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException | Resources.NotFoundException e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Couldn't find info"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            title = mMetaData.getString(META_DATA_PREFERENCE_TITLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Set the preference title to the activity's label if no</span></span><br><span class="line">    <span class="comment">// meta-data is found</span></span><br><span class="line">    <span class="keyword">if</span> (title == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityInfo activityInfo = getActivityInfo(context);</span><br><span class="line">        <span class="keyword">if</span> (activityInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        title = activityInfo.loadLabel(packageManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先确保tile中保存的meta的对象是最新的，再去读取AndroidManifest.xml中是否配置了Activity的meta标签name为”com.android.settings.title”的属性值，如果配置了则以此属性值为preference title；反之则再去尝试读取其AndroidManifest.xml配置的activity的 “android:label”属性值。</p></li><li><p>设置preference的key，主要还是通过调用getDashboardKeyForTile()方法去获取，上面已详细分析过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(key)) &#123;</span><br><span class="line">pref.setKey(key);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pref.setKey(getDashboardKeyForTile(tile));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置preference的summary:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindSummary(pref, tile);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindSummary</span><span class="params">(Preference preference, Tile tile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CharSequence summary = tile.getSummary(mContext);</span><br><span class="line">    <span class="keyword">if</span> (summary != <span class="keyword">null</span>) &#123;</span><br><span class="line">        preference.setSummary(summary);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tile.getMetaData() != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; tile.getMetaData().containsKey(META_DATA_PREFERENCE_SUMMARY_URI)) &#123;</span><br><span class="line">        <span class="comment">// Set a placeholder summary before  starting to fetch real summary, this is necessary</span></span><br><span class="line">        <span class="comment">// to avoid preference height change.</span></span><br><span class="line">        preference.setSummary(R.string.summary_placeholder);</span><br><span class="line"></span><br><span class="line">        ThreadUtils.postOnBackgroundThread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, IContentProvider&gt; providerMap = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> String uri = tile.getMetaData().getString(META_DATA_PREFERENCE_SUMMARY_URI);</span><br><span class="line">            <span class="keyword">final</span> String summaryFromUri = TileUtils.getTextFromUri(</span><br><span class="line">                    mContext, uri, providerMap, META_DATA_PREFERENCE_SUMMARY);</span><br><span class="line">            ThreadUtils.postOnMainThread(() -&gt; preference.setSummary(summaryFromUri));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        preference.setSummary(R.string.summary_placeholder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断tile对象是否设置了mSummaryOverride，是，则以此作为preference的summary；<br>其次再此确保此时tile保存的meta属性是最新的，通过读取”com.android.settings.summary_uri”、”com.android.settings.summary”属性，根据需要取其value作为preference的summary。</p></li><li><p>设置preference的icon，通过读取meta的属性”com.android.settings.icon_uri”、”com.android.settings.icon”的value的值；</p></li><li><p>设置preference的点击跳转界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Bundle metadata = tile.getMetaData();</span><br><span class="line">String clsName = <span class="keyword">null</span>;</span><br><span class="line">String action = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">    clsName = metadata.getString(SettingsActivity.META_DATA_KEY_FRAGMENT_CLASS);</span><br><span class="line">    action = metadata.getString(META_DATA_KEY_INTENT_ACTION);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(clsName)) &#123;</span><br><span class="line">    pref.setFragment(clsName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(tile.getIntent());</span><br><span class="line">    intent.putExtra(MetricsFeatureProvider.EXTRA_SOURCE_METRICS_CATEGORY,</span><br><span class="line">            sourceMetricsCategory);</span><br><span class="line">    <span class="keyword">if</span> (action != <span class="keyword">null</span>) &#123;</span><br><span class="line">        intent.setAction(action);</span><br><span class="line">    &#125;</span><br><span class="line">    pref.setOnPreferenceClickListener(preference -&gt; &#123;</span><br><span class="line">        launchIntentOrSelectProfile(activity, tile, intent, sourceMetricsCategory);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置了”com.android.settings.FRAGMENT_CLASS”属性，则直接设置此value为跳转的fragment；反之，则构建intent，设置点击监听，跳转activity；</p></li><li><p>如果设置了”com.android.settings.order”属性，则根据其value值来设置preference显示前后。order为负时，绝对值越高，界面显示越靠前；order为正时，值越高，显示越靠后。</p></li></ol><h6 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h6><ol><li>主要是通过解析tile对象内保存的meta属性去设置preference的title、key、summary、icon、跳转界面、order显示优先级；</li><li>Android 10.0中设置主界面的设置项除了加载三方应用的，其余设置基本都是top_level_settings.xml定义的</li></ol><h6 id="setListening"><a href="#setListening" class="headerlink" title="setListening()"></a>setListening()</h6><blockquote><p>packages/apps/Settings/src/com/android/settings/dashboard/SummaryLoader.java</p></blockquote><p> 回到refreshDashboardTiles()方法，看剩余语句，设置监听，以便于后续各个preference后续可以自行根据需要更新summary：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSummaryLoader.setListening(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Only call from the main thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListening</span><span class="params">(<span class="keyword">boolean</span> listening)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mListening == listening) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mListening = listening;</span><br><span class="line">    <span class="comment">// Unregister listeners immediately.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mReceivers.size(); i++) &#123;</span><br><span class="line">        mActivity.unregisterReceiver(mReceivers.valueAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    mReceivers.clear();</span><br><span class="line"></span><br><span class="line">    mWorker.removeMessages(Worker.MSG_SET_LISTENING);</span><br><span class="line">    <span class="keyword">if</span> (!listening) &#123;</span><br><span class="line">        <span class="comment">// Stop listen</span></span><br><span class="line">        mWorker.obtainMessage(Worker.MSG_SET_LISTENING, <span class="number">0</span> <span class="comment">/* listening */</span>).sendToTarget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Start listen</span></span><br><span class="line">        <span class="keyword">if</span> (mSummaryProviderMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Category not initialized yet, init before starting to listen</span></span><br><span class="line">            <span class="keyword">if</span> (!mWorker.hasMessages(Worker.MSG_GET_CATEGORY_TILES_AND_SET_LISTENING)) &#123;</span><br><span class="line">                mWorker.sendEmptyMessage(Worker.MSG_GET_CATEGORY_TILES_AND_SET_LISTENING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Category already initialized, start listening immediately</span></span><br><span class="line">            mWorker.obtainMessage(Worker.MSG_SET_LISTENING, <span class="number">1</span> <span class="comment">/* listening */</span>).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>清除遗留的handle消息”MSG_SET_LISTENING”；</li><li>listening为false时，表面需要暂停监听；</li><li>为true时，判断是否已经初始化mSummaryProviderMap，是则直接发送”MSG_SET_LISTENING”消息，开始监听。否则发送”MSG_GET_CATEGORY_TILES_AND_SET_LISTENING”消息，初始化并开启监听；</li></ol><p>直接看Work：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_GET_CATEGORY_TILES_AND_SET_LISTENING = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_GET_PROVIDER = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SET_LISTENING = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MSG_GET_CATEGORY_TILES_AND_SET_LISTENING:</span><br><span class="line">                <span class="keyword">final</span> DashboardCategory category =</span><br><span class="line">                        mDashboardFeatureProvider.getTilesForCategory(mCategoryKey);</span><br><span class="line">                <span class="keyword">if</span> (category == <span class="keyword">null</span> || category.getTilesCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> List&lt;Tile&gt; tiles = category.getTiles();</span><br><span class="line">                <span class="keyword">for</span> (Tile tile : tiles) &#123;</span><br><span class="line">                    makeProviderW(tile);</span><br><span class="line">                &#125;</span><br><span class="line">                setListeningW(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_GET_PROVIDER:</span><br><span class="line">                Tile tile = (Tile) msg.obj;</span><br><span class="line">                makeProviderW(tile);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MSG_SET_LISTENING:</span><br><span class="line">                <span class="keyword">boolean</span> listening = msg.obj != <span class="keyword">null</span> &amp;&amp; msg.obj.equals(<span class="number">1</span>);</span><br><span class="line">                setListeningW(listening);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“MSG_GET_CATEGORY_TILES_AND_SET_LISTENING”:</p><ol><li><p>调用getTilesForCategory()、getTiles()方法获取可以显示在当前界面的设置项，这两个方法上面都有分析到；</p></li><li><p>makeProviderW()：遍历tiles集合，执行makeProviderW()方法，获取每个tile对象的SummaryProvider对象，填充mSummaryProviderMap集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">makeProviderW</span><span class="params">(Tile tile)</span> </span>&#123;</span><br><span class="line">    SummaryProvider provider = getSummaryProvider(tile);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"Creating "</span> + tile);</span><br><span class="line">        mSummaryProviderMap.put(provider, tile.getIntent().getComponent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用getSummaryProvider()方法获取SummaryProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SummaryProvider <span class="title">getSummaryProvider</span><span class="params">(Tile tile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mActivity.getPackageName().equals(tile.getPackageName())) &#123;</span><br><span class="line">        <span class="comment">// Not within Settings, can't load Summary directly.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Load summary indirectly.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Bundle metaData = tile.getMetaData();</span><br><span class="line">    <span class="keyword">final</span> Intent intent = tile.getIntent();</span><br><span class="line">    <span class="keyword">if</span> (metaData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"No metadata specified for "</span> + intent.getComponent());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> String clsName = metaData.getString(SettingsActivity.META_DATA_KEY_FRAGMENT_CLASS);</span><br><span class="line">    <span class="keyword">if</span> (clsName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"No fragment specified for "</span> + intent.getComponent());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(clsName);</span><br><span class="line">        Field field = cls.getField(SUMMARY_PROVIDER_FACTORY);</span><br><span class="line">        SummaryProviderFactory factory = (SummaryProviderFactory) field.get(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.createSummaryProvider(mActivity, <span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"Couldn't find "</span> + clsName, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"Couldn't find "</span> + SUMMARY_PROVIDER_FACTORY, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"Couldn't cast "</span> + SUMMARY_PROVIDER_FACTORY, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">"Couldn't get "</span> + SUMMARY_PROVIDER_FACTORY, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析tile对象内保存的meta属性name为”com.android.settings.FRAGMENT_CLASS”的value值，获取class name，通过反射获取该类的”SUMMARY_PROVIDER_FACTORY”变量，调用SummaryProviderFactory接口方法createSummaryProvider()，而其方法的具体实现是在此类中，以DateTimeSettings.java类为例：</p><blockquote><p> packages/apps/Settings/src/com/android/settings/DateTimeSettings.java：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SummaryProvider</span> <span class="keyword">implements</span> <span class="title">SummaryLoader</span>.<span class="title">SummaryProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SummaryLoader mSummaryLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SummaryProvider</span><span class="params">(Context context, SummaryLoader summaryLoader)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mSummaryLoader = summaryLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListening</span><span class="params">(<span class="keyword">boolean</span> listening)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (listening) &#123;</span><br><span class="line">            <span class="keyword">final</span> Calendar now = Calendar.getInstance();</span><br><span class="line">            mSummaryLoader.setSummary(<span class="keyword">this</span>, ZoneGetter.getTimeZoneOffsetAndName(mContext,</span><br><span class="line">                    now.getTimeZone(), now.getTime()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SummaryLoader.SummaryProviderFactory SUMMARY_PROVIDER_FACTORY</span><br><span class="line">        = <span class="keyword">new</span> SummaryLoader.SummaryProviderFactory() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SummaryLoader.<span class="function">SummaryProvider <span class="title">createSummaryProvider</span><span class="params">(Activity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">            SummaryLoader summaryLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SummaryProvider(activity, summaryLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>故getSummaryProvider()方法实质就是返回tile对象相对应的类内定义的SummaryProvider的对象，而此mSummaryProviderMap内保存的就是所有AndroidManifest.xml中定义的可在界面显示的设置项的类内定义的SummaryProvider的对象。</p></li><li><p>调用setListeningW方法，开始监听：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setListeningW</span><span class="params">(<span class="keyword">boolean</span> listening)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWorkerListening == listening) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mWorkerListening = listening;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Listening "</span> + listening);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (SummaryProvider p : mSummaryProviderMap.keySet()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.setListening(listening);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Problem in setListening"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到所谓的开始”监听”，也只不过是遍历所有的SummaryProvider对象，调用其setListening()方法；</p><p><strong>MSG_GET_PROVIDER</strong>：</p><p><strong>MSG_SET_LISTENING：</strong></p><p>这两个消息实质也是分别调用makeProviderW()、setListeningW()方法；</p><h6 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h6><p>遍历当前通过AndroidManifest.xml配置的可以显示的设置项的fragment，判断其内是否定义变量”SUMMARY_PROVIDER_FACTORY”，调用接口方法setListening()方法，实现设置项preference的summary的更新。</p><h5 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h5><ol><li>refreshDashboardTiles()主要是动态的通过PM从AndroidManifest.xml中读取相关配置来加载可以显示的设置item；</li><li>getTilesForCategory()；通过PM去检索AndroidManifest.xml中符合相关action的可以显示在当前fragment上的设置项；</li><li>bindPreferenceToTile()；解析AndroidManifest.xml中配置的meta属性来对设置项preference进行数据绑定；</li><li>setListening()；预留接口，方便各个设置项本身可以通过此来更新preference的summary；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> 设置主界面加载(二) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java调用内部类</title>
      <link href="2021/10/12/Java%E8%B0%83%E7%94%A8%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>2021/10/12/Java%E8%B0%83%E7%94%A8%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>之前一个类中需要调用另一个类当中的内部类(广播接收器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先，您必须创建X类（外部类）objX.<span class="keyword">new</span> InnerClass()的对象，然后使用语法创建Y类的对象。</span><br><span class="line"></span><br><span class="line">X x=<span class="keyword">new</span> X();</span><br><span class="line">X.Y y=x.<span class="keyword">new</span> Y();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VPN过滤指定应用</title>
      <link href="2021/10/11/%C2%96VPN%E8%BF%87%E6%BB%A4%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8/"/>
      <url>2021/10/11/%C2%96VPN%E8%BF%87%E6%BB%A4%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h6 id="一、概念-官网对于VPN的介绍"><a href="#一、概念-官网对于VPN的介绍" class="headerlink" title="一、概念: 官网对于VPN的介绍"></a>一、概念: <a href="https://developer.android.google.cn/guide/topics/connectivity/vpn#per-app" target="_blank" rel="noopener">官网对于VPN的介绍</a></h6><h6 id="二、查询指定包名走的是WIFI还是VPN："><a href="#二、查询指定包名走的是WIFI还是VPN：" class="headerlink" title="二、查询指定包名走的是WIFI还是VPN："></a>二、查询指定包名走的是WIFI还是VPN：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> connMgr= (ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line"> PackageManager pm = mContext.getPackageManager();</span><br><span class="line"> ApplicationInfo applicationInfo = pm.getApplicationInfo(<span class="string">"com.ss.android.ugc.aweme"</span>, PackageManager.GET_ACTIVITIES);</span><br><span class="line"> <span class="keyword">if</span> (connMgr == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Method method = connMgr.getClass().getMethod(<span class="string">"getActiveNetworkForUid"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">Network network = (Network) method.invoke(connMgr,applicationInfo.uid, <span class="keyword">false</span>);</span><br><span class="line">     <span class="comment">//NetworkInfo info = connMgr.getNetworkInfo(network);</span></span><br><span class="line">NetworkCapabilities capabilities = connMgr.getNetworkCapabilities(network); </span><br><span class="line"> <span class="keyword">boolean</span> isConnect = capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);</span><br><span class="line"> Log.v(<span class="string">"wangxin333"</span>, <span class="string">"packageName = com.ss.android.ugc.aweme ,"</span> + <span class="string">" Network = "</span> + network.toString() + <span class="string">" , isConnect = "</span> + isConnect);</span><br><span class="line"> <span class="keyword">if</span>(capabilities.hasTransport(NetworkCapabilities.TRANSPORT_VPN))&#123;</span><br><span class="line">      Log.v(<span class="string">"wangxin333"</span>, <span class="string">"VPN"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI))&#123;</span><br><span class="line">      Log.v(<span class="string">"wangxin333"</span>, <span class="string">"WIFI"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="三、绕过vpn做法："><a href="#三、绕过vpn做法：" class="headerlink" title="三、绕过vpn做法："></a>三、绕过vpn做法：</h6><blockquote><p>VPN连接时过滤掉bin文件，走系统正常的网络</p></blockquote><p>官方文档里面有对禁止和允许使用VPN的相关介绍：</p><blockquote><p>VPN 应用可以过滤允许哪些已安装的应用通过 VPN 连接发送流量。<br>1、您可以创建允许列表，也可以创建禁止列表，但不能同时创建这两者。如果您不创建允许或禁止列表，系统会通过 VPN 发送所有网络流量。<br>2、您的 VPN 应用必须先设置列表，然后建立连接。如果您需要更改列表，请建立新的 VPN 连接。<br>3、当您将应用添加到列表中时，该应用必须已安装在设备上</p></blockquote><p>官方给出的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The apps that will have access to the VPN.</span></span><br><span class="line">    String[] appPackages = &#123;</span><br><span class="line">        <span class="string">"com.android.chrome"</span>,</span><br><span class="line">        <span class="string">"com.google.android.youtube"</span>,</span><br><span class="line">        <span class="string">"com.example.a.missing.app"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop through the app packages in the array and confirm that the app is</span></span><br><span class="line">    <span class="comment">// installed before adding the app to the allowed list.</span></span><br><span class="line"><span class="comment">//辅助类来创建VPN接口，里面有一个mConfig（VpnConfig），配置连接时的属性</span></span><br><span class="line">    VpnService.Builder builder = <span class="keyword">new</span> VpnService.Builder();</span><br><span class="line">    PackageManager packageManager = getPackageManager();</span><br><span class="line">    <span class="keyword">for</span> (String appPackage: appPackages) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        packageManager.getPackageInfo(appPackage, <span class="number">0</span>);</span><br><span class="line">        builder.addAllowedApplication(appPackage);<span class="comment">//这里</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// The app isn't installed.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Complete the VPN interface config.</span></span><br><span class="line">    ParcelFileDescriptor localTunnel = builder</span><br><span class="line">        .addAddress(<span class="string">"2001:db8::1"</span>, <span class="number">64</span>)</span><br><span class="line">        .addRoute(<span class="string">"::"</span>, <span class="number">0</span>)</span><br><span class="line">        .establish();</span><br></pre></td></tr></table></figure><p>addAllowedApplication和addDisallowedApplication同理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">addDisallowedApplication</span><span class="params">(@NonNull String packageName)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> PackageManager.NameNotFoundException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mConfig.allowedApplications != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"addAllowedApplication already called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    verifyApp(packageName);</span><br><span class="line">    <span class="keyword">if</span> (mConfig.disallowedApplications == <span class="keyword">null</span>) &#123;</span><br><span class="line">       mConfig.disallowedApplications = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    mConfig.disallowedApplications.add(packageName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要找到这个mConfig在哪里使用，因为这些是VPN客户端的api，再接下来看下它的连接步骤：</p><blockquote><ol><li>调用 <a href="https://developer.android.google.cn/reference/android/net/VpnService#prepare(android.content.Context)" target="_blank" rel="noopener"><code>VpnService.prepare()</code></a> 以询问权限（需要时）。</li><li>调用 <a href="https://developer.android.google.cn/reference/android/net/VpnService#protect(int)" target="_blank" rel="noopener"><code>VpnService.protect()</code></a> 以将应用的隧道套接字保留在系统 VPN 外部，并避免发生循环连接。</li><li>调用 <a href="https://developer.android.google.cn/reference/java/net/DatagramSocket#connect(java.net.SocketAddress)" target="_blank" rel="noopener"><code>DatagramSocket.connect()</code></a> 以将您应用的隧道套接字连接到 VPN 网关。</li><li>调用 <a href="https://developer.android.google.cn/reference/android/net/VpnService.Builder" target="_blank" rel="noopener"><code>VpnService.Builder</code></a> 方法以在设备上为 VPN 流量配置新的本地 <a href="https://en.wikipedia.org/wiki/TUN/TAP" target="_blank" rel="noopener">TUN</a> 接口。</li><li>调用 <a href="https://developer.android.google.cn/reference/android/net/VpnService.Builder#establish()" target="_blank" rel="noopener"><code>VpnService.Builder.establish()</code></a>，获取读写数据包用到的 VPN接口的文件描述符, 并开始通过该接口传送流量。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">establish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mConfig.addresses = mAddresses;</span><br><span class="line">        mConfig.routes = mRoutes;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add by wx 2021/10/11</span></span><br><span class="line">        <span class="keyword">if</span> (mConfig.disallowedApplications == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mConfig.disallowedApplications = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mConfig.disallowedApplications.contains(xxx)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        verifyApp(xxx);<span class="comment">//要过滤的包名</span></span><br><span class="line">        mConfig.disallowedApplications.add(xxx);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;<span class="comment">//add end</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getService().establishVpn(mConfig);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ParcelFileDescriptor <span class="title">establish</span><span class="params">(VpnConfig config)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">首先检查调用者应用和得到当前建立 VPN 连接权限应用的 UID 是否匹配，保证两者相同。</span><br><span class="line">然后检查当前 Android 用户是否拥有建立 VPN 连接的权限，并且验证该服务的绑定需要 BIND_VPN_SERVICE 权限；</span><br><span class="line">如果服务中没有对这个权限进行要求，就会被认为是不安全的，并且抛出 SecurityException 异常。</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Set up forwarding and DNS rules.</span></span><br><span class="line">    agentConnect();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">agentConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mNetworkCapabilities.setEstablishingVpnAppUid(Binder.getCallingUid());</span><br><span class="line">    mNetworkCapabilities.setUids(createUserAndRestrictedProfilesRanges(mUserHandle,</span><br><span class="line">    mConfig.allowedApplications, mConfig.disallowedApplications));<span class="comment">//将过滤后的uid范围作为参数传进来</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createUserAndRestrictedProfilesRanges() 追到这</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUserToRanges</span><span class="params">(@NonNull Set&lt;UidRange&gt; ranges, @UserIdInt <span class="keyword">int</span> userHandle,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable List&lt;String&gt; allowedApplications,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable List&lt;String&gt; disallowedApplications)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (allowedApplications != <span class="keyword">null</span>) &#123;</span><br><span class="line">            android.util.Slog.v(<span class="string">"wangxin999"</span>, <span class="string">"allowedApplications != null"</span> );</span><br><span class="line">            <span class="comment">// Add ranges covering all UIDs for allowedApplications.</span></span><br><span class="line">            <span class="keyword">int</span> start = -<span class="number">1</span>, stop = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> uid : getAppsUids(allowedApplications, userHandle)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">                    start = uid;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uid != stop + <span class="number">1</span>) &#123;</span><br><span class="line">                    ranges.add(<span class="keyword">new</span> UidRange(start, stop));</span><br><span class="line">                    start = uid;</span><br><span class="line">                &#125;</span><br><span class="line">                stop = uid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start != -<span class="number">1</span>) ranges.add(<span class="keyword">new</span> UidRange(start, stop));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (disallowedApplications != <span class="keyword">null</span>) &#123;</span><br><span class="line">            android.util.Slog.v(<span class="string">"wangxin999"</span>, <span class="string">"disallowedApplications != null"</span> );</span><br><span class="line">            <span class="comment">// Add all ranges for user skipping UIDs for disallowedApplications.</span></span><br><span class="line">            <span class="keyword">final</span> UidRange userRange = UidRange.createForUser(userHandle);</span><br><span class="line">            android.util.Slog.v(<span class="string">"wangxin999"</span>, <span class="string">"userRange "</span> + userRange.toString());</span><br><span class="line">            <span class="keyword">int</span> start = userRange.start;</span><br><span class="line">            start = <span class="number">1</span>;<span class="comment">//add by wx 因为要过滤当前bin服务的uid为0，默认是0-99999</span></span><br><span class="line">            android.util.Slog.v(<span class="string">"wangxin999"</span>, <span class="string">"start =  "</span> + start);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> uid : getAppsUids(disallowedApplications, userHandle)) &#123;</span><br><span class="line">                android.util.Slog.v(<span class="string">"wangxin999"</span>, <span class="string">" uid "</span> + uid );</span><br><span class="line">                <span class="keyword">if</span> (uid == start) &#123;</span><br><span class="line">                    start++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ranges.add(<span class="keyword">new</span> UidRange(start, uid - <span class="number">1</span>));</span><br><span class="line">                    start = uid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start &lt;= userRange.stop) ranges.add(<span class="keyword">new</span> UidRange(start, userRange.stop));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Add all UIDs for the user.</span></span><br><span class="line">            ranges.add(UidRange.createForUser(userHandle));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>默认uid范围：0-99999</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.os.UserHandle.PER_USER_RANGE; <span class="comment">// 100000;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UidRange <span class="title">createForUser</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UidRange(userId * PER_USER_RANGE, (userId + <span class="number">1</span>) * PER_USER_RANGE - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是下面俩个文件，分析下去会到 <a href="https://www.cnblogs.com/blogs-of-lxl/p/14876349.html" target="_blank" rel="noopener">netd</a>，进而到c++层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateUids</span><span class="params">(NetworkAgentInfo nai, NetworkCapabilities prevNc,</span></span></span><br><span class="line"><span class="function"><span class="params">            NetworkCapabilities newNc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Set&lt;UidRange&gt; newRanges = <span class="keyword">null</span> == newNc ? <span class="keyword">null</span> : newNc.getUids();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!newRanges.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">final</span> UidRange[] addedRangesArray = <span class="keyword">new</span> UidRange[newRanges.size()];</span><br><span class="line">                newRanges.toArray(addedRangesArray);</span><br><span class="line">                mNMS.addVpnUidRanges(nai.network.netId, addedRangesArray);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> shouldFilter = requiresVpnIsolation(nai, newNc, nai.linkProperties);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (shouldFilter &amp;&amp; !newRanges.isEmpty()) &#123;</span><br><span class="line">        mPermissionMonitor.onVpnUidRangesAdded(iface, newRanges,</span><br><span class="line">                        newNc.getEstablishingVpnAppUid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> VPN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android判断网络类型工具类</title>
      <link href="2021/09/28/Android%E5%88%A4%E6%96%AD%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>2021/09/28/Android%E5%88%A4%E6%96%AD%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>Android6.0以后判断网络类型的方式不再使用TelephonyManager.getNetworkType()，看下高版本怎么搞的吧。</p><h6 id="一、判断网络连接类型-俩种方式"><a href="#一、判断网络连接类型-俩种方式" class="headerlink" title="一、判断网络连接类型(俩种方式)"></a>一、判断网络连接类型(俩种方式)</h6><p>1、主动获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取网络连接管理器对象</span></span><br><span class="line">ConnectivityManager connectManager = (ConnectivityManager) ctx.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line"><span class="comment">//获取当前活动的网络对象(Network)信息， 注意这manager还有个可以根据uid直接获取NetWork对象(反射),这就可以获得指定应用的网络对象，但是需要系统签名，有需求的话去看源码，解决VPN的时候亲测可以</span></span><br><span class="line">Network network = connectManager.getActiveNetwork();</span><br><span class="line"><span class="comment">//再获取描述当前网络对象属性(能力)的对象</span></span><br><span class="line">NetworkCapabilities capabilities = connectManager.getNetworkCapabilities(network);</span><br><span class="line"><span class="comment">//通过hasCapability() 中可以获取某个网络属性的状态，下面代码判断网络是否已经连接。需要注意，连接上并不代表能访问网络，比如连接到的无线路由器没有接入互联网</span></span><br><span class="line"><span class="keyword">boolean</span> hasCapability = capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);</span><br><span class="line"><span class="comment">//当网络已经连接上了，那么我么再通过 hasTransport() 来判断当前连接网络类型</span></span><br><span class="line"><span class="keyword">boolean</span> hasWifiTrans = capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI);</span><br></pre></td></tr></table></figure><p>2、注册监听(缺点就是会回调多次，至于原因还未分析)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ConnectivityManager.NetworkCallback callback = <span class="keyword">new</span> ConnectivityManager.NetworkCallback()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCapabilitiesChanged</span><span class="params">(Network network, NetworkCapabilities capabilities)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCapabilitiesChanged(network, capabilities);</span><br><span class="line">NetworkCapabilities capabilities = manager.getNetworkCapabilities(network);</span><br><span class="line">...<span class="comment">//获取到network对象，流程和上面一样</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>NetworkCapabilities.TRANSPORT_CELLULAR<br>NetworkCapabilities.TRANSPORT_WIFI<br>NetworkCapabilities.TRANSPORT_BLUETOOTH<br>NetworkCapabilities.TRANSPORT_ETHERNET<br>NetworkCapabilities.TRANSPORT_VPN  //之前用来判断过滤包名绕过VPN<br>NetworkCapabilities.TRANSPORT_WIFI_AWARE<br>NetworkCapabilities.TRANSPORT_LOWPAN</p></blockquote><h6 id="二、-Android-N-以上版本判断移动网络类型"><a href="#二、-Android-N-以上版本判断移动网络类型" class="headerlink" title="二、 Android N 以上版本判断移动网络类型"></a>二、 Android N 以上版本判断移动网络类型</h6><p><a href="https://blog.csdn.net/weixin_36378347/article/details/113451321" target="_blank" rel="noopener">移动网络类型借鉴这篇文章</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android系统版本号</title>
      <link href="2021/09/28/Android%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
      <url>2021/09/28/Android%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h6 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h6><p>系统版本号的获取是通过获取”ro.build.display.id”的值，当然也可通过shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.display.id</span><br></pre></td></tr></table></figure><h6 id="一、版本号设置不可点击"><a href="#一、版本号设置不可点击" class="headerlink" title="一、版本号设置不可点击"></a>一、版本号设置不可点击</h6><p>1、调用setEnabled()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line"><span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值为DISABLED_DEPENDENT_SETTING即可。这个在分析”设置主界面加载”的时候提到过。</p><h6 id="二、自定义版本号格式"><a href="#二、自定义版本号格式" class="headerlink" title="二、自定义版本号格式"></a>二、自定义版本号格式</h6><p>最近遇到修改定制 设置-关于-版本号的小需求，在这里记录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;build&#x2F;make&#x2F;tools&#x2F;buildinfo.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Displayid="V1.0.6."`date -d today +%Y%m%d%H` //版本号格式 + 时间格式 (%Y%m%d%H%M%S)</span><br><span class="line">echo "ro.build.display.id=$Displayid" //属性值 ro.build.display.id</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当时以为这样就ok了，后来发现编译结束时，第一次编译时间会变，后面再编译的时候 时间还是第一次编译的时间，需要更新俩个文件的时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、script/build_user.sh </span><br><span class="line">...</span><br><span class="line">lunch rk3399_firefly_sr_c11g_jd4-user</span><br><span class="line">touch build/make/tools/buildinfo.sh //touch更新文件时间</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line"></span><br><span class="line">2、script/build_userdebug.sh</span><br><span class="line">...</span><br><span class="line">lunch rk3399_firefly_sr_c11g_jd4-userdebug</span><br><span class="line">touch build/make/tools/buildinfo.sh //一样的操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> 版本号 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android开机默认为自定义输入法</title>
      <link href="2021/09/28/%C2%96Android%E5%BC%80%E6%9C%BA%E9%BB%98%E8%AE%A4%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>2021/09/28/%C2%96Android%E5%BC%80%E6%9C%BA%E9%BB%98%E8%AE%A4%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>将这个分成3步：</p><h6 id="一、设置启用的输入方法列表"><a href="#一、设置启用的输入方法列表" class="headerlink" title="一、设置启用的输入方法列表"></a>一、设置启用的输入方法列表</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line"> </span><br><span class="line">&lt;string name="def_enable_input_methods" translatable="false"&gt;com.sohu.inputmethod.sogou/.SogouIME&lt;/string&gt;</span><br><span class="line">&lt;string name="def_input_method" translatable="false"&gt;com.sohu.inputmethod.sogou/.SogouIME&lt;/string&gt;</span><br></pre></td></tr></table></figure><h6 id="二、数据库中加载默认值"><a href="#二、数据库中加载默认值" class="headerlink" title="二、数据库中加载默认值"></a>二、数据库中加载默认值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loadStringSetting(stmt, Settings.Secure.ENABLED_INPUT_METHODS, R.string.def_enable_input_methods);<span class="comment">//启用的输入法列表</span></span><br><span class="line">loadStringSetting(stmt, Settings.Secure.DEFAULT_INPUT_METHOD, R.string.def_input_method);<span class="comment">//默认输入法</span></span><br></pre></td></tr></table></figure><h6 id="三、授予默认输入法必要权限"><a href="#三、授予默认输入法必要权限" class="headerlink" title="三、授予默认输入法必要权限"></a>三、授予默认输入法必要权限</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String sougouInputPackageName = <span class="string">"xxx"</span>;<span class="comment">//记得替换包名</span></span><br><span class="line">PackageInfo sougouInputPackage = getSystemPackageInfo(sougouInputPackageName);</span><br><span class="line"><span class="keyword">if</span> (sougouInputPackage != <span class="keyword">null</span>) &#123;<span class="comment">//权限按需求给</span></span><br><span class="line">    grantRuntimePermissions(sougouInputPackage, ALWAYS_LOCATION_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">    grantRuntimePermissions(sougouInputPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">    grantRuntimePermissions(sougouInputPackage, PHONE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">    grantRuntimePermissions(sougouInputPackage, CONTACTS_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> 输入法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>service保活</title>
      <link href="2021/09/08/service%E4%BF%9D%E6%B4%BB/"/>
      <url>2021/09/08/service%E4%BF%9D%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="一、保活方案："><a href="#一、保活方案：" class="headerlink" title="一、保活方案："></a>一、保活方案：</h5><ul><li>一、进程提权</li><li>二、双进程守护</li><li>三、JobService 应用退出后重启service</li><li>四、注册特殊广播 保证service在开机后自启动</li><li>五、WakeLock的使用 息屏后不被释放资源杀死</li><li>六、加入电量白名单，跳过电量优化</li><li>七、在多任务列表源码里隐藏该app界面或清理时过滤该包名</li><li>八、一些小操作方法</li></ul><h6 id="一、进程提权"><a href="#一、进程提权" class="headerlink" title="一、进程提权"></a>一、进程提权</h6><blockquote><p>在Android的lowmemroykiller(进程回收)机制中，adj值越小的进程越不容易被杀死，相对普通进程来说能让adj去到0显然是最完美的，Android给了Service这样一个功能：startForeground(); <a href="https://www.cnblogs.com/tiger-wang-ms/p/6491429.html" target="_blank" rel="noopener">进程adj的概念</a>。系统lowmemeorykiller机制下对于进程的级别的以变量的形式定义在framework/base/core/java/com/android/server/am/ProcessList.java类中</p></blockquote><h6 id="二、双进程守护（先放着-没理解Aidl在此处的作用）"><a href="#二、双进程守护（先放着-没理解Aidl在此处的作用）" class="headerlink" title="二、双进程守护（先放着 没理解Aidl在此处的作用）"></a>二、双进程守护（先放着 没理解Aidl在此处的作用）</h6><blockquote><p>通过Aidl文件，主服务启动的时候绑定守护服务，断开的时候启动守护服务 重启主服务、重新绑定</p></blockquote><p>1、新建ProcessConnection.aidl实现跨进程通信：</p><p>2、创建主服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessConnection.Stub() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        startForeground(<span class="number">1</span>,<span class="keyword">new</span> Notification());<span class="comment">//该创建前台的服务方法有问题</span></span><br><span class="line">        <span class="comment">//绑定建立连接</span></span><br><span class="line">        bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//连接上</span></span><br><span class="line">            Log.d(<span class="string">"test"</span>,<span class="string">"StepService:建立链接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//断开连接</span></span><br><span class="line">            startService(<span class="keyword">new</span> Intent(StepService.<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//重新绑定</span></span><br><span class="line">            bindService(<span class="keyword">new</span> Intent(StepService.<span class="keyword">this</span>,GuardService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、守护服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardService</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProcessConnection.Stub() &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        startForeground(<span class="number">1</span>,<span class="keyword">new</span> Notification());<span class="comment">//该创建前台的服务方法有问题</span></span><br><span class="line">        <span class="comment">//绑定建立连接</span></span><br><span class="line">        bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//连接上</span></span><br><span class="line">            Log.d(<span class="string">"test"</span>,<span class="string">"GuardService:建立连接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//断开连接</span></span><br><span class="line">            startService(<span class="keyword">new</span> Intent(GuardService.<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//重新绑定</span></span><br><span class="line">            bindService(<span class="keyword">new</span> Intent(GuardService.<span class="keyword">this</span>,StepService<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">mServiceConnection</span>, <span class="title">Context</span>.<span class="title">BIND_IMPORTANT</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回参数含义：</p><ul><li>START_STICKY：在Service被关闭后,重新开启Service</li><li>START_NOT_STICKY：服务被异常杀掉后，系统将会被设置为started状态，系统不会重启该服务，直到startService(Intent intent)方法再次被调用。</li><li>START_REDELIVER_INTENT：重传Intent，使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务,并将Intent的值传入。</li><li>START_STICKY_COMPATIBILITY：START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</li></ul><h6 id="三、使用JobService来实现应用退出后重启Service"><a href="#三、使用JobService来实现应用退出后重启Service" class="headerlink" title="三、使用JobService来实现应用退出后重启Service"></a>三、使用JobService来实现应用退出后重启Service</h6><blockquote><p>JobService也是一个service，和普通的service不同的是，JobService是一个任务回调类，通过JobScheduler设置任务给系统，系统来调用JobService中的方法，具体处理什么任务需要我们自己在JobService中的回调方法中实现。那么关于任务的管理和进程的维护、调度当然是由系统来统一管理。<br>Google从Android SDK 21之后添加了JobScheduler来执行一些满足特定条件但不紧急的后台任务，我们可以利用JobScheduler来执行这些特殊的后台任务时来减少电量的消耗。</p></blockquote><p>1、使用JobService来实现APP进程防杀， 首先声明权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">    android:name=<span class="string">".MyJobDaemonService"</span></span><br><span class="line">    android:enabled=<span class="string">"true"</span></span><br><span class="line">    android:exported=<span class="string">"true"</span></span><br><span class="line">    android:permission=<span class="string">"android.permission.BIND_JOB_SERVICE"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2、自定义一个Service类，继承自JobService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobDaemonService</span> <span class="keyword">extends</span> <span class="title">JobService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kJobId = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"jobService启动"</span>);</span><br><span class="line">        scheduleJob(getJobInfo());</span><br><span class="line">        <span class="keyword">return</span> START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"执行了onStartJob方法"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isLocalServiceWork = isServiceWork(<span class="keyword">this</span>, <span class="string">"com.marswin89.marsdaemon.demo.Service1"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isRemoteServiceWork = isServiceWork(<span class="keyword">this</span>, <span class="string">"com.marswin89.marsdaemon.demo.Service2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!isLocalServiceWork||</span><br><span class="line">                !isRemoteServiceWork)&#123;</span><br><span class="line">            <span class="keyword">this</span>.startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Service1<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            <span class="comment">//this.startService(new Intent(this,Service2.class));</span></span><br><span class="line">            <span class="comment">//Toast.makeText(this, "进程启动", Toast.LENGTH_SHORT).show();</span></span><br><span class="line">            Log.i(<span class="string">"onStartJob"</span>, <span class="string">"启动service1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStopJob</span><span class="params">(JobParameters params)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"执行了onStopJob方法"</span>);</span><br><span class="line">        scheduleJob(getJobInfo());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将任务作业发送到作业调度中去</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleJob</span><span class="params">(JobInfo t)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MyJobDaemonService"</span>, <span class="string">"调度job"</span>);</span><br><span class="line">        JobScheduler tm =</span><br><span class="line">                (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line">        tm.schedule(t);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobInfo <span class="title">getJobInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JobInfo.Builder builder = <span class="keyword">new</span> JobInfo.Builder(kJobId++, <span class="keyword">new</span> ComponentName(<span class="keyword">this</span>, MyJobDaemonService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_NONE);</span><br><span class="line">        builder.setPersisted(<span class="keyword">true</span>);</span><br><span class="line">        builder.setRequiresCharging(<span class="keyword">false</span>);</span><br><span class="line">        builder.setRequiresDeviceIdle(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//间隔1000毫秒</span></span><br><span class="line">        builder.setPeriodic(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 判断服务是否正在运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isServiceWork</span><span class="params">(Context mContext, String serviceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isWork = <span class="keyword">false</span>;</span><br><span class="line">        ActivityManager myAM = (ActivityManager) mContext</span><br><span class="line">                .getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">        List&lt;ActivityManager.RunningServiceInfo&gt; myList = myAM.getRunningServices(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> (myList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.size(); i++) &#123;</span><br><span class="line">            String mName = myList.get(i).service.getClassName().toString();</span><br><span class="line">            <span class="keyword">if</span> (mName.equals(serviceName)) &#123;</span><br><span class="line">                isWork = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isWork;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="四、注册特殊广播："><a href="#四、注册特殊广播：" class="headerlink" title="四、注册特殊广播："></a>四、注册特殊广播：</h6><p>1.1、注册开机广播</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">".modle.mReceiver"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>1.2、开机后启动服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line">        Intent mIntent = <span class="keyword">new</span> Intent(context,StepService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        context.startService(mIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.1 android.intent.action.USER_PRESENT事件</p><blockquote><p>在做解锁监听程序时，一开始采用监听屏幕SCREEN_ON和SCREEN_OFF这两个action。</p><p>但奇怪的是，这两个action只能通过代码动态的形式注册，才能被监听到，使用AndroidManifest.xml 完全监听不到。</p><p>百度后发现这是PowerManager那边在发这个广播的时候做了限制，限制只能有register到代码中的receiver才能接收。</p><p>后来就找各种能静态注册AndroidManifest.xml同时能反映用户解锁行为的广播.于是找到android.intent.action.USER_PRESENT.</p><p>每个用户隔一段时间重新开始使用手机时，首先按电源键点亮屏幕，紧接着解锁。android.intent.action.USER_PRESENT就是解锁时发出的intent.</p></blockquote><h6 id="五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解"><a href="#五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解" class="headerlink" title="五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解"></a>五、保证息屏后不被释放资源杀死（WakeLock的使用）没理解</h6><p>1、添加权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span><br></pre></td></tr></table></figure><p>2、需求：要在后台跑一个Service执行轮询，屏幕熄灭或锁屏后，仍然需要保持Service一直处于轮询状态。<br> 应用程序中如果要在待机前保存数据状态的话，要保证此过程中不会进入待机。可以在 onResume() 或者 onStart() 中申请 wakelock 锁，即调用getLock()方法。在 onPause() 或者 onDistroy() 中处理应用待机后再释放掉 wakelock 锁，此时调用releaseLock()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 同步方法   得到休眠锁</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(mWakeLock==<span class="keyword">null</span>)&#123;</span><br><span class="line">           PowerManager mgr=(PowerManager)context.getSystemService(Context.POWER_SERVICE);</span><br><span class="line">           mWakeLock=mgr.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,StepService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">           mWakeLock.setReferenceCounted(<span class="keyword">true</span>);</span><br><span class="line">           Calendar c=Calendar.getInstance();</span><br><span class="line">           c.setTimeInMillis((System.currentTimeMillis()));</span><br><span class="line">           <span class="keyword">int</span> hour =c.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">           <span class="keyword">if</span>(hour&gt;=<span class="number">23</span>||hour&lt;=<span class="number">6</span>)&#123;</span><br><span class="line">               mWakeLock.acquire(<span class="number">5000</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               mWakeLock.acquire(<span class="number">300000</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       Log.v(TAG,<span class="string">"get lock"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mWakeLock != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mWakeLock.isHeld()) &#123;</span><br><span class="line">                mWakeLock.release();</span><br><span class="line">                Log.v(TAG,<span class="string">"release lock"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mWakeLock = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="六、加入电量白名单，跳过电量优化"><a href="#六、加入电量白名单，跳过电量优化" class="headerlink" title="六、加入电量白名单，跳过电量优化"></a>六、加入电量白名单，跳过电量优化</h6><blockquote><p>在Android6.0之后，开始引入了电池优化机制，监控APP的耗电量，这样长时间后台运行的service会被监测出来，基于电池优化的策略，很可能会被系统自动杀掉。为了跳过这样的限制，Android是提供电池优化白名单的，通过powerManager.isIgnoringBatteryOptimizations(getPackageName())来判断是否已经加入白名单，没有则通过以下代码来弹窗提示用户自主选择</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h6 id="七、在多任务列表源码里隐藏该app界面或清理时过滤该包名"><a href="#七、在多任务列表源码里隐藏该app界面或清理时过滤该包名" class="headerlink" title="七、在多任务列表源码里隐藏该app界面或清理时过滤该包名"></a>七、在多任务列表源码里隐藏该app界面或清理时过滤该包名</h6><p>等分析过多任务后，再来完善。</p><h6 id="八、一些小操作方法"><a href="#八、一些小操作方法" class="headerlink" title="八、一些小操作方法"></a>八、一些小操作方法</h6><p>1、在service的onStartCommand方法里返回 STATR_STICK，比如上面的双进程守护</p><p>2、覆写Service的onDestroy方法</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> 四大组件 </category>
          
          <category> service </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用代码执行shell命令</title>
      <link href="2021/09/08/%E7%94%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/"/>
      <url>2021/09/08/%E7%94%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd = <span class="string">"pm install -r -d --user "</span> + <span class="number">0</span> + <span class="string">" -i "</span> + mContext.getPackageName() + <span class="string">" "</span> + apkFilePath;</span><br><span class="line">String command = <span class="string">"am broadcast -a ADB_INPUT_TEXT --es msg wx蛇魔你好!@#$"</span>;</span><br></pre></td></tr></table></figure><p>貌似简单的指令还行，如果是su命令的话就不行，还需积累。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleKeyBroadCmd</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cmd == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Process process = runtime.exec(cmd);<span class="comment">//"su"</span></span><br><span class="line">        InputStream errorInput = process.getErrorStream();</span><br><span class="line">        InputStream inputStream = process.getInputStream();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String error = <span class="string">""</span>;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result += line;</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(errorInput));</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            error += line;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.equals(<span class="string">"Success"</span>)) &#123;<span class="comment">//之前执行的是pm install安装操作，结果会返回Success</span></span><br><span class="line">            Log.v(TAG, <span class="string">" install: Success"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.v(TAG, <span class="string">" install: error"</span> + error + <span class="string">";result="</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Log.v(TAG, <span class="string">"install: error"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> shell 命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视频基础知识点</title>
      <link href="2021/09/08/%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2021/09/08/%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h6 id="一、像素："><a href="#一、像素：" class="headerlink" title="一、像素："></a>一、像素：</h6><blockquote><p>通常说的像素，一般指图像含有多少个像素点。</p><p>720P: 实际像素是1280x720，相乘结果921600， 即有921600个像素点，也就是常说的100万像素</p><p>1080P：实际像素是1920x1080，相乘结果2073600，即有2073600个像素点，也就是常说的200万像素</p></blockquote><h6 id="二、图像占用空间大小计算"><a href="#二、图像占用空间大小计算" class="headerlink" title="二、图像占用空间大小计算"></a>二、图像占用空间大小计算</h6><blockquote><p>公式：图像像素数 * 图像位深 / 8 = 占用字节。一个像素点占用8位</p><p>比如一张图片像素为：1024x1024，位深32位，则图像大小为： <strong>1024*1024*32/8=4MB</strong></p></blockquote><h6 id="三、分辨率"><a href="#三、分辨率" class="headerlink" title="三、分辨率"></a>三、分辨率</h6><blockquote><p>分辨率是指设备输出分辨率或叫屏幕 分辨率，即屏幕上横竖有多少个容器点，每个容器点用于容纳一个像素。说人话就是：屏幕的像素点总和。</p></blockquote><h6 id="四、密度"><a href="#四、密度" class="headerlink" title="四、密度"></a>四、密度</h6><blockquote><p>每英寸包含多少个像素点，单位PPI(pixel per inch).</p><p><img src="http://wxyy97.com/image/ppi.png" alt=""></p><p>根据公式，就可以计算出，这个5.8寸的手机的PPI是多少。PPI超过300就可以算是视网膜屏了，肉眼已经分辨不出像素点来。</p></blockquote><h6 id="五、码流（data-rate）："><a href="#五、码流（data-rate）：" class="headerlink" title="五、码流（data rate）："></a>五、码流（data rate）：</h6><blockquote><p>视频码率就是数据传输时单位时间传送的数据位数，一般我们用的单位是kbps即千位每秒。通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件。</p><p>但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真，围绕这个核心衍生出来的cbr（固定码率）与vbr（可变码率），都是在这方面做的文章，不过事情总不是绝对的，举例来看，对于一个音频，其码率越高，被压缩的比例越小，音质损失越小，与<a href="https://baike.baidu.com/item/音源/3442285" target="_blank" rel="noopener">音源</a>的音质越接近。</p></blockquote><h6 id="六、帧率："><a href="#六、帧率：" class="headerlink" title="六、帧率："></a>六、帧率：</h6><blockquote><p>帧速率（画面的实时性、流畅性），指每秒钟刷新的图片的帧数。也可以理解为图形处理器每秒钟能够刷新几次。对视频内容而言，帧速率指每秒所显示的静止帧格数。要生成平滑连贯的动画效果，帧速率一般不小于8；而电影的帧速率为24fps。捕捉动态视频内容时，此数字愈高愈好。</p></blockquote><h6 id="七、视频文件大小的计算"><a href="#七、视频文件大小的计算" class="headerlink" title="七、视频文件大小的计算"></a>七、视频文件大小的计算</h6><blockquote><p>视频文件大小计算公式：(音频码率+视频码率) x 时长 / 8</p><p>1Mbps=1024Kbps=1024/8KBps=128KB/s</p><p>音频码率：128（kbps）<br>视频码率：1824 （kbps）<br>总时长：4<em>60+13 （秒）<br>得出：((1824+128)/1024)</em>(4*60+13)/8 = 60.28515625 M<br>计算得出的值，与视频文件本身的大小59M，基本上对得上。</p></blockquote><h6 id="八、清晰度"><a href="#八、清晰度" class="headerlink" title="八、清晰度"></a>八、清晰度</h6><blockquote><p>压缩比 = 帧率*分辨率 / 码率</p><p>把每秒显示的图片进行压缩后的数据量。影响体积，与体积成正比：码率越大，体积越大，码率越小，体积越小。（体积=码率X时间） 帧率<strong>X</strong>分辨率<strong>=</strong>压缩前的每秒数据量（单位是字节。） 压缩比<strong>=</strong>压缩前的每秒数据量<strong>/</strong>码率 （对于同一视频源并采用同一种视频编码算法，压缩比越高，画面质量越差）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> 音视频图片开发 </category>
          
          <category> 视频开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AIDL基本用法</title>
      <link href="2021/08/26/AIDL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2021/08/26/AIDL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="第一步：是创建-aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持："><a href="#第一步：是创建-aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持：" class="headerlink" title="第一步：是创建.aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持："></a>第一步：是创建.aidl文件，该文件就是告诉其他客户端我可以提供哪些技术的支持：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AidlTest</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第二步：编译完成后，我们就要实现-aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest-Stub类："><a href="#第二步：编译完成后，我们就要实现-aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest-Stub类：" class="headerlink" title="第二步：编译完成后，我们就要实现.aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest.Stub类："></a>第二步：编译完成后，我们就要实现.aidl文件中的方法，我们需要创建一个Stub类，继承AidlTest.Stub类：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlTestStub</span> <span class="keyword">extends</span> <span class="title">AidlTest</span>.<span class="title">Stub</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程："><a href="#第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程：" class="headerlink" title="第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程："></a>第三步：实现了方法后，接下来我们就要通过Service的方法将该stub对象输出给其他进程：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlTestNative</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> AidlTestStub mStub;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"> </span><br><span class="line">        mStub = <span class="keyword">new</span> AidlTestStub();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mStub.getName(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mStub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后给service进行注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">".AidlTestNative"</span></span><br><span class="line">            android:enabled=<span class="string">"true"</span></span><br><span class="line">            android:process=<span class="string">":marsservice"</span>/&gt;</span><br></pre></td></tr></table></figure><h6 id="第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService"><a href="#第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService" class="headerlink" title="第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService()"></a>第四步：编写客户端代码，客户端要连接到其他进程，就需要使用bindService()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, AidlTestNative<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure><p>然后获取进程的连接状态和其他进程的IBinder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">    Log.e(getLocalClassName(), <span class="string">"service connected"</span>);</span><br><span class="line">    mAidlManager = AidlTest.Stub.asInterface(service);</span><br><span class="line">    mBound = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mAidlManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String namex = mAidlManager.getName(<span class="string">"x"</span>);</span><br><span class="line">            Log.i(<span class="string">"TAG"</span>,namex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">        Log.e(getLocalClassName(), <span class="string">"service disconnected"</span>);</span><br><span class="line">        mBound = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IxxxxService.Stub.asInterface(IBinder obj) ：<br>这个函数是干啥用呢？ 首先当bindService之后，客户端会得到一个Binder引用，是Binder 哟，不是IxxxxService.Proxy实例，那这样的话，我们第一个想法是利用Binder引用作为参数实例化出一个 IxxxxService.Proxy。<br>Ok, 但如果服务端和客户端都是在同一个进程呢，还需要利用IPC吗？这样就不需要了，直接将IxxxxService当做普通的对象调用就成了。<br>Google 的同志们他们利用IxxxxService.Stub.asInterface函数对这两种不同的情况进行了统一，也就是不管你是在同一进程还是不同进 程，那么在拿到Binder引用后，调用IxxxxService.Stub.asInterface(IBinder obj) 即可得到一个IxxxxService 实例，然后你只管调用IxxxxService里的函数就成了。</p></blockquote><h6 id="先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！"><a href="#先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！" class="headerlink" title="先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！"></a>先写到这里，这些基础应该对于阅读framework相关源码有很大帮助，Over！</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android 通信 </category>
          
          <category> 进程通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CallBack用法</title>
      <link href="2021/08/25/CallBack%E7%94%A8%E6%B3%95/"/>
      <url>2021/08/25/CallBack%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="1-如何定义一个回调："><a href="#1-如何定义一个回调：" class="headerlink" title="1. 如何定义一个回调："></a>1. 如何定义一个回调：</h6><blockquote><p>a. 定义接口 : 在类中定义一个Interface, 并在接口中定义一个抽象方法;</p><p>b. 接口对象 : 在类中定义一个该接口的成员变量;</p><p>c. 设置对象 : 在类中定义一个公共的方法, 可以设置这个接口的对象, 调用该方法给接口对象成员变量赋值;</p><p>d. 调用方法 : 在合适的位置调用接口对象中的方法;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定义回调接口的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Callback mCallback;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 声明回调接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置回调接口对象成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mCallback = callback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 调用回调接口对象中的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mCallback.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Employee employee;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 为Employee设置回调函数, 在这里定义具体的回调方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">employee.setCallback(<span class="keyword">new</span> Employee.Callback() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"work"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> 回调 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Settings10主界面加载(一)</title>
      <link href="2021/08/09/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%B8%80)/"/>
      <url>2021/08/09/Settings10%E4%B8%BB%E7%95%8C%E9%9D%A2%E5%8A%A0%E8%BD%BD(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h6 id="主界面加载："><a href="#主界面加载：" class="headerlink" title="主界面加载："></a>主界面加载：</h6><p>从清单文件AndroidManifest.xml中入手：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity-alias android:name=<span class="string">"Settings"</span></span><br><span class="line">    android:label=<span class="string">"@string/settings_label_launcher"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTask"</span></span><br><span class="line">    android:targetActivity=<span class="string">".homepage.SettingsHomepageActivity"</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">    &lt;meta-data android:name=<span class="string">"android.app.shortcuts"</span> android:resource=<span class="string">"@xml/shortcuts"</span>/&gt;</span><br><span class="line">&lt;/activity-alias&gt;</span><br></pre></td></tr></table></figure><p>从Settings.java来看，除了大量的静态类继承SettingsActivity, 就无其他有效信息了。但看其xml定义可以发现targetActivity属性, 实质应是SettingsHomepageActivity.java。</p><p>先看其xml配置:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">".homepage.SettingsHomepageActivity"</span></span><br><span class="line">    android:label=<span class="string">"@string/settings_label_launcher"</span></span><br><span class="line">    android:theme=<span class="string">"@style/Theme.Settings.Home"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTask"</span>&gt;</span><br><span class="line">    &lt;intent-filter android:priority=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.settings.SETTINGS"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">    &lt;meta-data android:name=<span class="string">"com.android.settings.PRIMARY_PROFILE_CONTROLLED"</span></span><br><span class="line">    android:value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><p>SettingsHomepageActivity.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.settings_homepage_container);</span><br><span class="line">    <span class="keyword">final</span> View root = findViewById(R.id.settings_homepage_container);</span><br><span class="line">    root.setSystemUiVisibility(</span><br><span class="line">            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br><span class="line"></span><br><span class="line">    setHomepageContainerPaddingTop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Toolbar toolbar = findViewById(R.id.search_action_bar);</span><br><span class="line">    FeatureFactory.getFactory(<span class="keyword">this</span>).getSearchFeatureProvider()</span><br><span class="line">            .initSearchToolbar(<span class="keyword">this</span> <span class="comment">/* activity */</span>, toolbar, SettingsEnums.SETTINGS_HOMEPAGE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ImageView avatarView = findViewById(R.id.account_avatar);</span><br><span class="line">    <span class="keyword">final</span> AvatarViewMixin avatarViewMixin = <span class="keyword">new</span> AvatarViewMixin(<span class="keyword">this</span>, avatarView);</span><br><span class="line">    getLifecycle().addObserver(avatarViewMixin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!getSystemService(ActivityManager<span class="class">.<span class="keyword">class</span>).<span class="title">isLowRamDevice</span>()) </span>&#123;</span><br><span class="line">        <span class="comment">// Only allow contextual feature on high ram devices.</span></span><br><span class="line">        showFragment(<span class="keyword">new</span> ContextualCardsFragment(), R.id.contextual_cards_content);</span><br><span class="line">    &#125;</span><br><span class="line">    showFragment(<span class="keyword">new</span> TopLevelSettings(), R.id.main_content);</span><br><span class="line">    ((FrameLayout) findViewById(R.id.main_content))</span><br><span class="line">            .getLayoutTransition().enableTransitionType(LayoutTransition.CHANGING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主界面的layout为settings_homepage_container.xml:</p><p>主要包含三部分：一个顶部快捷搜索栏，一个是小卡片式的小组件(id.contextual_cards_content)，下来Id为main_content的FrameLayout就是用来显示主设置内容的，即Settings的一级菜单项界面。由于本篇主要记录主界面加载流程，所以主要看main_content。<br>回到onCreate()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showFragment(<span class="keyword">new</span> TopLevelSettings(), R.id.main_content);</span><br></pre></td></tr></table></figure><p>启动TopLevelSettings的fragment，此fragments主要继承于DashboardFragment.java，先来看TopLevelSettings的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TopLevelSettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">    <span class="comment">// Disable the search icon because this page uses a full search view in actionbar.</span></span><br><span class="line">    args.putBoolean(NEED_SEARCH_ICON_IN_ACTION_BAR, <span class="keyword">false</span>);</span><br><span class="line">    setArguments(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到构造方法中仅设置了个标志位，再根据framgments生命周期先来看onAttach()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    use(SupportPreferenceController<span class="class">.<span class="keyword">class</span>).<span class="title">setActivity</span>(<span class="title">getActivity</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用父类DashboardFragment.java的onAttach()方法，此方法主要是完成mPreferenceControllers的加载。</p><p>onCreate()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">// Set ComparisonCallback so we get better animation when list changes.</span></span><br><span class="line">    getPreferenceManager().setPreferenceComparisonCallback(</span><br><span class="line">    <span class="keyword">new</span> PreferenceManager.SimplePreferenceComparisonCallback());</span><br><span class="line">    <span class="keyword">if</span> (icicle != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Upon rotation configuration change we need to update preference states before any</span></span><br><span class="line">    <span class="comment">// editing dialog is recreated (that would happen before onResume is called).</span></span><br><span class="line">    updatePreferenceStates();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次进入时，icicle为null，具体应该看引用的父类的onCreate()方法，由于此篇主要说主界面加载，故暂不展开。根据log定位发现，其后调用DashboardFragment.java的onCreatePreferences()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreatePreferences</span><span class="params">(Bundle savedInstanceState, String rootKey)</span> </span>&#123;</span><br><span class="line">    refreshAllPreferences(getLogTag());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用refreshAllPreferences()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Refresh all preference items, including both static prefs from xml, and dynamic items from</span></span><br><span class="line"><span class="comment">* DashboardCategory.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshAllPreferences</span><span class="params">(<span class="keyword">final</span> String TAG)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">    <span class="comment">// First remove old preferences.</span></span><br><span class="line">    <span class="keyword">if</span> (screen != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Intentionally do not cache PreferenceScreen because it will be recreated later.</span></span><br><span class="line">    screen.removeAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add resource based tiles.</span></span><br><span class="line">    displayResourceTiles();</span><br><span class="line"></span><br><span class="line">    refreshDashboardTiles(TAG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Activity activity = getActivity();</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"All preferences added, reporting fully drawn"</span>);</span><br><span class="line">    activity.reportFullyDrawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updatePreferenceVisibility(mPreferenceControllers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到此方法主要是用来加载显示的preference items，主要分为两部分, <strong>一个是静态xml定义的prefs(调用displayResourceTiles()方法), 另一部分是从DashboardCategory动态加载(调用refreshDashboardTiles(TAG)方法</strong>，其中TAG为 “TopLevelSettings”)。</p><h6 id="displayResourceTiles"><a href="#displayResourceTiles" class="headerlink" title="displayResourceTiles()"></a>displayResourceTiles()</h6><p>此方法主要是从xml资源文件中加载显示prefs：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Displays resource based tiles.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">displayResourceTiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> resId = getPreferenceScreenResId();</span><br><span class="line">    <span class="keyword">if</span> (resId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addPreferencesFromResource(resId);</span><br><span class="line">    <span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">    screen.setOnExpandButtonClickListener(<span class="keyword">this</span>);</span><br><span class="line">    mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">    controller -&gt; controller.displayPreference(screen));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用getPreferenceScreenResId()方法获取所要加载的xml的ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getPreferenceScreenResId</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>调用子类TopLevelSettings.java的getPreferenceScreenResId()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected int getPreferenceScreenResId() &#123;</span><br><span class="line">    return R.xml.top_level_settings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Settings主界面加载的xml文件是top_level_settings，其内主要配置的是一些Preference菜单项如网络和互联网、已连接的设备、应用和通知、电池等等。以网络和互联网菜单项为例，xml配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Preference</span><br><span class="line">    android:key=<span class="string">"top_level_network"</span></span><br><span class="line">    android:title=<span class="string">"@string/network_dashboard_title"</span></span><br><span class="line">    android:summary=<span class="string">"@string/summary_placeholder"</span></span><br><span class="line">    android:icon=<span class="string">"@drawable/ic_homepage_network"</span></span><br><span class="line">    android:order=<span class="string">"-120"</span></span><br><span class="line">    android:fragment=<span class="string">"com.android.settings.network.NetworkDashboardFragment"</span></span><br><span class="line">settings:controller=<span class="string">"com.android.settings.network.TopLevelNetworkEntryPreferenceController"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>key定义此preference的唯一性ID；</li><li>title定义标题，此字串显示网络和互联网；</li><li>summary，此显示WLAN、移动网络、流量使用和热点；</li><li>icon，定义图标；</li><li>order，加载显示优先级，order为负时，绝对值越高，界面显示越靠前；order为正时，值越高，显示越靠后；</li><li>fragment，定义点击此preference所跳转的fragment界面；</li><li>controller，控制管理类。</li></ul><p>再回到displayResourceTiles()中，继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addPreferencesFromResource(resId);</span><br></pre></td></tr></table></figure><p>此主要是调用androidX Preference的addPreferencesFromResource()方法，由于androidX无源码不详细展开。此方法主要是将preferenceScreen下所有Preference添加到ArrayList中，然后再根据此集合构建生成PreferenceGroupAdapter，最后将此adapter设置到listview中，完成数据绑定，从而完成界面加载。继续看displayResourceTiles()余下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PreferenceScreen screen = getPreferenceScreen();</span><br><span class="line">screen.setOnExpandButtonClickListener(<span class="keyword">this</span>);</span><br><span class="line">mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">controller -&gt; controller.displayPreference(screen));</span><br></pre></td></tr></table></figure><p>先来看mPreferenceControllers是什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class, List&lt;AbstractPreferenceController&gt;&gt; mPreferenceControllers = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addPreferenceController</span><span class="params">(AbstractPreferenceController controller)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPreferenceControllers.get(controller.getClass()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mPreferenceControllers.put(controller.getClass(), <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    mPreferenceControllers.get(controller.getClass()).add(controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主要是在addPreferenceController()方法里面去完成赋值的。而调用此方法主要是在onAttach()中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Load preference controllers from code</span></span><br><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllersFromCode =</span><br><span class="line">createPreferenceControllers(context);</span><br><span class="line"><span class="comment">// Load preference controllers from xml definition</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllersFromXml = PreferenceControllerListHelper</span><br><span class="line">.getPreferenceControllersFromXml(context, getPreferenceScreenResId());</span><br><span class="line"><span class="comment">// Filter xml-based controllers in case a similar controller is created from code already.</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; uniqueControllerFromXml =</span><br><span class="line">PreferenceControllerListHelper.filterControllers(</span><br><span class="line">controllersFromXml, controllersFromCode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add unique controllers to list.</span></span><br><span class="line"><span class="keyword">if</span> (controllersFromCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">controllers.addAll(controllersFromCode);</span><br><span class="line">&#125;</span><br><span class="line">controllers.addAll(uniqueControllerFromXml);</span><br><span class="line"></span><br><span class="line"><span class="comment">// And wire up with lifecycle.</span></span><br><span class="line"><span class="keyword">final</span> Lifecycle lifecycle = getSettingsLifecycle();</span><br><span class="line">uniqueControllerFromXml</span><br><span class="line">.stream()</span><br><span class="line">.filter(controller -&gt; controller <span class="keyword">instanceof</span> LifecycleObserver)</span><br><span class="line">.forEach(</span><br><span class="line">controller -&gt; lifecycle.addObserver((LifecycleObserver) controller));</span><br><span class="line"></span><br><span class="line">mPlaceholderPreferenceController =</span><br><span class="line"><span class="keyword">new</span> DashboardTilePlaceholderPreferenceController(context);</span><br><span class="line">controllers.add(mPlaceholderPreferenceController);</span><br><span class="line"><span class="keyword">for</span> (AbstractPreferenceController controller : controllers) &#123;</span><br><span class="line">addPreferenceController(controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、定义集合controllers；<br>2、从代码中加载preference controllers，调用createPreferenceControllers()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Get a list of &#123;<span class="doctag">@link</span> AbstractPreferenceController&#125; for this fragment.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;AbstractPreferenceController&gt; <span class="title">createPreferenceControllers</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象方法，具体实现是在其子类中，上面分析可知应是子类TopLevelSettings.java实现，由于TopLevelSettings未实现此方法，故此返回null。<br> 3、从xml定义中加载preference controllers，调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllersFromXml = PreferenceControllerListHelper</span><br><span class="line">.getPreferenceControllersFromXml(context, getPreferenceScreenResId());</span><br></pre></td></tr></table></figure><p>此时getPreferenceScreenResId()根据上面分析, 加载的xml应是top_level_settings.xml, 调用getPreferenceControllersFromXml()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiates a list of controller based on xml definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;BasePreferenceController&gt; <span class="title">getPreferenceControllersFromXml</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        @XmlRes <span class="keyword">int</span> xmlResId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Bundle&gt; preferenceMetadata;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        preferenceMetadata = PreferenceXmlParserUtils.extractMetadata(context, xmlResId,</span><br><span class="line">                MetadataFlag.FLAG_NEED_KEY | MetadataFlag.FLAG_NEED_PREF_CONTROLLER</span><br><span class="line">                        | MetadataFlag.FLAG_INCLUDE_PREF_SCREEN);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | XmlPullParserException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Failed to parse preference xml for getting controllers"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> controllers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Bundle metadata : preferenceMetadata) &#123;</span><br><span class="line">        <span class="keyword">final</span> String controllerName = metadata.getString(METADATA_CONTROLLER);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(controllerName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BasePreferenceController controller;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            controller = BasePreferenceController.createInstance(context, controllerName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Could not find Context-only controller for pref: "</span> + controllerName);</span><br><span class="line">            <span class="keyword">final</span> String key = metadata.getString(METADATA_KEY);</span><br><span class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(key)) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Controller requires key but it's not defined in xml: "</span></span><br><span class="line">                        + controllerName);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                controller = BasePreferenceController.createInstance(context, controllerName,</span><br><span class="line">                        key);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException e2) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Cannot instantiate controller from reflection: "</span> + controllerName);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        controllers.add(controller);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> controllers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)、主要读取xml中配置的每个preference的METADATA_CONTROLLER即(“settings:controller”)属性，以上述网络和互联网菜单项为例，读取的即                 为”com.android.settings.network.TopLevelNetworkEntryPreferenceController”;<br>(2)、首先根据此去调用BasePreferenceController.java的createInstance方法，即调用TopLevelNetworkEntryPreferenceController.java的带一个参数的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiate a controller as specified controller type.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This is done through reflection. Do not use this method unless you know what you are doing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BasePreferenceController <span class="title">createInstance</span><span class="params">(Context context, String controllerName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; clazz = Class.forName(controllerName);</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; preferenceConstructor = clazz.getConstructor(Context<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> Object[] params = <span class="keyword">new</span> Object[]&#123;context&#125;;</span><br><span class="line">        <span class="keyword">return</span> (BasePreferenceController) preferenceConstructor.newInstance(params);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | InstantiationException |</span><br><span class="line">            IllegalArgumentException | InvocationTargetException | IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"Invalid preference controller: "</span> + controllerName, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)、从而执行异常内语句，首先会再去读取xml中配置的每个preference的METADATA_KEY即(android:key)属性，同样的再据此去调用TopLevelNetworkEntryPreferenceController.java的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TopLevelNetworkEntryPreferenceController</span><span class="params">(Context context, String preferenceKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, preferenceKey);</span><br><span class="line">    mMobileNetworkPreferenceController = <span class="keyword">new</span> MobileNetworkPreferenceController(mContext);</span><br><span class="line">    mTetherPreferenceController = <span class="keyword">new</span> TetherPreferenceController(</span><br><span class="line">    mContext, <span class="keyword">null</span> <span class="comment">/* lifecycle */</span>);</span><br><span class="line">    mWifiPreferenceController = <span class="keyword">new</span> WifiMasterSwitchPreferenceController(</span><br><span class="line">    mContext, <span class="keyword">null</span> <span class="comment">/* metrics */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时preferenceKey即为xml中配置的android:key属性的值，为”top_level_network”。</p><p>(4)、调用父类BasePreferenceController.java的构造方法，初始化其他变量完成构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasePreferenceController</span><span class="params">(Context context, String preferenceKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    mPreferenceKey = preferenceKey;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(mPreferenceKey)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Preference key must be set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、过滤重复定义的controller等，赋值填充mPreferenceControllers</p><p>故mPreferenceControllers主要是各种控制管理类的集合，包含xml中配置的每个preference的“settings:controller”属性和代码中通过createPreferenceControllers()方法构建的。</p><p>再回到displayResourceTiles()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">                controller -&gt; controller.displayPreference(screen));</span><br></pre></td></tr></table></figure><p>此语句主要就是调用各个controller的displayPreference()方法。<br>依旧以网络和互联网菜单项为例，xml中配置的controller为”com.android.settings.network.TopLevelNetworkEntryPreferenceController”，查看TopLevelNetworkEntryPreferenceController.java发现，其内并未实现displayPreference()方法，查看继承关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopLevelNetworkEntryPreferenceController</span> <span class="keyword">extends</span> <span class="title">BasePreferenceController</span></span></span><br></pre></td></tr></table></figure><p>查看BasePreferenceController.java的displayPreference()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayPreference</span><span class="params">(PreferenceScreen screen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.displayPreference(screen);</span><br><span class="line">    <span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line">        <span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line">        <span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line">        <span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一、继续先调用父类的displayPreference()方法，而继承关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePreferenceController extends AbstractPreferenceController implements Sliceable</span><br></pre></td></tr></table></figure><p>AbstractPreferenceController.java的displayPreference()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayPreference</span><span class="params">(PreferenceScreen screen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String prefKey = getPreferenceKey();</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(prefKey)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Skipping displayPreference because key is empty:"</span> + getClass().getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAvailable()) &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="keyword">true</span> <span class="comment">/* visible */</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Preference.OnPreferenceChangeListener) &#123;</span><br><span class="line">            <span class="keyword">final</span> Preference preference = screen.findPreference(prefKey);</span><br><span class="line">            preference.setOnPreferenceChangeListener(</span><br><span class="line">                    (Preference.OnPreferenceChangeListener) <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="keyword">false</span> <span class="comment">/* visible */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、getPreferenceKey()获取preference的key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the key for this preference.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPreferenceKey</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>BasePreferenceController.java的getPreferenceKey()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPreferenceKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mPreferenceKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而据上面分析到mPreferenceKey实质上即为xml中每个preference配置的android:key属性的值，即此处应为”top_level_network”。</p><p>2、isAvailable()；判断此preference是否可用即是否应该被显示。如果返回true，则被显示出来，反之则不被显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns true if preference is available (should be displayed)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>抽象方法，继续看子类BasePreferenceController.java的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; when the controller can be changed on the device.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* Will return true for &#123;<span class="doctag">@link</span> #AVAILABLE&#125; and &#123;<span class="doctag">@link</span> #DISABLED_DEPENDENT_SETTING&#125;.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* When the availability status returned by &#123;<span class="doctag">@link</span> #getAvailabilityStatus()&#125; is</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> #DISABLED_DEPENDENT_SETTING&#125;, then the setting will be disabled by default in the</span></span><br><span class="line"><span class="comment">* DashboardFragment, and it is up to the &#123;<span class="doctag">@link</span> BasePreferenceController&#125; to enable the</span></span><br><span class="line"><span class="comment">* preference at the right time.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* TODO (mfritze) Build a dependency mechanism to allow a controller to easily define the</span></span><br><span class="line"><span class="comment">* dependent setting.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> availabilityStatus = getAvailabilityStatus();</span><br><span class="line">    <span class="keyword">return</span> (availabilityStatus == AVAILABLE</span><br><span class="line">    || availabilityStatus == AVAILABLE_UNSEARCHABLE</span><br><span class="line">    || availabilityStatus == DISABLED_DEPENDENT_SETTING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用getAvailabilityStatus()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AvailabilityStatus</span><br><span class="line">public abstract int getAvailabilityStatus();</span><br></pre></td></tr></table></figure><p>抽象方法，按照上述举例，继续查看子类TopLevelNetworkEntryPreferenceController.java的getAvailabilityStatus()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAvailabilityStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Utils.isDemoUser(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE_UNSEARCHABLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、调用setVisible()方法设置是否可被显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setVisible(screen, prefKey, <span class="keyword">true</span> <span class="comment">/* visible */</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Show/hide a preference.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(PreferenceGroup group, String key, <span class="keyword">boolean</span> isVisible)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Preference pref = group.findPreference(key);</span><br><span class="line">    <span class="keyword">if</span> (pref != <span class="keyword">null</span>) &#123;</span><br><span class="line">    pref.setVisible(isVisible);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、判断controller是否实现了Preference.OnPreferenceChangeListener接口，是，则设置监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (this instanceof Preference.OnPreferenceChangeListener) &#123;</span><br><span class="line">    final Preference preference &#x3D; screen.findPreference(prefKey);</span><br><span class="line">    preference.setOnPreferenceChangeListener(</span><br><span class="line">    (Preference.OnPreferenceChangeListener) this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，如果希望preference不被显示在界面上，可以通过实现相关preference的controller的getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可。</p><p>二、继续查看BasePreferenceController.java的displayPreference()方法的剩余语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line"><span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line"><span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line">    <span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">    preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据子类controller实现的getAvailabilityStatus()方法的返回值判断是否需要将此preference置为不可点击。</p><p>至此，DashboardFragment.java中displayResourceTiles()方法分析完成。</p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>1、Settings的主Activity实质实现是在SettingsHomepageActivity.java内；<br>2、Settings的主界面设置item的显示是在fragment上，fragment为TopLevelSettings.java，加载显示的布局为top_level_settings.xml；<br>3、Settings主界面设置项item的加载显示主要分为两部分，一部分是xml定义的静态加载，xml为top_level_settings.xml；一部分是DashboardCategory来获取动态加载，此部分下篇分析；<br>4、每个设置项item均为一个preference，通过xml定义加载时，必须要有一个controller，可以是在xml中定义”settings:controller”属性声明，名称必须与类的包名路径相同；也可直接在相关fragment中实现createPreferenceControllers()方法去调用构造相关controller。此二者存其一即可。<br>5、xml中配置preference时，必须定义”android:key“属性；<br>6、需要隐藏不显示某个设置项时，一是可以直接在xml中注释其定义；二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可；</p><p>7、如果需要某个设置项不可点击，一是可以直接调用setEnabled():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Preference preference = screen.findPreference(getPreferenceKey());</span><br><span class="line"><span class="keyword">if</span> (preference != <span class="keyword">null</span>) &#123;</span><br><span class="line">preference.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值为DISABLED_DEPENDENT_SETTING即可。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> 设置 </category>
          
          <category> 设置主界面加载(一) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>屏蔽返回键和多任务键功能</title>
      <link href="2021/07/21/%E5%B1%8F%E8%94%BD%E8%BF%94%E5%9B%9E%E9%94%AE%E5%92%8C%E5%A4%9A%E4%BB%BB%E5%8A%A1%E9%94%AE%E5%8A%9F%E8%83%BD/"/>
      <url>2021/07/21/%E5%B1%8F%E8%94%BD%E8%BF%94%E5%9B%9E%E9%94%AE%E5%92%8C%E5%A4%9A%E4%BB%BB%E5%8A%A1%E9%94%AE%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h6 id="一、屏蔽多任务键功能："><a href="#一、屏蔽多任务键功能：" class="headerlink" title="一、屏蔽多任务键功能："></a>一、屏蔽多任务键功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Log.v(TAG, <span class="string">"onPause()"</span>);</span><br><span class="line">   <span class="keyword">super</span>.onPause();</span><br><span class="line">   mActivityManager = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">   mActivityManager.moveTaskToFront(getTaskId(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意加权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.REORDER_TASKS"</span> /&gt;</span><br></pre></td></tr></table></figure><h6 id="二、屏蔽返回键功能："><a href="#二、屏蔽返回键功能：" class="headerlink" title="二、屏蔽返回键功能："></a>二、屏蔽返回键功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mDialog.setOnKeyListener(<span class="keyword">new</span> DialogInterface.OnKeyListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> keycode, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (keycode)&#123;</span><br><span class="line">                <span class="keyword">case</span> KeyEvent.KEYCODE_BACK:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义音乐播放器</title>
      <link href="2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>2021/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>一、dialog布局</p><p>二、MediaPlayer(后台服务)用法</p><p><a href="https://blog.csdn.net/anhenzhufeng/article/details/89915069" target="_blank" rel="noopener">android:layout_weight 用法</a>  </p><p><a href="https://www.cnblogs.com/MianActivity/p/5867776.html" target="_blank" rel="noopener">shape标签定义形状</a></p><p><a href="https://blog.csdn.net/csf993981061/article/details/75330059" target="_blank" rel="noopener">clip标签的用法</a></p><p><a href="https://www.cnblogs.com/huihuizhang/p/10744780.html" target="_blank" rel="noopener">定时器Timer用法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wangxin on 2021/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicPlayerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MusicPlayerDialog musicPlayerDialog;</span><br><span class="line">    <span class="keyword">private</span> Uri playUri;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MUSIC_TIME = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MUSIC_NAME = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> ImageButton musicOperationButton;</span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mMediaPlayer;</span><br><span class="line">    <span class="keyword">private</span> SeekBar mMusicSeekBar;</span><br><span class="line">    <span class="keyword">private</span> Timer timer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isMusicPlaying;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSeekbarChanging;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MusicPlayerActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.musicplayer_activity_layout);</span><br><span class="line"></span><br><span class="line">        playUri = getIntent().getData();</span><br><span class="line">        Log.v(TAG, <span class="string">"uri = "</span> + playUri);</span><br><span class="line">        <span class="keyword">if</span> (playUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">        isMusicPlaying = <span class="keyword">true</span>;</span><br><span class="line">        isSeekbarChanging = <span class="keyword">false</span>; <span class="comment">//flag</span></span><br><span class="line">        initMusicPlayer();</span><br><span class="line">        play();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMusicPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        musicPlayerDialog = <span class="keyword">new</span> MusicPlayerDialog(<span class="keyword">this</span>);</span><br><span class="line">        musicPlayerDialog.show();</span><br><span class="line"></span><br><span class="line">        musicPlayerDialog.getWindow().setDimAmount(<span class="number">0.3f</span>); <span class="comment">//dialog后面activity背景亮度</span></span><br><span class="line">        musicPlayerDialog.setOnDismissListener(<span class="keyword">new</span> DialogInterface.OnDismissListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismiss</span><span class="params">(DialogInterface dialogInterface)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"MusicPlayerDialog Dismiss"</span>);</span><br><span class="line">                isSeekbarChanging = <span class="keyword">true</span>;</span><br><span class="line">                mMediaPlayer.stop();</span><br><span class="line">                mMediaPlayer.release();</span><br><span class="line">                mMediaPlayer = <span class="keyword">null</span>;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mMediaPlayer = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line">        mMediaPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"Play Completed"</span>);</span><br><span class="line">                musicPlayerDialog.cancel();</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            mMediaPlayer.setDataSource(<span class="keyword">this</span>, playUri);</span><br><span class="line">            mMediaPlayer.prepare();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听进度条</span></span><br><span class="line">        mMusicSeekBar = musicPlayerDialog.getMusicSeekBar();</span><br><span class="line">        mMusicSeekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> time = mMediaPlayer.getCurrentPosition() / <span class="number">1000</span>;</span><br><span class="line">                Log.v(TAG, <span class="string">"time = "</span> + time);</span><br><span class="line">                musicPlayerDialog.setCurrentMusicTime(formatTime(time));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line">                isSeekbarChanging = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line">                isSeekbarChanging = <span class="keyword">false</span>;</span><br><span class="line">                mMediaPlayer.seekTo(mMusicSeekBar.getProgress());</span><br><span class="line">                musicPlayerDialog.setCurrentMusicTime(formatTime(mMediaPlayer.getCurrentPosition() / <span class="number">1000</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听播放/暂停按钮</span></span><br><span class="line">        musicOperationButton = musicPlayerDialog.getMusicOperationButton();</span><br><span class="line">        musicOperationButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Log.v(TAG, <span class="string">"MusicOperationButton onClick = "</span> + isMusicPlaying);</span><br><span class="line">                <span class="keyword">if</span> (isMusicPlaying) &#123;</span><br><span class="line">                    mMediaPlayer.pause();</span><br><span class="line">                    musicOperationButton.setImageDrawable(getResources().getDrawable(R.drawable.music_pause));</span><br><span class="line">                    isMusicPlaying = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mMediaPlayer.start();</span><br><span class="line">                    musicOperationButton.setImageDrawable(getResources().getDrawable(R.drawable.music_play));</span><br><span class="line">                    isMusicPlaying = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setMusicPlayInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mMediaPlayer.isPlaying()) &#123;</span><br><span class="line">            mMediaPlayer.start();</span><br><span class="line">            <span class="keyword">int</span> musicTotalTime = mMediaPlayer.getDuration();<span class="comment">//获取音乐总时间</span></span><br><span class="line">            mMusicSeekBar.setMax(musicTotalTime);</span><br><span class="line">            timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isSeekbarChanging) &#123;</span><br><span class="line">                        mMusicSeekBar.setProgress(mMediaPlayer.getCurrentPosition());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMusicPlayInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Cursor cursor = <span class="keyword">this</span>.getContentResolver().query(playUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        cursor.moveToFirst();</span><br><span class="line">        <span class="keyword">long</span> musicTime = mMediaPlayer.getDuration() / <span class="number">1000</span>;</span><br><span class="line">        MUSIC_TIME = formatTime(musicTime);</span><br><span class="line">        MUSIC_NAME = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DISPLAY_NAME));</span><br><span class="line"></span><br><span class="line">        musicPlayerDialog.setMusicName(MUSIC_NAME);</span><br><span class="line">        musicPlayerDialog.setMusicTime(MUSIC_TIME);</span><br><span class="line">        Log.v(TAG, <span class="string">"Music Name = "</span> + MUSIC_NAME + <span class="string">" Music Time = "</span> + MUSIC_TIME);</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatTime</span><span class="params">(<span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        String standardTime;</span><br><span class="line">        <span class="keyword">if</span> (seconds &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            standardTime = <span class="string">"00:00"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seconds &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"00:%02d"</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seconds &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"%02d:%02d"</span>, seconds / <span class="number">60</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            standardTime = String.format(Locale.getDefault(), <span class="string">"%02d:%02d:%02d"</span>, seconds / <span class="number">3600</span>, seconds % <span class="number">3600</span> / <span class="number">60</span>, seconds % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> standardTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finish();</span><br><span class="line">        overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> 音视频图片开发 </category>
          
          <category> 音频开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>synchronized简单使用</title>
      <link href="2021/07/09/synchronized%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2021/07/09/synchronized%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_28082757/article/details/91542030?utm_term=synchronized%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-91542030&spm=3001.4430" target="_blank" rel="noopener">synchronized简单使用</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Adapter简单使用</title>
      <link href="2021/07/09/Adapter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2021/07/09/Adapter%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_45797116/article/details/117688150" target="_blank" rel="noopener">Adapter简单使用</a></p><p><a href="https://www.jianshu.com/p/24833a2cffd1" target="_blank" rel="noopener">BaseAdapter的基本使用及优化</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android UI控件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android弹出异常dialog源码分析</title>
      <link href="2021/07/09/%C2%96Android%E5%BC%B9%E5%87%BA%E5%BC%82%E5%B8%B8dialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/09/%C2%96Android%E5%BC%B9%E5%87%BA%E5%BC%82%E5%B8%B8dialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012960536/article/details/89339176" target="_blank" rel="noopener">Android弹出异常dialog源码分析</a></p><p><a href="https://blog.csdn.net/zhangyongfeiyong/article/details/70832263" target="_blank" rel="noopener">分析2，注意这里的dialog点击事件后的线程唤醒</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通知列表中的图标显示为灰色方框</title>
      <link href="2021/07/08/%C2%96%C2%96%E9%80%9A%E7%9F%A5%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E7%81%B0%E8%89%B2%E6%96%B9%E6%A1%86/"/>
      <url>2021/07/08/%C2%96%C2%96%E9%80%9A%E7%9F%A5%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E7%81%B0%E8%89%B2%E6%96%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>通知列表中的图标显示为灰色方框？<br>解决方法：RemoteViews里有成员变量mApplication，方法isSystemApp()，判断是否为系统app，再决定是否上色，因为系统app的图标都是正常的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSmallIconColor</span><span class="params">(Icon smallIcon, RemoteViews contentView,</span></span></span><br><span class="line"><span class="function"><span class="params">               StandardTemplateParams p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> colorable = getColorUtil().isGrayscaleIcon(mContext, smallIcon);<span class="comment">//判断是否上色</span></span><br><span class="line">    <span class="comment">//add by wangxin</span></span><br><span class="line">    ApplicationInfo applicationInfo = contentView.mApplication;</span><br><span class="line">    <span class="keyword">boolean</span> isSystemApp = applicationInfo.isSystemApp();</span><br><span class="line">    String packageName = applicationInfo.packageName;</span><br><span class="line">    android.util.Log.v(TAG, <span class="string">"isSystemApp = "</span> + isSystemApp + <span class="string">" packageName = "</span> + packageName );</span><br><span class="line">    colorable = isSystemApp ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"com.baidu.input_huawei"</span>.equals(packageName) || <span class="string">"com.cadothy.broadcast"</span>.equals(packageName)) &#123;<span class="comment">//过滤特殊app</span></span><br><span class="line">        colorable = <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">if</span> (isColorized(p)) &#123;</span><br><span class="line">        color = getPrimaryTextColor(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    contentView.setInt(R.id.notification_header, <span class="string">"setOriginalIconColor"</span>,</span><br><span class="line">                       colorable ? color : COLOR_DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>u盘查询大小速度慢</title>
      <link href="2021/07/08/u%E7%9B%98%E6%9F%A5%E8%AF%A2%E5%A4%A7%E5%B0%8F%E9%80%9F%E5%BA%A6%E6%85%A2/"/>
      <url>2021/07/08/u%E7%9B%98%E6%9F%A5%E8%AF%A2%E5%A4%A7%E5%B0%8F%E9%80%9F%E5%BA%A6%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<h6 id="一、俩个问题出现的原因："><a href="#一、俩个问题出现的原因：" class="headerlink" title="一、俩个问题出现的原因："></a>一、俩个问题出现的原因：</h6><p>1、文件管理中插入u盘后，偶现侧边栏内部存储和u盘界面消失：设置了provider查询时间限制20s，超时后cursor返不回去。<br>2、设置中”存储”和进入文件管理u盘文件里面 出现黑屏：主线程查询大小导致阻塞。</p><h6 id="二、解决办法："><a href="#二、解决办法：" class="headerlink" title="二、解决办法："></a>二、解决办法：</h6><ul><li>问题1：最简单的就是延长或取消查询时间限制，但是俺家产品为了用户体验，后台查询时须给用户提示，查询结束后显示结果。是不是觉得简单？后来自闭了… 解决办法问大佬，一块研究了好长时间，最后确定用 “二次查询”这个方法，下面单独说。</li><li>问题2：这个简单，另起线程，我是用的AsyncTask，因为这东西我第一次用。</li></ul><h6 id="三、相关流程："><a href="#三、相关流程：" class="headerlink" title="三、相关流程："></a>三、相关流程：</h6><blockquote><p>DocumentsApplication.java<br>文件管理启动时，注册并监听了 rootUri，当u盘插入后，调用相关onChange()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"Application onCreate"</span>);</span><br><span class="line">    ...</span><br><span class="line">        mProviders = <span class="keyword">new</span> ProvidersCache(<span class="keyword">this</span>);</span><br><span class="line">    mProviders.updateAsync(<span class="keyword">false</span>); <span class="comment">//注册监听 rootUri 地址，这不进行分析，很简单的</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ContentProviderClient <span class="title">acquireUnstableProviderOrThrow</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ContentResolver resolver, String authority)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ContentProviderClient client = resolver.acquireUnstableContentProviderClient(</span><br><span class="line">        authority);</span><br><span class="line">    <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Failed to acquire provider for "</span> + authority);</span><br><span class="line">    &#125;</span><br><span class="line">    client.setDetectNotResponding(PROVIDER_ANR_TIMEOUT); <span class="comment">// 20s provider查询时间限制，这就是引起界面消失的根本原因，但不是查的慢的原因</span></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ProvidersCache.java<br>loadRootsForAuthority() 这个方法里不仅实现了rootsUri的监听，而且查找相关信息（内部存储、u盘）就是在这里，之前分析到 cursor = client.query(rootsUri, null, null, null, null); 因为太菜，根本就不知道这还能往下分析，随后分析到 framework ExternalStorageProvider里       </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange, Uri uri)</span> </span>&#123;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"onChange = "</span> + uri);</span><br><span class="line">    <span class="keyword">if</span> (uri == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Received onChange event for null uri. Skipping."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Updating roots due to change at "</span> + uri);</span><br><span class="line">    &#125;</span><br><span class="line">    updateAuthorityAsync(uri.getAuthority()); <span class="comment">//new UpdateTask() 往下会走这</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"doInBackground start "</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> start = SystemClock.elapsedRealtime();</span><br><span class="line"></span><br><span class="line">    mTaskRoots.put(mRecentsRoot.authority, mRecentsRoot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = mContext.getPackageManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick up provider with action string</span></span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(DocumentsContract.PROVIDER_INTERFACE); <span class="comment">// "android.content.action.DOCUMENTS_PROVIDER"</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;ResolveInfo&gt; providers = pm.queryIntentContentProviders(intent, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (ResolveInfo info : providers) &#123;</span><br><span class="line">        ProviderInfo providerInfo = info.providerInfo;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"providerInfo = "</span> + providerInfo);</span><br><span class="line">        <span class="keyword">if</span> (providerInfo.authority != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleDocumentsProvider(providerInfo); <span class="comment">//处理文件管理的providerInfo</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> delta = SystemClock.elapsedRealtime() - start;</span><br><span class="line">    <span class="keyword">if</span> (VERBOSE) Log.v(TAG,</span><br><span class="line">                       <span class="string">"Update found "</span> + mTaskRoots.size() + <span class="string">" roots in "</span> + delta + <span class="string">"ms"</span>);</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"Update found "</span> + mTaskRoots.size() + <span class="string">" roots in "</span> + delta + <span class="string">"ms"</span>);        </span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mFirstLoadDone = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mBootCompletedResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mBootCompletedResult.finish();</span><br><span class="line">            mBootCompletedResult = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mRoots = mTaskRoots;</span><br><span class="line">        mStoppedAuthorities = mTaskStoppedAuthorities;</span><br><span class="line">    &#125;</span><br><span class="line">    mFirstLoad.countDown();</span><br><span class="line">    LocalBroadcastManager.getInstance(mContext).sendBroadcast(<span class="keyword">new</span> Intent(BROADCAST_ACTION)); <span class="comment">//查找完后发广播</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleDocumentsProvider</span><span class="params">(ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Ignore stopped packages for now; we might query them</span></span><br><span class="line">    <span class="comment">// later during UI interaction.</span></span><br><span class="line">    <span class="keyword">if</span> ((info.applicationInfo.flags &amp; ApplicationInfo.FLAG_STOPPED) != <span class="number">0</span>) &#123;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"mTaskStoppedAuthorities  "</span> + info.authority);  </span><br><span class="line">        <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Ignoring stopped authority "</span> + info.authority);</span><br><span class="line">        mTaskStoppedAuthorities.add(info.authority);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    android.util.Log.v(<span class="string">"Rain.G"</span>,<span class="string">"handleDocumentsProvider  "</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forceRefresh = mForceRefreshAll</span><br><span class="line">        || Objects.equals(info.packageName, mForceRefreshPackage);</span><br><span class="line"></span><br><span class="line">    mTaskRoots.putAll(info.authority, loadRootsForAuthority(mContext.getContentResolver(),</span><br><span class="line">                                                            info.authority, forceRefresh)); <span class="comment">//所有rootInfo放到集合中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重点，重点，重点，实现注册之前的rootsUri监听，以及数据的查找</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;RootInfo&gt; <span class="title">loadRootsForAuthority</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ContentResolver resolver, String authority, <span class="keyword">boolean</span> forceRefresh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Loading roots for "</span> + authority);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;RootInfo&gt; roots = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> PackageManager pm = mContext.getPackageManager();</span><br><span class="line">        ProviderInfo provider = pm.resolveContentProvider(</span><br><span class="line">                authority, PackageManager.GET_META_DATA);</span><br><span class="line">        ...</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"synchronized 1"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mObservedAuthoritiesDetails) &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"synchronized 2"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mObservedAuthoritiesDetails.containsKey(authority)) &#123;</span><br><span class="line">                android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"! containsKey authority"</span>);</span><br><span class="line">                CharSequence appName = pm.getApplicationLabel(provider.applicationInfo);</span><br><span class="line">                String packageName = provider.applicationInfo.packageName;</span><br><span class="line"></span><br><span class="line">                mObservedAuthoritiesDetails.put(</span><br><span class="line">                        authority, <span class="keyword">new</span> PackageDetails(appName.toString(), packageName));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Watch for any future updates</span></span><br><span class="line">                <span class="keyword">final</span> Uri rootsUri = DocumentsContract.buildRootsUri(authority);</span><br><span class="line">                android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"rootsUri = "</span> + rootsUri);   <span class="comment">// content://com.android.externalstorage.documents/root</span></span><br><span class="line">                mContext.getContentResolver().registerContentObserver(rootsUri, <span class="keyword">true</span>, mObserver); <span class="comment">//实现监听</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"authority = "</span> + authority);</span><br><span class="line">        <span class="keyword">final</span> Uri rootsUri = DocumentsContract.buildRootsUri(authority);</span><br><span class="line">        android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"rootsUri = "</span> + rootsUri + <span class="string">" forceRefresh = "</span> + forceRefresh);</span><br><span class="line">        <span class="keyword">if</span> (!forceRefresh) &#123;</span><br><span class="line">            <span class="comment">// Look for roots data that we might have cached for ourselves in the</span></span><br><span class="line">            <span class="comment">// long-lived system process.</span></span><br><span class="line">            <span class="keyword">final</span> Bundle systemCache = resolver.getCache(rootsUri);</span><br><span class="line">            <span class="keyword">if</span> (systemCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ArrayList&lt;RootInfo&gt; cachedRoots = systemCache.getParcelableArrayList(TAG);</span><br><span class="line">                <span class="keyword">assert</span>(cachedRoots != <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (!cachedRoots.isEmpty() || PERMIT_EMPTY_CACHE.contains(authority)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"System cache hit for "</span> + authority);</span><br><span class="line">                    <span class="keyword">return</span> cachedRoots;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"Ignoring empty system cache hit for "</span> + authority);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ContentProviderClient client = <span class="keyword">null</span>;</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = DocumentsApplication.acquireUnstableProviderOrThrow(resolver, authority);</span><br><span class="line">            cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>); <span class="comment">// here，就是这里查的慢，超过20s后cursor返不回去的，会报错</span></span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"RootInfo = "</span> + RootInfo.fromRootsCursor(authority, cursor));   </span><br><span class="line">                <span class="keyword">final</span> RootInfo root = RootInfo.fromRootsCursor(authority, cursor);</span><br><span class="line">                roots.add(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Failed to load some roots from "</span> + authority, e);</span><br><span class="line">            <span class="comment">// We didn't load every root from the provider. Don't put it to</span></span><br><span class="line">            <span class="comment">// system cache so that we'll try loading them again next time even</span></span><br><span class="line">            <span class="comment">// if forceRefresh is false.</span></span><br><span class="line">            <span class="keyword">return</span> roots;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            FileUtils.closeQuietly(cursor);</span><br><span class="line">            FileUtils.closeQuietly(client);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cache these freshly parsed roots over in the long-lived system</span></span><br><span class="line">        <span class="comment">// process, in case our process goes away. The system takes care of</span></span><br><span class="line">        <span class="comment">// invalidating the cache if the package or Uri changes.</span></span><br><span class="line">        <span class="keyword">final</span> Bundle systemCache = <span class="keyword">new</span> Bundle();</span><br><span class="line">        <span class="keyword">if</span> (roots.isEmpty() &amp;&amp; !PERMIT_EMPTY_CACHE.contains(authority)) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Provider returned no roots. Possibly naughty: "</span> + authority);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            android.util.Log.v(<span class="string">"Rain.G"</span>, <span class="string">"roots size = "</span> + roots.size());</span><br><span class="line">            systemCache.putParcelableArrayList(TAG, roots);</span><br><span class="line">            resolver.putCache(rootsUri, systemCache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> roots;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ExternalStorageProvider.java</p><p>之前的办法就是 既然你查找的慢，那我就不需要了呗，反正文件管理进到u盘里面也有接口查大小，后来发现产品新加的”复制时要判断当前根目录剩余大小”功能冲突，因为当用户插u盘后复制文件，你的u盘大小压根就没获取，所以就没办法往u盘复制东西。所以说，这块还屏蔽不了。解决办法问大佬，一块研究了好长时间，最后确定用 “二次查询”这个方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">queryRoots</span><span class="params">(String[] projection)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MatrixCursor result = <span class="keyword">new</span> MatrixCursor(resolveRootProjection(projection));</span><br><span class="line">    <span class="keyword">synchronized</span> (mRootsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (RootInfo root : mRoots.values()) &#123;</span><br><span class="line">            <span class="keyword">final</span> RowBuilder row = result.newRow();</span><br><span class="line">            row.add(Root.COLUMN_ROOT_ID, root.rootId);<span class="comment">//相关信息，名字，大小等</span></span><br><span class="line">            row.add(Root.COLUMN_FLAGS, root.flags);</span><br><span class="line">            row.add(Root.COLUMN_TITLE, root.title);</span><br><span class="line">            row.add(Root.COLUMN_DOCUMENT_ID, root.docId);</span><br><span class="line">            row.add(Root.COLUMN_QUERY_ARGS, SUPPORTED_QUERY_ARGS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> availableBytes = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (root.reportAvailableBytes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (root.storageUuid != <span class="keyword">null</span>) &#123; <span class="comment">//内部存储here</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        availableBytes = getContext()</span><br><span class="line">                            .getSystemService(StorageStatsManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                            .<span class="title">getFreeBytes</span>(<span class="title">root</span>.<span class="title">storageUuid</span>)</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        Log.w(TAG, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//u盘here</span></span><br><span class="line">                    availableBytes = root.path.getUsableSpace();<span class="comment">//终于找到查找慢的根本地方了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row.add(Root.COLUMN_AVAILABLE_BYTES, availableBytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="四、最终解决办法："><a href="#四、最终解决办法：" class="headerlink" title="四、最终解决办法："></a>四、最终解决办法：</h6><blockquote><p>二次查询：即第一次查询后，将u盘相关信息返回，u盘设置summary时，判断大小，如果&lt;0，即给用户提示”查找未结束”。<br>随即通知uri进行二次查询，这次就不管它查多久了，查到结果后界面更新，显示大小。办法是有了，但是过程有点艰难。</p></blockquote><p>1、第一次查询：不让其走u盘的查找方法，即cursor返回的大小就是默认值-1，就知道已经开始查找但未结束。<br>实现二次查询，必须将之前提到的20s的查找时间限制，延长或改为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RootsFragment.java 查找完会发广播，loader加载，结束后onLoadFinished</span></span><br><span class="line">mCallbacks = <span class="keyword">new</span> LoaderCallbacks&lt;Collection&lt;RootInfo&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Loader&lt;Collection&lt;RootInfo&gt;&gt; onCreateLoader(<span class="keyword">int</span> id, Bundle args) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RootsLoader(activity, providers, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Loader&lt;Collection&lt;RootInfo&gt;&gt; loader, Collection&lt;RootInfo&gt; roots)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAdded()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Intent handlerAppIntent = getArguments().getParcelable(EXTRA_INCLUDE_APPS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent intent = activity.getIntent();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> excludeSelf =</span><br><span class="line">            intent.getBooleanExtra(DocumentsContract.EXTRA_EXCLUDE_SELF, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">final</span> String excludePackage = excludeSelf ? activity.getCallingPackage() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//add by wangxin u盘二次查询空间</span></span><br><span class="line">        <span class="keyword">for</span>(RootInfo root :  roots)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.isUsb() &amp;&amp; root.availableBytes &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                Uri uri = DocumentsContract.buildRootUri(root.authority, root.rootId);<span class="comment">//根据u盘的id重建一个uri</span></span><br><span class="line">                getContext().getContentResolver().notifyChange(uri, <span class="keyword">null</span>);<span class="comment">//onChange() 二次查询</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//add end</span></span><br><span class="line">        List&lt;Item&gt; sortedItems = sortLoadResult(roots, excludePackage, handlerAppIntent,</span><br><span class="line">                                                DocumentsApplication.getProvidersCache(getContext()));</span><br><span class="line">        mAdapter = <span class="keyword">new</span> RootsAdapter(activity, sortedItems, mDragListener);</span><br><span class="line">        mList.setAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line">        mInjector.shortcutsUpdater.accept(roots);</span><br><span class="line">        mInjector.appsRowManager.updateList(mApplicationItemList);</span><br><span class="line">        mInjector.appsRowManager.updateView(activity);</span><br><span class="line">        onCurrentRootChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RootItem</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(View convertView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context context = convertView.getContext();</span><br><span class="line">    <span class="keyword">if</span> (root.supportsEject()) &#123;</span><br><span class="line">        bindAction(convertView, View.VISIBLE, R.drawable.ic_eject,</span><br><span class="line">                   context.getResources().getString(R.string.menu_eject_root));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bindAction(convertView, View.GONE, -<span class="number">1</span> <span class="comment">/* iconResource */</span>, <span class="keyword">null</span> <span class="comment">/* description */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Show available space if no summary</span></span><br><span class="line">    String summaryText = root.summary;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(summaryText) &amp;&amp; root.availableBytes &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        summaryText = context.getString(R.string.root_available_bytes,</span><br><span class="line">                                        Formatter.formatFileSize(context, root.availableBytes));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add by wangxin 第一次查询后给用户提示 正在查询</span></span><br><span class="line">    <span class="keyword">if</span> (root.isUsb() &amp;&amp; root.availableBytes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        summaryText = context.getString(R.string.querying_udisk_available);</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line">    bindIconAndTitle(convertView);</span><br><span class="line">    bindSummary(convertView, summaryText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ProvidersCache.java</span></span><br><span class="line"><span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY_EXTERNALSTORAGE = <span class="string">"com.android.externalstorage.documents"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGENAME_EXTERNALSTORAGE = <span class="string">"com.android.externalstorage"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUERY_PARAMS = <span class="string">"NeedAvailableBytes"</span>;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UpdateTask</span><span class="params">(<span class="keyword">boolean</span> forceRefreshAll, String forceRefreshPackage, Uri uri)</span> </span>&#123; <span class="comment">//因为涉及到二次查询，所以得加上Uri，方便后期判断是否为二次查询</span></span><br><span class="line">    <span class="keyword">new</span> Exception(<span class="string">"new UpdateTask uri:"</span>+uri).printStackTrace();</span><br><span class="line">    mForceRefreshAll = forceRefreshAll;</span><br><span class="line">    mForceRefreshPackage = forceRefreshPackage;</span><br><span class="line">    mUri = uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;RootInfo&gt; <span class="title">loadRootsForAuthority</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ContentResolver resolver, String authority, <span class="keyword">boolean</span> forceRefresh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loadRootsForAuthority(resolver, authority, forceRefresh, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    client = DocumentsApplication.acquireUnstableProviderOrThrow(resolver, authority);</span><br><span class="line">    cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//mod by wangxin</span></span><br><span class="line">    <span class="keyword">if</span> (AUTHORITY_EXTERNALSTORAGE.equals(authority)) &#123;</span><br><span class="line">        cursor = client.query(rootsUri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cursor = client.query(rootsUri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;<span class="comment">//mod end</span></span><br><span class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">        <span class="keyword">final</span> RootInfo root = RootInfo.fromRootsCursor(authority, cursor);</span><br><span class="line">        roots.add(root);</span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleDocumentsProvider</span><span class="params">(ProviderInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Ignore stopped packages for now; we might query them</span></span><br><span class="line">            <span class="comment">// later during UI interaction.</span></span><br><span class="line">            <span class="keyword">if</span> ((info.applicationInfo.flags &amp; ApplicationInfo.FLAG_STOPPED) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (VERBOSE) Log.v(TAG, <span class="string">"Ignoring stopped authority "</span> + info.authority);</span><br><span class="line">                mTaskStoppedAuthorities.add(info.authority);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> forceRefresh = mForceRefreshAll</span><br><span class="line">                    || Objects.equals(info.packageName, mForceRefreshPackage);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//add by wangxin </span></span><br><span class="line">            String[] projection = <span class="keyword">null</span>; <span class="comment">//二次查询我们自己重建的uri 传过来，判断是否有rootId，有的话传参</span></span><br><span class="line">            <span class="keyword">if</span> (PACKAGENAME_EXTERNALSTORAGE.equals(info.packageName) &amp;&amp; mUri != <span class="keyword">null</span> &amp;&amp; mUri.getPathSegments().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                projection = <span class="keyword">new</span> String[]&#123; QUERY_PARAMS &#125;;</span><br><span class="line">            &#125;<span class="comment">//add end</span></span><br><span class="line">            mTaskRoots.putAll(info.authority, loadRootsForAuthority(mContext.getContentResolver(),</span><br><span class="line">                    info.authority, forceRefresh, projection));<span class="comment">//add projection by wangxin</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、二次查询，根据之前notifyChange uri，传参数，到这里进行判断，实现最后的二次查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ExternalStorageProvider.java 将文件所有的 "synchronized (mRootsLock)"、@GuardedBy("mRootsLock")删掉，不要锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">queryRoots</span><span class="params">(String[] projection)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String[] resolvedProjection = projection;<span class="comment">//add by wangxin</span></span><br><span class="line">    <span class="keyword">if</span> (projection != <span class="keyword">null</span> &amp;&amp; projection.length &gt; <span class="number">0</span> &amp;&amp; QUERY_AGAIN_PARAMS.equals(projection[<span class="number">0</span>])) &#123;</span><br><span class="line">        resolvedProjection = <span class="keyword">null</span>;</span><br><span class="line">    &#125;<span class="comment">//add end</span></span><br><span class="line">    <span class="keyword">final</span> MatrixCursor result = <span class="keyword">new</span> MatrixCursor(resolveRootProjection(resolvedProjection));</span><br><span class="line">    <span class="comment">//synchronized (mRootsLock) &#123; del all synchronized by wangxin</span></span><br><span class="line">    <span class="keyword">for</span> (RootInfo root : mRoots.values()) &#123;</span><br><span class="line">        <span class="keyword">final</span> RowBuilder row = result.newRow();</span><br><span class="line">        row.add(Root.COLUMN_ROOT_ID, root.rootId);</span><br><span class="line">        row.add(Root.COLUMN_FLAGS, root.flags);</span><br><span class="line">        row.add(Root.COLUMN_TITLE, root.title);</span><br><span class="line">        row.add(Root.COLUMN_DOCUMENT_ID, root.docId);</span><br><span class="line">        row.add(Root.COLUMN_QUERY_ARGS, SUPPORTED_QUERY_ARGS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> availableBytes = -<span class="number">1</span>;</span><br><span class="line">        File file;</span><br><span class="line">        <span class="keyword">if</span> (root.reportAvailableBytes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.storageUuid != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    availableBytes = getContext()</span><br><span class="line">                        .getSystemService(StorageStatsManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                        .<span class="title">getFreeBytes</span>(<span class="title">root</span>.<span class="title">storageUuid</span>)</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    Log.w(TAG, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//add by wangxin 真正的二次查询</span></span><br><span class="line">                <span class="keyword">if</span> (projection != <span class="keyword">null</span> &amp;&amp; projection.length &gt; <span class="number">0</span> &amp;&amp; QUERY_AGAIN_PARAMS.equals(projection[<span class="number">0</span>])) &#123;</span><br><span class="line">                    availableBytes = root.path.getUsableSpace();</span><br><span class="line">                &#125;<span class="comment">//add end</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        row.add(Root.COLUMN_AVAILABLE_BYTES, availableBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Parcel类</title>
      <link href="2021/05/31/Parcel%E7%B1%BB/"/>
      <url>2021/05/31/Parcel%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="一、Parcel类"><a href="#一、Parcel类" class="headerlink" title="一、Parcel类"></a>一、Parcel类</h5><h6 id="1-1-定义："><a href="#1-1-定义：" class="headerlink" title="1.1  定义："></a>1.1  定义：</h6><p>Parcel就是一个存放读取数据的容器， Android系统中的binder进程间通信就使用了Parcel类来进行客户端与服务端数据的交互，而且AIDL的数据也是通过Parcel来交互的。</p><h6 id="1-2-继承关系："><a href="#1-2-继承关系：" class="headerlink" title="1.2  继承关系："></a>1.2  继承关系：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Parcel</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><h6 id="1-3-基本方法："><a href="#1-3-基本方法：" class="headerlink" title="1.3  基本方法："></a>1.3  基本方法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">常用方法介绍：</span><br><span class="line">obtain()  获得一个新的parcel ，相当于<span class="keyword">new</span>一个对象</span><br><span class="line">dataSize()  得到当前parcel对象的实际存储空间</span><br><span class="line">dataCapacity()  得到当前parcel对象的已分配的存储空间, &gt;=dataSize()值  (以空间换时间)</span><br><span class="line">dataPostion()   获得当前parcel对象的偏移量(类似于文件流指针的偏移量)</span><br><span class="line">setDataPosition()  设置偏移量</span><br><span class="line">recyle()  清空、回收parcel对象的内存</span><br><span class="line"></span><br><span class="line">writeInt(<span class="keyword">int</span>)   写入一个整数</span><br><span class="line">writeFloat(<span class="keyword">float</span>)   写入一个浮点数</span><br><span class="line">writeDouble(<span class="keyword">double</span>)   写入一个双精度数</span><br><span class="line">writeString(string)   写入一个字符串</span><br><span class="line"></span><br><span class="line">当然，还有更多的writeXXX()方法，与之对应的就是readXXX()，具体方法请参阅SDK。其中几个值得注意的方法为：</span><br><span class="line">         writeException() 在Parcel队头写入一个异常</span><br><span class="line">         writeNoException()  Parcel队头写入“无异常“</span><br><span class="line">         readException() 在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span><br></pre></td></tr></table></figure><h6 id="1-4-客户端transact"><a href="#1-4-客户端transact" class="headerlink" title="1.4 客户端transact():"></a>1.4 客户端transact():</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span>  <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"><span class="comment">//参数说明：   </span></span><br><span class="line"><span class="comment">// code ：是请求的ID号    </span></span><br><span class="line"><span class="comment">// data ：客户端请求发送的参数   </span></span><br><span class="line"><span class="comment">// reply：服务器端返回的结果   </span></span><br><span class="line"><span class="comment">// flags：一些额外的标识，如FLAG_ONEWAY等，通常为0.</span></span><br></pre></td></tr></table></figure><h6 id="1-5-服务端与客户端的调用流程："><a href="#1-5-服务端与客户端的调用流程：" class="headerlink" title="1.5 服务端与客户端的调用流程："></a>1.5 服务端与客户端的调用流程：</h6><p><img src="http://wxyy97.com/image/parcel.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 在客户端创建一个IBinder 接口对象</span></span><br><span class="line"><span class="keyword">private</span> IBinder mPlusBinder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 将客户端的IBinder 接口对象与服务端的MyBinder进行关联（说法不太妥当，其实当调用bindService之后，mPlusBinder就是服务端的对象了。）</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">       mPlusBinder = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 执行transact（）方法</span></span><br><span class="line">mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 回调mPlusBinder 的onTransact（）方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="二、在进程间传递Parcel对象实现进程间通信"><a href="#二、在进程间传递Parcel对象实现进程间通信" class="headerlink" title="二、在进程间传递Parcel对象实现进程间通信"></a>二、在进程间传递Parcel对象实现进程间通信</h5><h6 id="2-1-Demo描述："><a href="#2-1-Demo描述：" class="headerlink" title="2.1 Demo描述："></a>2.1 Demo描述：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) 在服务端 CalcPlusService 实现两个整数的相乘和相除，并将结果返回；</span><br><span class="line"><span class="number">2</span>) 在客户端 MainActivity 获取用户输入的参数，并传递到服务端；</span><br></pre></td></tr></table></figure><h6 id="2-2-服务端的实现："><a href="#2-2-服务端的实现：" class="headerlink" title="2.2 服务端的实现："></a>2.2 服务端的实现：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcPlusService</span>  <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"CalcPlusService"</span>;</span><br><span class="line">    <span class="keyword">private</span> MyBinder binder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onCreate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onBind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> binder;<span class="comment">//当客户端调用bindService时此方法 会被调用，并且返回客户端一个binder对象；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onUnbind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);<span class="comment">//当客户端调用unbindService时此方法 会被调用；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRebind(intent);</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onRebind()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.i(<span class="string">"Server"</span>,<span class="string">"onDestroy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;<span class="comment">//自定义Binder，继承Binder类，【class Binder implements IBinder】，实现onTransact方法；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> arg0;</span><br><span class="line">            <span class="keyword">int</span> arg1;</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR); <span class="comment">//指定服务的标识为CalcPlusService</span></span><br><span class="line">            arg0 = data.readInt();<span class="comment">//读取一个整数</span></span><br><span class="line">            arg1 = data.readInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (code)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x110</span>:&#123;</span><br><span class="line">                    result = arg0 * arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x111</span>:&#123;</span><br><span class="line">                    result = arg0 / arg1;</span><br><span class="line">                    reply.writeNoException();<span class="comment">//Parcel队头写入“无异常“</span></span><br><span class="line">                    reply.writeInt(result);<span class="comment">//写入一个整数</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-注册服务，并新指定一个remote进程："><a href="#2-3-注册服务，并新指定一个remote进程：" class="headerlink" title="2.3 注册服务，并新指定一个remote进程："></a>2.3 注册服务，并新指定一个remote进程：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=<span class="string">".CalcPlusService"</span></span><br><span class="line">      android:process=<span class="string">".remote"</span>&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><h6 id="2-4-客户端的调用："><a href="#2-4-客户端的调用：" class="headerlink" title="2.4 客户端的调用："></a>2.4 客户端的调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder mPlusBinder;<span class="comment">//进程间通信Parcel对象的传递主要靠IBinder 接口；</span></span><br><span class="line">    <span class="keyword">private</span> EditText et1,et2;</span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConnPlus = <span class="keyword">new</span> ServiceConnection()&#123;<span class="comment">//ServiceConnection 是一个接口，是客户端与服务端进行连接的一个桥梁；</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">" mServiceConnPlus onServiceConnected"</span>);</span><br><span class="line">            mPlusBinder = service;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span></span>&#123;</span><br><span class="line">            Log.i(<span class="string">"Server"</span>, <span class="string">"mServiceConnPlus onServiceDisconnected"</span>);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//关于service：//</span></span><br><span class="line">            <span class="comment">//（1）取消绑定仅需要使用unbindService()方法，并将ServiceConnnection传递给unbindService()方法。</span></span><br><span class="line">            <span class="comment">//（2）需注意的是，unbindService()方法成功后，系统并不会调用onServiceDisconnected()，因为onServiceDisconnected()仅在意外断开绑定时才被调用； </span></span><br><span class="line">            <span class="comment">//（3）当bindService后，不能stopService,需要通过unBindService()来解除绑定， </span></span><br><span class="line">            <span class="comment">//（4）startService()后，不可以通过unBindService()来销毁service；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        et1 = (EditText)findViewById(R.id.et1);</span><br><span class="line">        et2 = (EditText)findViewById(R.id.et2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, CalcPlusService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">boolean</span> plus = bindService(intent, mServiceConnPlus, Context.BIND_AUTO_CREATE);<span class="comment">//标志位BIND_AUTO_CREATE：automatically create the service as long as the binding exists.</span></span><br><span class="line">        Toast.makeText(view.getContext(), <span class="string">"绑定服务"</span>+plus, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">(View view)</span></span>&#123; <span class="comment">//自定义的方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unbindService(mServiceConnPlus);</span><br><span class="line">            mPlusBinder = <span class="keyword">null</span>;<span class="comment">//这里必须代码置空</span></span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"解绑成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Toast.makeText(view.getContext(), <span class="string">"未绑定"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**乘法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();<span class="comment">//Parcel.obtain()：获得一个新的parcel ，相当于new一个对象；</span></span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//写入服务的标志，与enforceInterface（）配套使用；</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x110</span>, data, reply, <span class="number">0</span>);<span class="comment">//transact(int code, Parcel data, Parcel reply, int flags)</span></span><br><span class="line">                reply.readException();<span class="comment">//在Parcel队头读取，若读取值为异常，则抛出该异常；否则，程序正常运行。</span></span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**除法运算*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divInvoked</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!inspectData())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPlusBinder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"未连接服务端或服务端被异常杀死"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            android.os.Parcel data = android.os.Parcel.obtain();</span><br><span class="line">            android.os.Parcel reply = android.os.Parcel.obtain();</span><br><span class="line">            <span class="keyword">int</span> result;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                data.writeInterfaceToken(<span class="string">"CalcPlusService"</span>);<span class="comment">//通过Parcel::writeInterfaceToken往data写入一个RPC头</span></span><br><span class="line">                data.writeInt(Integer.parseInt(et1.getText().toString()));</span><br><span class="line">                data.writeInt(Integer.parseInt(et2.getText().toString()));</span><br><span class="line">                mPlusBinder.transact(<span class="number">0x111</span>, data, reply, <span class="number">0</span>);</span><br><span class="line">                reply.readException();</span><br><span class="line">                result = reply.readInt();</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, result + <span class="string">""</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inspectData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(et1.getText().toString())||TextUtils.isEmpty(et2.getText().toString()))&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"请填全两个参数！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h5><p>通过本Demo应该掌握以下几点：<br>（1）服务端自定义 Binder 类，实现其 onTransact() 方法；<br>（2）客户端使用 ServiceConnection 接口对象的使用，以及在客户端发起bindService（“三个参数的含义”）;<br>（3）了解客户端 IBinder 参与的行为，以及调用 transact(int code, Parcel data, Parcel reply, int flags) 方法;<br>（4）了解 Parcel 对象及基本的write/read等方法；</p><h5 id="四、转载说明"><a href="#四、转载说明" class="headerlink" title="四、转载说明"></a>四、转载说明</h5><p>注：首先说明这篇文章不是原创的，网上看到觉得这篇文章写的简洁易理解，但又怕哪天找不到，所以把内容复制下来，唯一目的就是为了防止链接失效以及更方便的找到，若侵犯了原创者的相关利益，请联系我删除。<a href="https://blog.csdn.net/happy_horse/article/details/51733492" target="_blank" rel="noopener">原创链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android 数据持久化 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏添加通知图标</title>
      <link href="2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/"/>
      <url>2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%80%9A%E7%9F%A5%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h6 id="状态栏添加通知图标"><a href="#状态栏添加通知图标" class="headerlink" title="状态栏添加通知图标"></a>状态栏添加通知图标</h6><p><a href="https://blog.csdn.net/u012894808/article/details/106113865" target="_blank" rel="noopener">做法借鉴</a></p><p>最近做了一个添加通知图标的需求，因为之前没做过，所以借鉴了上面的做法，最终效果也实现了。其实做完发现其实并不是多难的，但是里面要学的东西也挺多的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、为什么要在 PhoneStatusBarPolicy.java 这个文件中进行修改，也就是需要分析下相关的流程。因为最近改状态栏的bug还挺频繁的，根据男人的第n感 觉得这个文件挺重要的，所以想借着这个来之不易的闲暇时间分析下状态栏的代码，这里就是其中的一部分。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2、在上面链接中，有“第一步声明Slot”这个步骤，虽然只是个简单的字符串，但是定义的方式没见过，而且发现同事在里面也有定义，所以这块需要学习下。</span><br><span class="line">原因：</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内置app</title>
      <link href="2021/04/22/%E5%86%85%E7%BD%AEapp/"/>
      <url>2021/04/22/%E5%86%85%E7%BD%AEapp/</url>
      
        <content type="html"><![CDATA[<h6 id="以UCBrowser-apk为例"><a href="#以UCBrowser-apk为例" class="headerlink" title="以UCBrowser.apk为例"></a>以UCBrowser.apk为例</h6><p>1、将app放到该目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;apps</span><br></pre></td></tr></table></figure><p>2、将内置应用的路径写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;cells_build.mk:</span><br><span class="line">PRODUCT_COPY_FILES +&#x3D; \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:$(TARGET_COPY_OUT_SYSTEM)&#x2F;bin&#x2F;copy_apps.sh \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;init&#x2F;copy_app.rc:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;init&#x2F;copy_app.rc \</span><br><span class="line">    $(LOCAL_PATH)&#x2F;prebuild&#x2F;apps&#x2F;UCBrowser.apk:$(TARGET_COPY_OUT_SYSTEM)&#x2F;pre-install&#x2F;UCBrowser.apk \   $(LOCAL_PATH)&#x2F;prebuild&#x2F;etc&#x2F;default_virtual_camera:$(TARGET_COPY_OUT_SYSTEM)&#x2F;etc&#x2F;default_virtual_camera</span><br></pre></td></tr></table></figure><p>3、同上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;vendor&#x2F;cells&#x2F;prebuild&#x2F;bin&#x2F;copy_apps.sh:</span><br><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;UCBrowser.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>注意：后来测试发现OTA升级后，内置的app可能会不在，需要模仿上面重新写下，具体原因后面有时间的话再去分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;system&#x2F;bin&#x2F;sh</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;Bilibili.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;kuaishou.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;UCBrowser.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;taobao.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;yingyongbao.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;TikTok.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;changba.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;tengxunhuiyi.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did</span><br><span class="line">fi</span><br><span class="line">if [ ! -f &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did_v2 ]; then</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;Wps.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;jingdongshipin.apk</span><br><span class="line">    pm install &#x2F;system&#x2F;pre-install&#x2F;lizhiweike.apk</span><br><span class="line">    echo 1 &gt; &#x2F;data&#x2F;local&#x2F;tmp&#x2F;did_v2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android bug分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态栏图标刷新</title>
      <link href="2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/"/>
      <url>2021/04/22/%E7%8A%B6%E6%80%81%E6%A0%8F%E5%9B%BE%E6%A0%87%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45080805/article/details/109485697?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control" target="_blank" rel="noopener">状态栏图标刷新</a> + <a href="https://blog.csdn.net/Sunxiaolin2016/article/details/99584029" target="_blank" rel="noopener">图标刷新2，不全</a></p><p>这块的流程因时间问题还未分析（Search Key = “Rain.G”）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Notification的使用</title>
      <link href="2021/04/22/Notification%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/04/22/Notification%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="一、基本用法："><a href="#一、基本用法：" class="headerlink" title="一、基本用法："></a>一、基本用法：</h5><h6 id="Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel"><a href="#Notification-基本使用-8-0及8-0以上版本修改-注意添加通知Channel" class="headerlink" title="Notification 基本使用 + 8.0及8.0以上版本修改(注意添加通知Channel)"></a>Notification <a href="https://blog.csdn.net/qi85481455/article/details/82895507" target="_blank" rel="noopener">基本使用</a> + <a href="https://blog.csdn.net/yh18668197127/article/details/86299290" target="_blank" rel="noopener">8.0及8.0以上版本修改(注意添加通知Channel)</a></h6><p>在上面”基本使用”的模块使用中，发现实现不了通知的效果，原因是Android8.0 (API26) 开始要求通知设置Channel,否则会报错</p><p>注意: mipmap文件夹只放应用启动图标, 可以根据不同分辨率进行优化 , 其他需要使用的drawable资源放到对应的drawable文件夹。之前做的一次通知demo, 因为图片资源存放错误的问题，使通知栏下拉的通知图标显示灰色，导致分析bug方向出现失误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">String id = <span class="string">"channelId"</span>;</span><br><span class="line">String name = <span class="string">"xiaoxitongzhi"</span> ;<span class="comment">//就是设置里通知类别</span></span><br><span class="line">NotificationChannel notificationChannel = <span class="keyword">null</span>;</span><br><span class="line">NotificationManager notionManager= (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    notificationChannel = <span class="keyword">new</span> NotificationChannel(id, name, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">    notionManager.createNotificationChannel(notificationChannel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, NotificationActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,intent,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, id)</span><br><span class="line">    .setChannelId(id) <span class="comment">//8.0需要加 channelId</span></span><br><span class="line">    .setContentTitle(<span class="string">"title"</span>)</span><br><span class="line">    .setContentText(<span class="string">"contentText"</span>)</span><br><span class="line">    .setContentIntent(contentIntent)</span><br><span class="line">    .setAutoCancel(<span class="keyword">true</span>) <span class="comment">//clicked will dismiss</span></span><br><span class="line">    .setStyle(<span class="keyword">new</span> NotificationCompat.BigPictureStyle().bigPictue(</span><br><span class="line">        BitmapFactory.decodeResource(getResources(),R.drawable.weixin)))<span class="comment">//大长图</span></span><br><span class="line">    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.weixin))</span><br><span class="line">    .addAction(R.drawable.weixin, <span class="string">"button"</span>, contentIntent) <span class="comment">//最多可添加4个按钮</span></span><br><span class="line">    .setProgress(<span class="number">100</span>, <span class="number">30</span>, <span class="keyword">true</span>)<span class="comment">// true代表一个确定的进度条，false代表不确定</span></span><br><span class="line">    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)<span class="comment">//锁定屏幕后是否可以看见，有全部可见、部分可见、完全不可见</span></span><br><span class="line">    .setTimeoutAfter(<span class="number">2000</span>)</span><br><span class="line">    .setSmallIcon(R.drawable.weixin);<span class="comment">//小图标</span></span><br><span class="line"></span><br><span class="line">notionManager.notify(<span class="number">111</span>, mBuilder.build());<span class="comment">//保证每个通知所指定的id都是不同的，</span></span><br></pre></td></tr></table></figure><h5 id="二、设置锁定屏幕公开范围"><a href="#二、设置锁定屏幕公开范围" class="headerlink" title="二、设置锁定屏幕公开范围"></a>二、设置锁定屏幕公开范围</h5><p>要控制锁定屏幕中通知的可见详情级别，请调用 setVisibility() 并指定以下值之一：</p><ul><li>VISIBILITY_PUBLIC     显示通知的完整内容。</li><li>VISIBILITY_SECRET    不在锁定屏幕上显示该通知的任何部分。</li><li>VISIBILITY_PRIVATE   显示基本信息，例如通知图标和内容标题，但隐藏通知的完整内容。</li></ul><h5 id="三、更新通知"><a href="#三、更新通知" class="headerlink" title="三、更新通知"></a>三、更新通知</h5><p>要在发出此通知后对其进行更新，请再次调用 NotificationManagerCompat.notify()，并将之前使用的具有同一 ID 的通知传递给该方法。<br>如果之前的通知已被关闭，则系统会创建一个新通知。您可以选择性调用 setOnlyAlertOnce()，这样通知只会在通知首次出现时打断用户（通过声音、振动或视觉提示），而之后更新则不会再打断用户。</p><h5 id="四、移除通知"><a href="#四、移除通知" class="headerlink" title="四、移除通知"></a>四、移除通知</h5><p>除非发生以下情况之一，否则通知仍然可见：</p><ul><li>用户关闭通知。</li><li>用户点击通知，且您在创建通知时调用了 setAutoCancel()。</li><li>您针对特定的通知 ID 调用了 cancel()。此方法还会删除当前通知。</li><li>您调用了 cancelAll() 方法，该方法将移除之前发出的所有通知。</li><li>如果您在创建通知时使用 setTimeoutAfter() 设置了超时，系统会在指定持续时间过后取消通知。</li></ul><h5 id="五、监听清除通知的方式"><a href="#五、监听清除通知的方式" class="headerlink" title="五、监听清除通知的方式"></a>五、监听清除通知的方式</h5><p>系统现在可区分通知是由用户清除，还是由应用移除。要查看清除通知的方式，您应实现 NotificationListenerService 类的新 onNotificationRemoved() 函数。</p><h5 id="六、横幅通知显示"><a href="#六、横幅通知显示" class="headerlink" title="六、横幅通知显示"></a>六、横幅通知显示</h5><p>看网上好多人说android10后无法显示横幅通知，本来都信了，忽然发现该应用分身是可以的，继续往下追才知道 分为2步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">new</span> NotificationChannel(id, name, NotificationManager.IMPORTANCE_DEFAULT); <span class="comment">//设置通知重要性级别</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在手机设置中将该应用通知里的<span class="string">"在屏幕上弹出"</span>权限打开 <span class="comment">//估计很多人没走这步，所以别人说的不一定是真理</span></span><br></pre></td></tr></table></figure><h5 id="七、自定义通知"><a href="#七、自定义通知" class="headerlink" title="七、自定义通知"></a>七、自定义通知</h5><p>使用自定义通知布局时，请特别注意确保您的自定义布局适用于不同的设备屏幕方向和分辨率。虽然对于所有界面布局，此建议都适用，但它对通知布局而言尤为重要，因为抽屉式通知栏中的空间非常有限。自定义通知布局的可用高度取决于通知视图。通常情况下，收起后的视图布局的高度上限为 64 dp，展开后的视图布局的高度上限为 256 dp。<br>自定义通知有两种，一种是为内容区域创建自定义布局，另一种是创建完全自定义的通知布局。</p><h6 id="1-为内容区域创建自定义布局"><a href="#1-为内容区域创建自定义布局" class="headerlink" title="1.为内容区域创建自定义布局"></a>1.为内容区域创建自定义布局</h6><p>如果您需要自定义内容区域的布局，可以将 NotificationCompat.DecoratedCustomViewStyle 应用到您的通知。借助此 API，您可以为通常由标题和文本内容占据的内容区域提供自定义布局，同时仍对通知图标、时间戳、子文本和操作按钮使用系统装饰。<br>自定义布局的使用方式如下：</p><ul><li>构建基本通知（使用 NotificationCompat.Builder）</li><li>调用 setStyle()，向其传递一个 NotificationCompat.DecoratedMediaCustomViewStyle 实例。</li><li>将自定义布局扩充为 RemoteViews 的实例。</li><li>调用 setCustomContentView() 以设置收起后通知的布局。还可以选择调用 setCustomBigContentView() 来为展开后通知设置不同的布局。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//展开后的大布局会覆盖掉正常布局</span></span><br><span class="line">RemoteViews notificationLayout = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.custom_notification_item);</span><br><span class="line">RemoteViews notificationLayoutExpanded = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.custom_notification_large);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, channelId)</span><br><span class="line">    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">    .setStyle(<span class="keyword">new</span> NotificationCompat.DecoratedCustomViewStyle())</span><br><span class="line">    .setCustomContentView(notificationLayout)</span><br><span class="line">    .setCustomBigContentView(notificationLayoutExpanded)</span><br><span class="line">    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)</span><br><span class="line">    .setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(<span class="keyword">this</span>);</span><br><span class="line">notificationManager.notify(<span class="number">100</span>, notification.build());</span><br></pre></td></tr></table></figure><h6 id="2-创建完全自定义的通知布局"><a href="#2-创建完全自定义的通知布局" class="headerlink" title="2.创建完全自定义的通知布局"></a>2.创建完全自定义的通知布局</h6><p>如果不希望使用标准通知图标和标题装饰通知，请按照上述步骤使用 setCustomBigContentView()，但不要调用 setStyle()。<br>要支持低于 Android 4.1（API 级别 16）的 Android 版本，您还应调用 setContent()，向其传递同一 RemoteViews 对象。<br>这就没有所谓的图标、应用程序名字、展开按钮等等。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 应用层 </category>
          
          <category> SystemUI </category>
          
          <category> Notification </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Activity</title>
      <link href="2021/04/18/Activity/"/>
      <url>2021/04/18/Activity/</url>
      
        <content type="html"><![CDATA[<h6 id="Activity-生命周期、状态-使用"><a href="#Activity-生命周期、状态-使用" class="headerlink" title="Activity 生命周期、状态   使用"></a>Activity 生命周期、状态   <a href="https://blog.csdn.net/qq_36270361/article/details/107141162" target="_blank" rel="noopener">使用</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> 四大组件 </category>
          
          <category> Activity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask</title>
      <link href="2021/04/18/AsyncTask/"/>
      <url>2021/04/18/AsyncTask/</url>
      
        <content type="html"><![CDATA[<h6 id="AsyncTask-基本使用"><a href="#AsyncTask-基本使用" class="headerlink" title="AsyncTask  基本使用"></a>AsyncTask  <a href="https://www.jianshu.com/p/ee1342fcf5e7" target="_blank" rel="noopener">基本使用</a></h6><h6 id="AsyncTask-原理及源码"><a href="#AsyncTask-原理及源码" class="headerlink" title="AsyncTask  原理及源码"></a>AsyncTask  <a href="https://www.jianshu.com/p/37502bbbb25a" target="_blank" rel="noopener">原理及源码</a></h6><p>注意: 本以为调用task.cancel(true)就可以强制结束AsyncTask，但是实际上是不可行的，因为task.cancel(true)方法仅仅是将AsyncTask的cancel标识符设置为true，仍然需要去手动停止循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void ...voids)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// initialization ...</span></span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(isCancelled()) <span class="comment">//这里判断标识符</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">// do my thing ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ending ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Handler</title>
      <link href="2021/04/18/Handler%E6%9C%BA%E5%88%B6/"/>
      <url>2021/04/18/Handler%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h6 id="Handler机制-基本用法"><a href="#Handler机制-基本用法" class="headerlink" title="Handler机制    基本用法"></a>Handler机制    <a href="https://www.jianshu.com/p/fa1450b0bbf6" target="_blank" rel="noopener">基本用法</a></h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android 通信 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>View体系、动画</title>
      <link href="2021/04/18/View%20%E4%BD%93%E7%B3%BB/"/>
      <url>2021/04/18/View%20%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h6 id="View-体系，包括动画"><a href="#View-体系，包括动画" class="headerlink" title="View 体系，包括动画"></a>View 体系，包括动画</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 基础知识 </category>
          
          <category> Android UI控件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>android start</title>
      <link href="2021/04/12/android-start/"/>
      <url>2021/04/12/android-start/</url>
      
        <content type="html"><![CDATA[<h4 id="开机向导启动时机分析"><a href="#开机向导启动时机分析" class="headerlink" title="开机向导启动时机分析"></a>开机向导启动时机分析</h4><p><strong>SystemServer.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">               &#x2F;&#x2F; Start services.</span><br><span class="line">        try &#123;</span><br><span class="line">            traceBeginAndSlog(&quot;StartServices&quot;);</span><br><span class="line">            startBootstrapServices();</span><br><span class="line">            startCoreServices();</span><br><span class="line">            startOtherServices();   &#x2F;&#x2F;启动SystemUi、开机向导、Launcher等</span><br><span class="line">            SystemServerInitThreadPool.shutdown();</span><br><span class="line">        &#125; catch (Throwable ex) &#123;</span><br><span class="line">            ...</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActivityManagerService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void systemReady(final Runnable goingCallback, TimingsTraceLog traceLog) &#123;</span><br><span class="line">        ...</span><br><span class="line">               if (goingCallback !&#x3D; null) goingCallback.run();   &#x2F;&#x2F;启动systemUi</span><br><span class="line">        ...</span><br><span class="line">        synchronized(this) &#123;</span><br><span class="line">               ...</span><br><span class="line">               mAtmInternal.startHomeOnAllDisplays(currentUserId, &quot;systemReady&quot;); &#x2F;&#x2F;启动开机向导和Launcher</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIService.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class SystemUIService extends Service &#123;</span><br><span class="line">         @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SystemUIApplication.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void startServicesIfNeeded() &#123;</span><br><span class="line">        String[] names &#x3D; getResources().getStringArray(R.array.config_systemUIServiceComponents);</span><br><span class="line">        startServicesIfNeeded(names);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">---------config.xml ------------</span><br><span class="line">...</span><br><span class="line">&lt;item&gt;com.android.systemui.SystemBars&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.usb.StorageNotification&lt;&#x2F;item&gt;</span><br><span class="line"> </span><br><span class="line">&lt;item&gt;com.android.systemui.power.PowerUI&lt;&#x2F;item&gt;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;从config.xml文件获取组件的名称，状态栏和导航栏就是从这里获取并启动。</span><br></pre></td></tr></table></figure><p>这里将SystemUI直接屏蔽，发现开机向导还是会出现状态栏和导航栏；<br>分析原因后知道是 KeyguardService 启动了上面提到的SystemUi小组件</p><p>以上就是基本的流程，现在的方案如下：<br>1、延迟SystemUI加载的时间，即开机向导结束后发广播启动SystemUI<br>2、KeyguardService延迟启动SystemUi组件</p><p><strong>延迟SystemUI加载方案：</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void startOtherServices() &#123;</span><br><span class="line">        ...</span><br><span class="line">        mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">               ...</span><br><span class="line">               &#x2F;**traceBeginAndSlog(&quot;StartSystemUI&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                startSystemUi(context, windowManagerF);   &#x2F;&#x2F;启动systemUi</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                reportWtf(&quot;starting System UI&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            traceEnd();*&#x2F;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 1)&#123;</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">               &#125;</span><br><span class="line">               BroadcastReceiver startSystemUIReceiver &#x3D; new BroadcastReceiver() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            if (&quot;com.guyu.action.START_SYSTEMUI&quot;.equals(intent.getAction())) &#123;</span><br><span class="line">               Slog.v(&quot;wx6&quot;, &quot;SystemServer receive com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">                       startSystemUi(context, windowManagerF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">               IntentFilter filter &#x3D; new IntentFilter();</span><br><span class="line">               filter.addAction(&quot;com.guyu.action.START_SYSTEMUI&quot;);</span><br><span class="line">        context.registerReceiver(startSystemUIReceiver, filter);</span><br><span class="line">               ...</span><br><span class="line">        </span><br><span class="line">        &#125;,BOOT_TIMINGS_TRACE_LOG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardService延迟启动SystemUi组件的方案:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这个 service 在系统启动的时候和 SystemUI 启动的时候都会绑定这个服务</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">               if(Settings.Global.getInt(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;) &#x3D;&#x3D; 0)&#123;</span><br><span class="line">        android.util.Log.v(&quot;wx2021&quot;, &quot;res &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + Settings.Global.getString(getBaseContext().getContentResolver(), &quot;device_provisioned&quot;));</span><br><span class="line">               &#125;else  &#123;</span><br><span class="line">                       ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">               &#125;</span><br><span class="line">        &#125; catch (Settings.SettingNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;((SystemUIApplication) getApplication()).startServicesIfNeeded();   &#x2F;&#x2F;这里调用 SystemUIApplication</span><br><span class="line">        mKeyguardViewMediator &#x3D;</span><br><span class="line">                ((SystemUIApplication) getApplication()).getComponent(KeyguardViewMediator.class);</span><br><span class="line">        mKeyguardLifecyclesDispatcher &#x3D; new KeyguardLifecyclesDispatcher(</span><br><span class="line">                Dependency.get(ScreenLifecycle.class),</span><br><span class="line">                Dependency.get(WakefulnessLifecycle.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样修改后导致开机向导结束后会进入锁屏，分析后觉得是 SystemUi 的启动时机太晚引起，分析过程如下：</p><p><strong>PhoneWindowManager.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onSystemUiStarted() &#123;</span><br><span class="line">       bindKeyguard();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">       private void bindKeyguard() &#123;</span><br><span class="line">       synchronized (mLock) &#123;</span><br><span class="line">           if (mKeyguardBound) &#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">           mKeyguardBound &#x3D; true;</span><br><span class="line">       &#125;</span><br><span class="line">       mKeyguardDelegate.bindService(mContext);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>keyguardDelegate.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public void bindService(Context context) &#123;</span><br><span class="line">        ...</span><br><span class="line">        final ComponentName keyguardComponent &#x3D; ComponentName.unflattenFromString(</span><br><span class="line">                resources.getString(com.android.internal.R.string.config_keyguardComponent)); &#x2F;&#x2F;KeyguardService</span><br><span class="line">        intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">        intent.setComponent(keyguardComponent);</span><br><span class="line"> </span><br><span class="line">        if (!context.bindServiceAsUser(intent, mKeyguardConnection,</span><br><span class="line">                Context.BIND_AUTO_CREATE, mHandler, UserHandle.SYSTEM)) &#123;</span><br><span class="line">            Log.v(TAG, &quot;*** Keyguard: can&#39;t bind to &quot; + keyguardComponent);</span><br><span class="line">                       ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard started&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private final ServiceConnection mKeyguardConnection &#x3D; new ServiceConnection() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            if (DEBUG) Log.v(TAG, &quot;*** Keyguard connected (yay!)&quot;);</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;onServiceConnected&quot;);</span><br><span class="line">            mKeyguardService &#x3D; new KeyguardServiceWrapper(mContext,</span><br><span class="line">                    IKeyguardService.Stub.asInterface(service), mCallback);</span><br><span class="line">            if (mKeyguardState.systemIsReady) &#123;</span><br><span class="line">                &#x2F;&#x2F; If the system is ready, it means keyguard crashed and restarted.</span><br><span class="line">Slog.v(&quot;wx000&quot;, &quot;mKeyguardState.systemIsReady&quot;);</span><br><span class="line">                mKeyguardService.onSystemReady();     &#x2F;&#x2F;这里进行 锁屏 操作</span><br><span class="line">                       ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>之前没修改 SystemUi 加载时间之前，也会走到这里， 不过在锁屏的时候进行了判断，如果开机向导还没结束，直接 return 不进行锁屏，现在修改是在 开机向导结束后启动 SystemUi，走到这里没有 return 的条件， 所以会锁屏。</p><p><strong>KeyguardViewMediator.java</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void doKeyguardLocked(Bundle options) &#123;</span><br><span class="line">android.util.Log.v(&quot;wx000&quot;, &quot;00000000000000&quot;);</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; In split system user mode, we never unlock system user.</span><br><span class="line">        if (!mustNotUnlockCurrentUser()</span><br><span class="line">                || !mUpdateMonitor.isDeviceProvisioned()) &#123;</span><br><span class="line"> </span><br><span class="line">            if (!lockedOrMissing &amp;&amp; shouldWaitForProvisioning()) &#123;</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;doKeyguard: not showing because device isn&#39;t provisioned&quot;</span><br><span class="line">                        + &quot; and the sim is not locked or missing&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">               ...</span><br><span class="line">        if (DEBUG) Log.d(TAG, &quot;doKeyguard: showing the lock screen&quot;);</span><br><span class="line">        showLocked(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后决定将 SystemUI 的启动时间放在 显示状态栏界面的后面，即登陆界面的后面，在点击下一步的时候发送广播 ，启动SystemUi，从log看 发广播到 锁屏判断 花费将近1s 多， 有次到5s</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Android 框架层 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_Collection</title>
      <link href="2020/06/27/Java-Collection/"/>
      <url>2020/06/27/Java-Collection/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/coder-lzh/p/10819627.html" target="_blank" rel="noopener">Map集合</a></p><p><a href="https://cloud.tencent.com/developer/article/1451016" target="_blank" rel="noopener">List集合</a></p><p><a href="https://blog.csdn.net/zhangqunshuai/article/details/80660974" target="_blank" rel="noopener">Set集合</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式设计</title>
      <link href="2020/05/30/Danli_1/"/>
      <url>2020/05/30/Danli_1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon1</span></span>&#123;</span><br><span class="line"><span class="comment">//私有化构造方法，不允许外界创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span>  <span class="title">SingleTon1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> SingleTon1 instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//public static  synchronized SingleTon1 instance() &#123;</span></span><br><span class="line"><span class="comment">//if (instance == null) &#123;</span></span><br><span class="line"><span class="comment">// instance = new SingleTon1();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return instance;</span></span><br><span class="line"><span class="comment">//&#125;synchronized按线程顺序执行，会使效率下降</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon1 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//mute锁：静态方法用类名.class,动态用的是this</span></span><br><span class="line"><span class="comment">//下面的设计会一定程度上减少线程阻塞，完后接volatile关键字</span></span><br><span class="line"><span class="comment">/*volatile关键字的作用：</span></span><br><span class="line"><span class="comment"> * 1、保证线程的可见性</span></span><br><span class="line"><span class="comment"> * 2、禁止指令重排序</span></span><br><span class="line"><span class="comment"> * 3、但不能保证其原子性</span></span><br><span class="line"><span class="comment"> * 记住：当多个线程对一个共享变量进行操作时，就用volatile修饰</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SingleTon1<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 此类设计存在线程不安全的原因？</span></span><br><span class="line"><span class="comment"> * 1、多个线程并发执行</span></span><br><span class="line"><span class="comment"> * 2、多个线程有共享数据集</span></span><br><span class="line"><span class="comment"> * 3、多个线程在共享数据集上的操作是非原子操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//SingleThreadTest(); 单线程测试</span></span><br><span class="line">ManyThreadTest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1 s1 = SingleTon1.instance();</span><br><span class="line">SingleTon1 s2 = SingleTon1.instance();</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多线程测试</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ManyThreadTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SingleTon1.instance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> task());</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多线程测试结果是不安全的，方法是：</span></span><br><span class="line"><span class="comment"> * 加上synchronized</span></span><br><span class="line"><span class="comment"> *多线程会只创建一个对象,保证了代码的原子性、安全性，</span></span><br><span class="line"><span class="comment"> *但是要让多个线程在这个代码块上顺序执行，性能会下降。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//小对象频繁用,线程安全，无阻塞</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//此单例的缺陷：可能占用资源比较多，尤其是大对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大对象，频繁用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inner.instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanliTest02</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Singleton2.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
          <category> 单例模式设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo command</title>
      <link href="2020/04/17/Hexo%20Command/"/>
      <url>2020/04/17/Hexo%20Command/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">" New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Clean-Cache"><a href="#Clean-Cache" class="headerlink" title="Clean Cache"></a>Clean Cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Run-Server"><a href="#Run-Server" class="headerlink" title="Run Server"></a>Run Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
